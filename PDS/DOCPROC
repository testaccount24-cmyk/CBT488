//*-------------------------------------------------
//*
//*  JCL statement examples/formats
//*
//*-------------------------------------------------

//XXXXX    PROC COPY01=1,
//             SOUT01=X,
//    8X14     FORM01=STD,
//    8X14     FCB01=STD,
//    8X11     FORM01=8X11,
//    8X11     FCB01=X116,
//             DPRTY=(##,##)    dispatching priority for step
//*            APSX=APST,
//*            MEDX=MEDT,
//*            EOMDATE='MM/DD/YY'
//             CMDX='CMDX'
//*-------------------------------------------------
//*
//*   XXXXX    proc documentation here
//*
//*-------------------------------------------------
//*  TO RUN FOR TODAY:       CMDX='CMDX' OR 'CMD000'
//*  TO RUN FOR TODAY - 1:   CMDX='CMD001'
//*  TO RUN FOR TODAY + 1:   CMDX='CMF001'
//*  TO RUN FOR DATE:        CMDX='20061229'
//*-------------------------------------------------
     DOCIEFBR                             DOCADRD
     DOCIDCAM (USE W/ DOCDEFIN)           DEFINE
     DOCOPEN  (USE W/ DOCOP010)           REPRO
     DOCCLOSE (USE W/ DOCCL010)
     DOCKWIK  (USE W/ DOCKWIK1)
//*-------------------------------------------------
//         IF (RC = 8 | RC = 10 | RC = 12 |
//             RC = 14) THEN            continue on cols 4-16
//*
//         IF (RC = 0) THEN             comments here are OK
//         IF (STEPNAME.RC ^= 0) THEN
//             PGM=
//
//         IF (STEPNAME.RC = 0 OR STEPNAME.RC = 48) THEN
//         IF (RC = 8 OR RC = 10) THEN
//         IF (RC > 4 AND (RC < 12 OR RC = 16)) AND
//            (STEPNAME.RC = 0 AND STEPNAME.RC = 0) AND
//            (STEPNAME.RC = 0) AND
//            (STEPNAME.RC = 0) THEN
//
//         IF (STEPNAME.PROCSTEPNAME.RC = 0) THEN   <-- RC required
//             EXEC    .PGM=        .RC
//
//         IF (STEPNAME.RUN=FALSE OR RC < 4) THEN
//         IF (ABEND) THEN
//*        note: .RC test to previous step is ignored if job has
//*              abended... code  IF (ABEND AND S010.RC = 4) THEN
//         IF (STEPNAME.ABEND = TRUE) THEN
//         IF (ABEND OR S010.RC > 8) THEN
//         IF (STEPNAME.ABENDCC = S317) THEN
//         IF (STEPNAME.ABENDCC = U0550) THEN
//*
//IF01     IF (ABEND OR RC > 4) THEN
//S010     EXEC PGM=XXXXXXXX,...
//S010     EXEC PROC=XXXXXXXX,...
//         ELSE
//S020     EXEC PGM=XXXXXXXX,...
//END01    ENDIF
//*
//*    note: condition logic S020 PROCESSES (ie: generates abend)
//*          if previous step S010 flushed
//S010     EXEC PGM=IEFBR14,COND=(logic that causes step to flush)
//S020     EXEC PGM=ABEND,COND=(16,NE,S010)
//*
//*    instead handle it this way
//S010     EXEC PGM=IEFBR14,COND=(logic that causes step to flush)
//         IF (S010.RC EQ 16) THEN
//S020     EXEC PGM=ABEND
//         ENDIF
//*-------------------------------------------------
//*   XXXXXXX...
//*-------------------------------------------------
//S000     EXEC PGM=NEWWAIT,PARM='NUMBER OF SECONDS',
//             REGION=5120K,
//             COND=(0,NE)
//*-------------------------------------------------
//S000     EXEC PGM=XXXXXXXX,
//             REGION=5120K,
//*            RESTART=J000.S000,
//             COND=(0,NE)
//             COND=(8,LT,S060)
//             COND=((4,NE,S060),(4,LT)) bypass if any test is true
//             COND=(100,EQ,S070.EXTRACEX)
//             COND=(EVEN)   even if a previous step abended
//             COND=(ONLY)   only if a previous step abended
//*  COBOL     PARM='&EOMDATE/'
//*  COBOL     PARM='/UPSI=00000000'
//*  COBOL     PARM='&EOMDATE/UPSI=00000000'
//             PARM='this long string will terminate at column 71 on th
//             e 1st line and continue on line 16 of the 2nd line/'
//*  RPG       PARM=('DATE=&EOMDATE')
//*  RPG       PARM=('UPSI=00000000')
//*  RPG       PARM=('DATE=&EOMDATE','UPSI=00000000')

//   debug     PARM='/TEST(ALL,,PROMPT,MFI%DBUGLU##:)'

//             PARM=('&PL1OPT/DG=&DG,&MACP',             Continuation
//             'UNILVL=&LVL,SITE=&SITE,AP=&AP',          at pos 4-16
//             '&APPLOPT')

//             VOL=SER=(SMS040,SMS041,SMS043,SMS044,
//             SMS045,SMS046,SMS047),

//ddname       ddname is 1 through 8 alphanumeric or national ($, #, @)
               characters.

//STEPLIB  DD  DSN=userid.ISPF.OBJ,DISP=SHR
//SYSOUT   DD  SYSOUT=*
//SYSUDUMP DD  SYSOUT=D
//SYSPRINT DD  SYSOUT=*
//SYSDBOUT DD  SYSOUT=*
//SYSABOUT DD  SYSOUT=*
//SORTWK01 DD  UNIT=LOFDA,SPACE=(CYL,(50,10))
//XXXXXXX  DD  DSN=XXXXXXXXXXXXXXXXXXX,                *SEQ INPUT
//             DCB=EROPT=SKP,DCB=BUFNO=100,
//             DISP=SHR
//XXXXXXX  DD  DSN=XXXXXXXXXXXXXXXXXXX,                *VSAM INPUT
//             DISP=SHR,
//             AMP=('BUFNI=X,BUFND=X,BUFSP=XXXXXX')
//XXXXXXX  DD  DSN=&SYSX..STATIC.PARMLIB(XXXXXXXX),    *INPUT
//             DISP=SHR

          send output to multiple destinations from one DD

//OUT1     OUTPUT CLASS=X,FORMS=X116,DEST=U036,NOTIFY=MHPJES2.userid
//OUT2     OUTPUT CLASS=X,FCB=STD,DEST=U336,PRTY=200  0-255
//SYSUT2   DD  SYSOUT=(,TEST,),OUTPUT=(*.OUT1,*.OUT2)

//OUT3     OUTPUT CLASS=E,DEST=U036
//OUT4     OUTPUT CLASS=X,DEST=
//PRINTER  DD  SYSOUT=(X,MHP0100B,X116),FCB=STD,OUTPUT=(*.OUT3,*.OUT4)

//*-------------------------------------------------
//*  DELETE DASD PRINT OUTPUT
//*-------------------------------------------------
//S010     EXEC PGM=IEFBR14,
//             REGION=5120K,
//             COND=(0,NE)
//SYSPRINT DD  SYSOUT=*
//DASD1    DD  DSN=userid.proc.PRINT1,
//             DISP=(MOD,DELETE,DELETE),
//             SPACE=(TRK,(30,10)),UNIT=LOFDA
//*-------------------------------------------------
//PRINTER  DD  DSN=userid.proc.PRINT1,
//             DISP=(NEW,CATLG,DELETE),
//             SPACE=(TRK,(30,10)),UNIT=LOFDA,
//             DCB=(DSORG=PS),LRECL=81 or 133,RECFM=FBA
//*-------------------------------------------------
//PRINTER  DD  SYSOUT=(&SOUT01,,&FORM01),
//             DCB=RECFM=FM,
//             FCB=&FCB01,
//             DEST=PRTC,
//             HOLD=YES,         Retain report in hold queue
//             COPIES=&COPY01

//JESOUT   DD  SYSOUT=(A,INTRDR)  submit jobs/commands to the intrdr
//TAPE     DD  DSN=XXXXXXXXXXXXXXXXXX,                 *OUTPUT
//             DISP=(NEW,CATLG,DELETE),
//*            DISP=(OLD,UNCATLG,KEEP),
//             BLKSIZE=0,

//             BLKSZLIM=2G, requests larges blk supported by hardware
//             DATACLAS=MEDIA4              * 600000 series tapes
//             DATACLAS=NOTMM,UNIT=3590     * 500000 series tapes
//             UNIT=(3480,,DEFER),
                since a step can include a dataset that the program
                might not use, include DEFER to avoid mounting the
                volume for the data set until the dataset is opened.

//    UNIT=(/0491,,,SMSHONOR)   * send data to particular drive

//             UNIT=(,,DEFER)   * use with iefbr14 to delete a migrated
                                 dataset w/o recall

//             LABEL=(4,SL),                * 4th file on tape
                tape catalog entries contain the file sequence nbr
//             LABEL=(,NL),
//               VOL=SER=(PAATB1,PAATB2),   *NL to 2 vols: 2 names req
//
//             RETPD=#,                     * scratch after # days

//             VOL=SER=XXXXXX,LABEL=##,
//             VOL=(PRIVATE)                * new tape
//             VOL=(,RETAIN),               * skip tape unload
//             VOL=(,RETAIN,SER=XXXXXX),
//             VOL=(,RETAIN,SER=(XXXXXX,XXXXXX)),
//             VOL=(,,,6),                  * allow 5 to 20 tapes
//             VOL=(,,2),
                start searching at 2ND TAPE for dataset

                VOL=SER and VOL=REF are mutually exclusive
//             VOL=SER=JAN01,
//             VOL=REF=DSNAME,
//             VOL=REF=*.DDNAME,
//             VOL=REF=*.STEPNAME.DDNAME,
//             VOL=REF=*.STEPNAME.PROCSTEPNAME.DDNAME,
//             VOL=(,RETAIN,,,REF=*.STEPNAME.PROCSTEPNAME.DDNAME),
//             VOL=(,RETAIN,,6,REF=*.STEPNAME.PROCSTEPNAME.DDNAME),
//             VOL=(,,,6,REF=*.STEPNAME.PROCSTEPNAME.DDNAME),

//     ex:     VOL=(,RETAIN,,,REF=*.S050.PAXMST.PASMSTIN)

//  job        LBL=7,RTN='(,RETAIN,,,REF=*.J060.S020.TAPE)',
//     proc    LABEL=(&LBL,SL),
//     proc    VOL=&RTN

//             RECFM=FB,LRECL=
//             DCB=(OPTCD=Q)   Convert EBCDIC to ASCII at tape write
                              Convert ASCII to EBCDIC at tape read
//             DCB=(OPTCD=W)   Validity check for write operations
//             DCB=(OPTCD=C)   Chained scheduling
//             DCB=(OPTCD=B)
                qsam tape: requests that the eov routine
                ignore the eof.  for sl labels, this allows tapes to
                be read out of sequence, or concatenation of tapes
                with the same dsn.
//             DCB=(TRTCH=COMP/NOCOMP)   Tape compaction (3480 or lower)

//DELTAP   DD  DSN=filename,
//             UNIT=(CART,,DEFER)  * use UNIT=AFF= to force tape mounts
//         DD  DSN=filename,       * to a single physical device
//             UNIT=AFF=DELTAP

//DASD     DD  DSN=XXXXXXXXXXXXXXXXXX,                 *OUTPUT
//             DISP=(NEW,CATLG,DELETE),
//             DATACLAS=D0C0PS,LRECL=80,RECFM=FB,
//             FREE=CLOSE            release file upon close rather
//*                                  than at end of step
//DEBUGFL  DD  DISP=SHR,DSN=&ADMX..MHPSSD.DEBUG.FILE01,FREE=CLOSE
//*
//TEMP     DD  DSN=&&PHHOLD2,                          *OUTPUT
//             DISP=(NEW,PASS,DELETE),
//             UNIT=LOFDA,
//             SPACE=(TRK,(15,2),RLSE),
//             RECFM=FB,LRECL=80,DCB=(DSORG=PS)
//KSDS     DD  DSN=XXXXXXXXXXXXXXXXXX,                 *define vsam
//             DISP=(NEW,CATLG,DELETE),
//             SPACE=(CYL,(20,5)),UNIT=LOFDA,
//             LRECL=   ,KEYLEN=  ,KEYOFF=0,RECORG=KS,
//             AMP=('BUFNI=3,BUFND=30')
//DASD     DD  DSN=XXXXXXXXXXXXXXXXXX,                 *OUTPUT
//             DISP=(NEW,CATLG,DELETE),
//             UNIT=(LOFDA,2),                         *multi-volume
//             VOL=SER=SVMXXX,
//             SPACE=(,(,,100))        override DFSMS directory only
//             SPACE=(ABSTR,(qty,loc)) place at exact track location
//             SPACE=(LRECL,(   ,  ,  ),RLSE),AVGREC=/U/K/M
//             SPACE=(CYL/TRK/15476,(   ,  ,  ),RLSE,CONTIG),
//             RECFM=FB,LRECL=    ,DCB=(DSORG=PS)
//             DCB=(OPTCD=W)   WRITE CHECK
//             DCB=YYYYYYYYYYYYYYYYYYY   allocate filex using filey dcb
//             LIKE=YYYYYYYYYYYYYYYYYY   allocate filex using filey dcb
//
   variable   in program    100 lrecl
              in jcl        104 lrecl

   dsorg      po = partitioned dataset
              ps = sequential dataset
   recfm      f  = fixed            v  = variable
              fb = fixed blocked    vb = variable blocked
              u  = undefined length a  = iso/ansi control chars
              m  = machine code control chars
//
//LOADLIB  DD  DSN=XXXXXXXXXXXXXXXXXX,                 *OUTPUT
//             DISP=(NEW,CATLG,DELETE),
//             UNIT=LOFDA,VOL=SER=SVMXXX,
//             DATACLAS=DLOAD,
//             DSNTYPE=LIBRARY,        define PDSE extended library
//             SPACE=(TRK,(150,0,80)),
//             RECFM=U,LRECL=0,BLKSIZE=23476,DCB=(DSORG=PO,OPTCD=W)
//
//DD1      DD *,DLM=AA
 ASDFASDFASDFASDF
AA
//DD2      DD DATA
//S000     EXEC PGM=XXXXXXXX               DATA: used to access jcl as
//FILE     DD DSN=SYSP.CHESTER,DISP=SHR          instream data
/*
   block = multiple of record size < = 15476.
   #1 = (((2 * #records) / block) * lrecl) rounded. #2 = 1/10th of #1.


//*-------------------------------------------------
//*  *$B1RSW1 AND *$B1RSW2 ARE HIGH PRIORITY ADHOCS.
//*  LET THE JOBS THAT CREATE THEM - PCD02T03 AND PCD02T08 -
//*  RUN FOR TWO HOURS AND THEN INCREASE THEIR PRIORITY.
//*-------------------------------------------------
//M010     EXEC PGM=MIS0685B,
//             REGION=5120K,
//             PARM='N00000000/'
//SYSOUT   DD  SYSOUT=*
//SYSUDUMP DD  SYSOUT=D
//SYSPRINT DD  SYSOUT=*
//PARM01   DD  DISP=SHR,DSN=PLSMS.SMSSM00L.H00T0.SYSIN(PCD02T08)
//OUTNOT   DD  DUMMY
//OFFSET   DD  DISP=SHR,DSN=APSP.STATIC.PARMLIB(MIS10010)
//*-------------------------------------------------
//*  submit command to increase the priority on a job
//*  -or-  submit job to internal reader
//*-------------------------------------------------
//M020     EXEC PGM=IEBGENER,REGION=5120K,
//             COND=(4,NE,M010)
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  DUMMY
//SYSUT1   DD  DSN=PLSMS.SMSSM00L.H00T0.SYSIN(PCD02T06),DISP=SHR
//SYSUT2   DD  SYSOUT=(A,INTRDR)
//*  this command is submitted
//*    /*$VS,'E PCD02T08,SRVCLASS=PRDBATHI'
//*-------------------------------------------------
//*  ISSUE COND CODE 0004 IF FILE IS EMPTY
//*-------------------------------------------------
//S030     EXEC PGM=IDCAMS,
//             COND=(0,NE),
//             REGION=5120K
//SYSPRINT DD  SYSOUT=*
//IFILE01  DD  DSN= filename
//SYSIN    DD  DSN=APSP.IDCAMS.PARMLIB(PARM0006),DISP=SHR
//*-------------------------------------------------

MHP0775B - purge records from standard record length files
 Valid file lengths: 00080 00081 00100 00132 00133 00200 00300 00500


