
       TITLE '  JCI0049B: add picture clauses'.
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    JCI0049B.
      ******************************************************************
      *@@@ C3 count picture (PIC  X) clauses and report on total
      ******************************************************************
      *
      *  I am interested in knowing if/where these programs
      *  are in use.     Email:  jiannon@me.com
      *
      ****************************************************************
      * Date written: 04/22/94
      * Author      : Jim Iannone
      *
      *               Utility to add picture clauses, with these
      *               features:
      *               1)  will skip redefine values
      *               2)  will handle elementary items in an occurs
      *                   clause
      *               3)  COMP and COMP-3 adjustments are displayed.
      *                   it is suggested that these be reviewed.
      ******************************************************************

       ENVIRONMENT DIVISION.

       CONFIGURATION SECTION.

       INPUT-OUTPUT SECTION.
       FILE-CONTROL.

           SELECT INPROG               ASSIGN TO INPROG
                                       ORGANIZATION IS SEQUENTIAL
                                       ACCESS MODE IS SEQUENTIAL
                                       FILE STATUS IS WS-STAT.

       DATA DIVISION.
       FILE SECTION.

       FD  INPROG
           RECORDING MODE F
           BLOCK CONTAINS 0.
       01  INPROG-RECORD.
           05  FILLER                  PIC  X(80).

       WORKING-STORAGE SECTION.

       01  WS-START.
           05  FILLER                  PIC  X(32)    VALUE
               ' Working storage JCI0049B start '.

       01  WS-WORK-FIELDS.
           05  WS-STAT                 PIC  99       VALUE ZERO.
           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.
           05  WS-LEVEL                PIC  99       VALUE ZERO.
           05  FILLER REDEFINES WS-LEVEL.
               10  WS-LEVEL-1          PIC  9.
               10  WS-LEVEL-2          PIC  9.
           05  WS-REDEF-LVL            PIC  99       VALUE ZERO.
           05  WS-OCCUR-LVL            PIC  99       VALUE ZERO.
           05  WS-COMP3-LVL            PIC  99       VALUE ZERO.
           05  WS-BIN-LVL              PIC  99       VALUE ZERO.
           05  WS-OCCUR-VAL            PIC  9(05)    VALUE ZERO.
           05  WS-TALLY                PIC  9(07)    VALUE ZERO.
           05  WS-FINAL-TOT            PIC  9(07)    VALUE ZERO.
           05  WS-ADD-VAL              PIC  9(07)    VALUE ZERO.
           05  WS-FINAL-OCCUR          PIC  9(07)    VALUE ZERO.
           05  WS-OCCUR-HOLD           PIC  9(07)    VALUE ZERO.
           05  WS-PREV-VAL             PIC  9(07)    VALUE ZERO.
           05  WS-PREV-TOT             PIC  9(07)    VALUE ZERO.
           05  WS-PREV-OCCUR           PIC  9(07)    VALUE ZERO.
           05  WS-ALL-TOT              PIC  9(07)    VALUE ZERO.
           05  WS-ALL-OCCUR            PIC  9(07)    VALUE ZERO.
           05  WS-BIN-TOT              PIC  9(07)    VALUE ZERO.
           05  WS-BIN-OCCUR            PIC  9(07)    VALUE ZERO.
           05  WS-COMP3-OCCUR          PIC  9(07)    VALUE ZERO.
           05  WS-COMP3-VAL            PIC  9(07)    VALUE ZERO.
           05  WS-COMP3-TOT            PIC  9(07)    VALUE ZERO.
           05  WS-COMP-TOT             PIC  9(07)    VALUE ZERO.
           05  WS-PAREN-CNT            PIC  9(07)    VALUE ZERO.
           05  WS-START-LINE           PIC  9(05)    VALUE ZERO.
           05  WS-END-LINE             PIC  9(05)    VALUE ZERO.

       01  WS-INPROG-RECORD.
           05  WS-INPROG-TABLE         PIC  X(80)    VALUE SPACE.
           05  FILLER REDEFINES WS-INPROG-TABLE.
               10  FILLER              PIC  X(07).
               10  WS-IP-8X11          PIC  X(04).
               10  FILLER              PIC  X(06).
               10  WS-IP-18X21         PIC  X(04).
               10  FILLER              PIC  X(13).
               10  WS-IP-35X62         PIC  X(28).
               10  FILLER              PIC  X(18).
           05  FILLER REDEFINES WS-INPROG-TABLE.
               10  WS-BYTE             PIC  X
                                       OCCURS 80 TIMES.

       01  WS-COUNT-FIELDS             COMP-3.
           05  WS-READ-CNT             PIC S9(07)    VALUE ZERO.
           05  WS-PIC-CNT              PIC S9(07)    VALUE ZERO.

       01  WS-SUBSCRIPTS               COMP.
           05  WS-SUB1                 PIC S9(05)    VALUE ZERO.
           05  WS-SUB2                 PIC S9(05)    VALUE ZERO.
           05  WS-SUB3                 PIC S9(05)    VALUE ZERO.
           05  WS-SUB4                 PIC S9(05)    VALUE ZERO.
           05  WS-SUB5                 PIC S9(05)    VALUE ZERO.
           05  WS-PLACE1               PIC S9(05)    VALUE ZERO.
           05  WS-PLACE2               PIC S9(05)    VALUE ZERO.
           05  WS-PLACE3               PIC S9(05)    VALUE ZERO.

       01  WS-SWITCHES.
           05  WS-END-INPROG-SW        PIC  X        VALUE 'N'.
               88  END-OF-INPROG                     VALUE 'Y'.
               88  MORE-INPROG-RCDS                  VALUE 'N'.
           05  WS-END-PIC-SW           PIC  X        VALUE SPACE.
           05  WS-REDEF-SW             PIC  X        VALUE SPACE.
           05  WS-LEVEL-FND-SW         PIC  X        VALUE SPACE.
           05  WS-OCCUR-SW             PIC  X        VALUE SPACE.
           05  WS-COMP3-SW             PIC  X        VALUE SPACE.
           05  WS-BIN-SW               PIC  X        VALUE SPACE.
           05  WS-PIC-SW               PIC  X        VALUE SPACE.

       01  WS-END.
           05  FILLER                  PIC  X(16)    VALUE
               '  JCI0049B END  '.

       LINKAGE SECTION.

       01  PARM-FIELD.
           05  PARM-LENGTH             PIC S9(04)    COMP.
           05  PARM-START-LINE         PIC  X(05).
           05  PARM-END-LINE           PIC  X(05).

      /
       PROCEDURE DIVISION USING PARM-FIELD.

       0100-PROGRAM-ENTRY.
           DISPLAY '     '.
           DISPLAY '**** JCI0049B calc working-storage PIC lines'.
           PERFORM 0200-OPEN-FILES.

           IF WS-RETURN-CODE = ZERO
               PERFORM 0400-PROCESS-INPROG.

           DISPLAY '**** Records in INPROG     ' WS-READ-CNT.
           IF WS-START-LINE > ZERO
               DISPLAY '**** Start at line         ' WS-START-LINE.
           IF WS-END-LINE > ZERO
               DISPLAY '**** End at line           ' WS-END-LINE.
           DISPLAY '**** Total pic lines       ' WS-PIC-CNT.
           DISPLAY '**** Total pre-bin/comp3   ' WS-PREV-TOT.
           DISPLAY '**** Total binary          ' WS-BIN-TOT.
           DISPLAY '**** Total comp3           ' WS-COMP3-TOT.
           DISPLAY '**** Total bin/comp3 adj   ' WS-COMP-TOT.
           DISPLAY '**** Total unpacked bytes  ' WS-ALL-TOT.
           DISPLAY '**** Final adjusted length ' WS-FINAL-TOT.
           DISPLAY '**** JCI0049B EOJ encountered '.
           DISPLAY '     '.

           IF WS-RETURN-CODE = ZERO
               PERFORM 0300-CLOSE-FILES
           ELSE
               DISPLAY '**** JCI0049B cond code ' WS-RETURN-CODE
                       ' sent by program'
               MOVE WS-RETURN-CODE            TO RETURN-CODE.

           STOP RUN.

       0200-OPEN-FILES.
           OPEN INPUT  INPROG.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** JCI0049B open error on INPROG'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0200                     TO WS-RETURN-CODE.

       0300-CLOSE-FILES.
           CLOSE INPROG.

       0400-PROCESS-INPROG.
           IF PARM-START-LINE NUMERIC
               MOVE PARM-START-LINE           TO WS-START-LINE.
           IF PARM-END-LINE NUMERIC
               MOVE PARM-END-LINE             TO WS-END-LINE.

           IF WS-RETURN-CODE = ZERO
               PERFORM 0500-READ-INPROG
                   UNTIL END-OF-INPROG.

           PERFORM 0700-TOTAL-PIC-CLAUSE.
           IF WS-OCCUR-SW = 'Y'
               IF WS-LEVEL NOT > WS-OCCUR-LVL
                   PERFORM 1000-ADD-OCCURS.
           COMPUTE WS-COMP-TOT = WS-PREV-TOT - WS-COMP3-TOT.
           COMPUTE WS-COMP-TOT = WS-COMP-TOT - WS-BIN-TOT.

       0500-READ-INPROG.
           READ INPROG.
           IF WS-STAT = ZERO
               ADD 1                          TO WS-READ-CNT
               PERFORM 0600-SELECT THRU
                       0600-SELECT-EXIT
           ELSE
           IF WS-STAT = 10
               MOVE 'Y'                       TO WS-END-INPROG-SW
               MOVE ZERO                      TO WS-LEVEL
           ELSE
               DISPLAY '**** JCI0049B read error on INPROG '
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0500                     TO WS-RETURN-CODE.

      *---------------------------------------
      *    SKIP LINES IF LINE NUMBERS/COUNTS SENT IN LINKAGE SECTION
      *---------------------------------------
        0600-SELECT.
           IF WS-START-LINE > ZERO
               IF WS-READ-CNT < WS-START-LINE
                   GO TO 0600-SELECT-EXIT.
           IF WS-END-LINE > ZERO
               IF WS-READ-CNT > WS-END-LINE
                   MOVE 'Y'                   TO WS-END-INPROG-SW
                   MOVE ZERO                  TO WS-LEVEL
                   GO TO 0600-SELECT-EXIT.

           IF WS-IP-8X11 = 'PROC'
               AND WS-IP-18X21 = 'DIVI'
               MOVE 'Y'                       TO WS-END-INPROG-SW
               GO TO 0600-SELECT-EXIT.

           MOVE INPROG-RECORD                 TO WS-INPROG-RECORD.

           IF WS-BYTE (7) = '*'
               GO TO 0600-SELECT-EXIT.

       0600-CONTINUE1.
           MOVE SPACE                         TO WS-LEVEL-FND-SW.
           PERFORM 1800-SAVE-LEVEL
               VARYING WS-SUB2 FROM 7 BY 1
               UNTIL WS-SUB2 > 50.

           IF WS-LEVEL-FND-SW = 'Y'
             IF WS-LEVEL = 88
               GO TO 0600-SELECT-EXIT.

      *---------------------------------------
      *    SKIP LINES INCLUDED WITHIN A REDEFINE
      *---------------------------------------
           IF WS-REDEF-SW = SPACE
               PERFORM 1500-CHECK-FOR-REDEFINES
                   VARYING WS-SUB1 FROM 14 BY 1
                   UNTIL WS-SUB1 > 60
               IF WS-REDEF-LVL > ZERO
                   GO TO 0600-SELECT-EXIT
               ELSE
                   CONTINUE
           ELSE
           IF WS-REDEF-SW = 'Y'
               IF WS-LEVEL-FND-SW = SPACE
                   GO TO 0600-SELECT-EXIT
               ELSE
               IF WS-LEVEL NOT > WS-REDEF-LVL
                   MOVE SPACE                 TO WS-REDEF-SW
                   MOVE ZERO                  TO WS-LEVEL WS-REDEF-LVL
                   GO TO 0600-CONTINUE1
               ELSE
                   GO TO 0600-SELECT-EXIT.

      *---------------------------------------
      *    ADD VALUE FROM PREVIOUS PIC CLAUSE TO TOTAL COUNTERS
      *---------------------------------------
           IF WS-LEVEL-FND-SW = 'Y'
               PERFORM 0700-TOTAL-PIC-CLAUSE.

      *---------------------------------------
      *    ACCUMULATE LINES WITHIN AN OCCURS
      *---------------------------------------
       0600-CONTINUE2.
           IF WS-OCCUR-SW = SPACE
               PERFORM 1600-CHECK-FOR-OCCURS
                   VARYING WS-SUB1 FROM 10 BY 1
                   UNTIL WS-SUB1 > 66
               MOVE ZERO                      TO WS-PREV-OCCUR
               MOVE ZERO                      TO WS-BIN-OCCUR
               MOVE ZERO                      TO WS-COMP3-OCCUR
               MOVE ZERO                      TO WS-ALL-OCCUR
               MOVE ZERO                      TO WS-FINAL-OCCUR
           ELSE
           IF WS-OCCUR-SW = 'Y'
               IF WS-LEVEL-FND-SW = SPACE
                   CONTINUE
               ELSE
               IF WS-LEVEL NOT > WS-OCCUR-LVL
                   PERFORM 1000-ADD-OCCURS
                   GO TO 0600-CONTINUE2.

      *---------------------------------------
      *    FIND 'PIC'
      *---------------------------------------
           MOVE 'Y'                           TO WS-PIC-SW.
           PERFORM 0800-FIND-PIC
               VARYING WS-SUB1 FROM 25 BY 1
               UNTIL WS-SUB1 > 60.
           IF WS-SUB1 < 65
               MOVE 'N'                       TO WS-PIC-SW
           ELSE
               ADD 1                          TO WS-PIC-CNT
               MOVE SPACE                     TO WS-END-PIC-SW.

      *---------------------------------------
      *    HANDLE GROUP COMP-3/COMP VALUES
      *---------------------------------------
       0600-CONTINUE3.
           IF WS-COMP3-SW = SPACE
               PERFORM 0900-CHECK-FOR-COMP
                   VARYING WS-SUB1 FROM 25 BY 1
                   UNTIL WS-SUB1 > 68
           ELSE
           IF WS-LEVEL-FND-SW = SPACE
               CONTINUE
           ELSE
           IF WS-LEVEL NOT > WS-COMP3-LVL
               MOVE SPACE                    TO WS-COMP3-SW
               MOVE ZERO                     TO WS-COMP3-LVL
               GO TO 0600-CONTINUE3.

       0600-CONTINUE4.
           IF WS-BIN-SW = SPACE
               PERFORM 0900-CHECK-FOR-BIN
                   VARYING WS-SUB1 FROM 25 BY 1
                   UNTIL WS-SUB1 > 68
           ELSE
           IF WS-LEVEL-FND-SW = SPACE
               CONTINUE
           ELSE
           IF WS-LEVEL NOT > WS-BIN-LVL
               MOVE SPACE                    TO WS-BIN-SW
               MOVE ZERO                     TO WS-BIN-LVL
               GO TO 0600-CONTINUE4.
      *---------------------------------------
      *    ADD PIC VALUES
      *---------------------------------------
           IF WS-PIC-SW = 'Y'
               PERFORM 1200-ADD-LOOP
                   VARYING WS-SUB1 FROM WS-PLACE1 BY 1
                   UNTIL WS-SUB1 > 70
               MOVE WS-ADD-VAL                TO WS-PREV-VAL.

       0600-SELECT-EXIT. EXIT.

      *---------------------------------------
      *---------------------------------------
      *---------------------------------------

       0700-TOTAL-PIC-CLAUSE.
           IF WS-BIN-SW = 'Y'
             IF WS-PREV-VAL > ZERO
               ADD WS-PREV-VAL                TO WS-PREV-TOT
               ADD WS-PREV-VAL                TO WS-PREV-OCCUR
               IF WS-PREV-VAL < 5
                   MOVE 2                     TO WS-ADD-VAL
                   ADD WS-ADD-VAL             TO WS-BIN-TOT
                   ADD WS-ADD-VAL             TO WS-BIN-OCCUR
               ELSE
               IF WS-PREV-VAL < 10
                   MOVE 4                     TO WS-ADD-VAL
                   ADD WS-ADD-VAL             TO WS-BIN-TOT
                   ADD WS-ADD-VAL             TO WS-BIN-OCCUR
               ELSE
                   MOVE 8                     TO WS-ADD-VAL
                   ADD WS-ADD-VAL             TO WS-BIN-TOT
                   ADD WS-ADD-VAL             TO WS-BIN-OCCUR.

           IF WS-COMP3-SW = 'Y'
             IF WS-PREV-VAL > ZERO
                 ADD WS-PREV-VAL              TO WS-PREV-TOT
                 ADD WS-PREV-VAL              TO WS-PREV-OCCUR
                 COMPUTE WS-COMP3-VAL = (WS-PREV-VAL / 2) + 1
                 MOVE WS-COMP3-VAL            TO WS-ADD-VAL
                 ADD WS-COMP3-VAL             TO WS-COMP3-TOT
                 ADD WS-COMP3-VAL             TO WS-COMP3-OCCUR.

           ADD WS-PREV-VAL                    TO WS-ALL-TOT.
           ADD WS-PREV-VAL                    TO WS-ALL-OCCUR.
           ADD WS-ADD-VAL                     TO WS-FINAL-TOT.
           ADD WS-ADD-VAL                     TO WS-FINAL-OCCUR.
           MOVE ZERO                          TO WS-ADD-VAL.
           MOVE ZERO                          TO WS-PREV-VAL.

       0800-FIND-PIC.
           IF WS-INPROG-TABLE(WS-SUB1: 4) = ' PIC'
               MOVE WS-SUB1                   TO WS-PLACE1
               ADD 4                          TO WS-PLACE1
               MOVE 70                        TO WS-SUB1
               IF WS-INPROG-TABLE(WS-PLACE1: 1) = 'T'
                   ADD 4                      TO WS-PLACE1.

      *---------------------------------------
      *    COMP CLAUSE LOGIC
      *---------------------------------------
        0900-CHECK-FOR-BIN.
           IF WS-INPROG-TABLE(WS-SUB1: 6) = ' COMP '
               OR WS-INPROG-TABLE(WS-SUB1: 6) = ' COMP.'
               MOVE WS-LEVEL                  TO WS-BIN-LVL
               MOVE 'Y'                       TO WS-BIN-SW
               MOVE 68                        TO WS-SUB1
               DISPLAY '**** BIN level:      ' WS-BIN-LVL
                       '  Line: ' WS-READ-CNT.

       0900-CHECK-FOR-COMP.
           IF WS-INPROG-TABLE(WS-SUB1: 8) = ' COMP-3 '
               OR WS-INPROG-TABLE(WS-SUB1: 8) = ' COMP-3.'
               MOVE WS-LEVEL                  TO WS-COMP3-LVL
               MOVE 'Y'                       TO WS-COMP3-SW
               MOVE 68                        TO WS-SUB1
               DISPLAY '**** COMP level:     ' WS-COMP3-LVL
                       '  Line: ' WS-READ-CNT.

       1000-ADD-OCCURS.
           MOVE SPACE                         TO WS-OCCUR-SW.
           MOVE ZERO                          TO WS-OCCUR-LVL.
           COMPUTE WS-OCCUR-HOLD = WS-FINAL-OCCUR * WS-OCCUR-VAL.
           DISPLAY '**** Occurs total:   ' WS-OCCUR-HOLD.
           SUBTRACT 1 FROM WS-OCCUR-VAL.
           COMPUTE WS-PREV-OCCUR = WS-PREV-OCCUR * WS-OCCUR-VAL.
           COMPUTE WS-BIN-OCCUR = WS-BIN-OCCUR * WS-OCCUR-VAL.
           COMPUTE WS-COMP3-OCCUR = WS-COMP3-OCCUR * WS-OCCUR-VAL.
           COMPUTE WS-ALL-OCCUR = WS-ALL-OCCUR * WS-OCCUR-VAL.
           COMPUTE WS-FINAL-OCCUR = WS-FINAL-OCCUR * WS-OCCUR-VAL.
           ADD WS-PREV-OCCUR                  TO WS-PREV-TOT.
           ADD WS-BIN-OCCUR                   TO WS-BIN-TOT.
           ADD WS-COMP3-OCCUR                 TO WS-COMP3-TOT.
           ADD WS-ALL-OCCUR                   TO WS-ALL-TOT.
           ADD WS-FINAL-OCCUR                 TO WS-FINAL-TOT.
           MOVE ZERO                          TO WS-PREV-OCCUR.
           MOVE ZERO                          TO WS-BIN-OCCUR.
           MOVE ZERO                          TO WS-COMP3-OCCUR.
           MOVE ZERO                          TO WS-ALL-OCCUR.
           MOVE ZERO                          TO WS-FINAL-OCCUR.
           MOVE ZERO                          TO WS-OCCUR-VAL.

      *---------------------------------------
      *    DISCONTINUE ADDING IF SPACE FOUND
      *---------------------------------------
       1200-ADD-LOOP.
           IF WS-BYTE(WS-SUB1) > SPACE
               MOVE 'Y'                       TO WS-END-PIC-SW.
           IF WS-BYTE(WS-SUB1) = 'X' OR '9' OR 'A' OR '$'
                              OR '+' OR '-' OR '*' OR ','
                              OR 'B' OR '0' OR '/'
               ADD 1                          TO WS-ADD-VAL
           ELSE
           IF WS-BYTE(WS-SUB1) = '.'
               MOVE WS-SUB1                   TO WS-SUB2
               ADD 1                          TO WS-SUB2
               IF WS-BYTE(WS-SUB2) > SPACE
                   ADD 1                      TO WS-ADD-VAL
               ELSE
                   CONTINUE
           ELSE
           IF WS-BYTE(WS-SUB1) = 'C'
               MOVE WS-SUB1                   TO WS-SUB2
               ADD 1                          TO WS-SUB2
               IF WS-BYTE(WS-SUB2) = 'R'
                   ADD 1                      TO WS-SUB2
                   IF WS-BYTE(WS-SUB2) = ' ' OR '.'
                       ADD 2                  TO WS-ADD-VAL
                   ELSE
                       CONTINUE
               ELSE
                   CONTINUE
           ELSE
           IF WS-BYTE(WS-SUB1) = 'D'
               MOVE WS-SUB1                   TO WS-SUB2
               ADD 1                          TO WS-SUB2
               IF WS-BYTE(WS-SUB2) = 'B'
                   ADD 1                      TO WS-SUB2
                   IF WS-BYTE(WS-SUB2) = ' ' OR '.'
                       ADD 2                  TO WS-ADD-VAL
                   ELSE
                       CONTINUE
               ELSE
                   CONTINUE
           ELSE
           IF WS-BYTE(WS-SUB1) = 'Z'
               MOVE 'Y'                       TO WS-END-PIC-SW
               MOVE WS-SUB1                   TO WS-SUB2
               ADD 1                          TO WS-SUB2
               IF WS-BYTE(WS-SUB2) = 'E'
                   CONTINUE
               ELSE
                   ADD 1                      TO WS-ADD-VAL
           ELSE
           IF WS-BYTE(WS-SUB1) = '('
               PERFORM 2000-FIND-RIGHT-PAREN
                   VARYING WS-SUB5 FROM WS-SUB1 BY 1
                   UNTIL WS-SUB5 > 70
               ADD WS-PAREN-CNT               TO WS-ADD-VAL
               MOVE ZERO                      TO WS-PAREN-CNT
               MOVE WS-PLACE1                 TO WS-SUB1
               SUBTRACT 1 FROM WS-ADD-VAL
           ELSE
           IF WS-BYTE(WS-SUB1) = SPACE
               IF WS-END-PIC-SW = 'Y'
                   MOVE 70                    TO WS-SUB1.

       1500-CHECK-FOR-REDEFINES.
           IF WS-INPROG-TABLE (WS-SUB1: 11) = ' REDEFINES '
               MOVE 'Y'                       TO WS-REDEF-SW
               MOVE WS-LEVEL                  TO WS-REDEF-LVL
               MOVE 60                        TO WS-SUB1
               DISPLAY '**** Redefine level: ' WS-REDEF-LVL
                       '  Line: ' WS-READ-CNT.

      *---------------------------------------
      *    OCCURS CLAUSE LOGIC
      *---------------------------------------
       1600-CHECK-FOR-OCCURS.
           IF WS-INPROG-TABLE (WS-SUB1: 8) = ' OCCURS '
               MOVE WS-LEVEL                  TO WS-OCCUR-LVL
               ADD 8                          TO WS-SUB1
               MOVE ZERO                      TO WS-OCCUR-VAL
               MOVE 5                         TO WS-SUB5
               PERFORM 1600-GET-OCCURS-VAL
                   VARYING WS-SUB2 FROM WS-SUB1 BY 1
                   UNTIL WS-SUB2 > 70
               MOVE 'Y'                       TO WS-OCCUR-SW
               MOVE 66                        TO WS-SUB1
               DISPLAY '**** Occurs level:   ' WS-OCCUR-LVL
                       '  Line: ' WS-READ-CNT
                       '  Value: ' WS-OCCUR-VAL.

      *---------------------------------------
      *    TO DETERMINE THE NUMBER OF TIMES THIS GROUP OCCURS,
      *    FIND THE FIRST NUMERIC BYTE, LOOP UNTIL A NON-NUMERIC
      *    IS FOUND, THEN LOAD THE BYTES IN REVERSE ORDER UNTIL
      *    A NON-NUMERIC IS FOUND AT THE FRONT OF THE NUMBER.
      *+--------------------------------------
       1600-GET-OCCURS-VAL.
           IF WS-BYTE(WS-SUB2) NUMERIC
             PERFORM VARYING WS-SUB3 FROM WS-SUB2 BY 1
                 UNTIL WS-SUB3 > 70
                 IF WS-BYTE(WS-SUB3) NOT NUMERIC
                     PERFORM VARYING WS-SUB4 FROM WS-SUB3 BY -1
                         UNTIL WS-SUB4 < WS-SUB2
                         IF WS-BYTE(WS-SUB4) NUMERIC
                             MOVE WS-BYTE(WS-SUB4)
                                  TO WS-OCCUR-VAL(WS-SUB5: 1)
                             SUBTRACT 1 FROM WS-SUB5
                         END-IF
                     END-PERFORM
                     MOVE 70                  TO WS-SUB3
                 END-IF
             END-PERFORM
             MOVE 70                          TO WS-SUB2
           END-IF.

       1800-SAVE-LEVEL.
           IF WS-BYTE(WS-SUB2) NUMERIC
               MOVE WS-SUB2                   TO WS-SUB3
               ADD 1                          TO WS-SUB3
               IF WS-BYTE(WS-SUB3) NUMERIC
                   MOVE WS-BYTE(WS-SUB3)      TO WS-LEVEL-2
                   ADD 1                      TO WS-SUB3
                   IF WS-BYTE(WS-SUB3) = SPACE
                       MOVE WS-BYTE(WS-SUB2)  TO WS-LEVEL-1
                       MOVE 50                TO WS-SUB2
                       MOVE 'Y'               TO WS-LEVEL-FND-SW
                   ELSE
                       CONTINUE
               ELSE
               IF WS-BYTE(WS-SUB3) = SPACE
                   MOVE WS-BYTE(WS-SUB2)      TO WS-LEVEL-2
                   MOVE ZERO                  TO WS-LEVEL-1
                   MOVE 50                    TO WS-SUB2
                   MOVE 'Y'                   TO WS-LEVEL-FND-SW
               ELSE
                   CONTINUE
           ELSE
           IF WS-BYTE(WS-SUB2) NOT = SPACE
               MOVE 50                        TO WS-SUB2.

       2000-FIND-RIGHT-PAREN.
           IF WS-BYTE(WS-SUB5) = ')'
               MOVE WS-SUB5                   TO WS-SUB2 WS-PLACE1
               MOVE 70                        TO WS-SUB5
               SUBTRACT 1 FROM WS-SUB2
               IF WS-BYTE(WS-SUB2) NUMERIC
                   MOVE 'Y'                   TO WS-END-PIC-SW
                   MOVE WS-BYTE(WS-SUB2)      TO WS-TALLY
                   ADD WS-TALLY               TO WS-PAREN-CNT
                   SUBTRACT 1 FROM WS-SUB2
                   IF WS-BYTE(WS-SUB2) NUMERIC
                       MOVE WS-BYTE(WS-SUB2)  TO WS-TALLY
                       COMPUTE WS-TALLY = WS-TALLY * 10
                       ADD WS-TALLY           TO WS-PAREN-CNT
                       SUBTRACT 1 FROM WS-SUB2
                     IF WS-BYTE(WS-SUB2) NUMERIC
                         MOVE WS-BYTE(WS-SUB2) TO WS-TALLY
                         COMPUTE WS-TALLY = WS-TALLY * 100
                         ADD WS-TALLY       TO WS-PAREN-CNT
                         SUBTRACT 1 FROM WS-SUB2
                       IF WS-BYTE(WS-SUB2) NUMERIC
                           MOVE WS-BYTE(WS-SUB2) TO WS-TALLY
                           COMPUTE WS-TALLY = WS-TALLY * 1000
                           ADD WS-TALLY   TO WS-PAREN-CNT
                           SUBTRACT 1 FROM WS-SUB2
                         IF WS-BYTE(WS-SUB2) NUMERIC
                             MOVE WS-BYTE(WS-SUB2) TO WS-TALLY
                             COMPUTE WS-TALLY = WS-TALLY * 10000
                             ADD WS-TALLY TO WS-PAREN-CNT.

      ************************************ END JCI0049B
