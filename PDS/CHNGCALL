
       TITLE '  CHNGCALL: replace strings in files'.
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    CHNGCALL.
       AUTHOR.        MERCY HEALTH PARTNERS.
      ******************************************************************
      *@@@ II replace strings within passed data
      ******************************************************************
      *
      *  I am interested in knowing if/where these programs
      *  are in use.     email:  jiannon@me.com
      *
      ******************************************************************
      * Date written: 03/29/96
      * Author      : Jim Iannone
      *
      *               create CHNGCALL from CHNGFILE to make
      *               line at a time changes to passed data
      *
      ******************************************************************

       ENVIRONMENT DIVISION.

       CONFIGURATION SECTION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.

       DATA DIVISION.
       FILE SECTION.


       WORKING-STORAGE SECTION.

       01  WS-START.
           05  FILLER                  PIC  X(32)    VALUE
               ' WORKING STORAGE CHNGCALL START '.

       01  WS-WORK-FIELDS.
           05  WS-STAT                 PIC  99       VALUE ZERO.
           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.
           05  WS-SET-CODE             PIC S9(04)    VALUE ZERO COMP.
           05  WS-DEFAULT-CODE         PIC S9(04)    VALUE ZERO COMP.
           05  WS-PARM01-MAX           PIC  999      VALUE ZERO.
           05  WS-DAY-NBR              PIC  99       VALUE ZERO.
           05  WS-LEN1                 PIC S9(05)    VALUE ZERO.
           05  WS-LEN2                 PIC S9(05)    VALUE ZERO.
           05  WS-FIND-POS             PIC  9(05)    VALUE ZERO.
           05  WS-LEN-DIFF             PIC  9(05)    VALUE ZERO.
           05  WS-AHEAD-LOC            PIC  9(05)    VALUE ZERO.
           05  WS-RCD-N                PIC  9(09)    VALUE ZERO.
           05  WS-F-MAX                PIC  9(05)    VALUE ZERO.
           05  WS-F-LEN                PIC  9(05)    VALUE ZERO.
           05  WS-F-POS                PIC S9(04)    VALUE ZERO.
           05  WS-F-MPOS               PIC S9(04)    VALUE ZERO.
           05  WS-F-FLAG               PIC  X        VALUE SPACE.
           05  WS-F-PULL               PIC  X        VALUE SPACE.
           05  WS-F-SAVE-POS           PIC  9(04)    VALUE ZERO.
           05  WS-F-AHEAD-POS          PIC  9(05)    VALUE ZERO.
           05  WS-F-TYPE               PIC  X        VALUE SPACE.
           05  WS-R-MAX                PIC  9(05)    VALUE ZERO.
           05  WS-R-LEN                PIC  9(05)    VALUE ZERO.
           05  WS-R-POS                PIC S9(04)    VALUE ZERO.
           05  WS-R-MPOS               PIC S9(04)    VALUE ZERO.
           05  WS-R-FLAG               PIC  X        VALUE SPACE.
           05  WS-R-PULL               PIC  X        VALUE SPACE.
           05  WS-R-ADJ                PIC  X        VALUE SPACE.
           05  WS-R-AHEAD-POS          PIC  9(05)    VALUE ZERO.
           05  WS-MATH-VALUE           PIC  9(12)    VALUE ZERO.
           05  WS-MATH-INC             PIC  9(05)    VALUE ZERO.
           05  WS-HOLD-IN              PIC  X(06)    VALUE SPACE.
           05  WS-FILE-LEN             PIC  9(05)    VALUE ZERO.
           05  WS-HOLD-DATE            PIC  X(20)    VALUE SPACE.
           05  WS-ODO-PRE              PIC  9(06)    VALUE ZERO.
           05  WS-ODO-POST             PIC  9(06)    VALUE ZERO.
           05  WS-UNPACK-6             PIC  9(06)    VALUE ZERO.

       01  WS-LARGE-FIELDS.
           05  WS-F-DATA               PIC  X(10000) VALUE SPACE.
           05  FILLER REDEFINES WS-F-DATA.
               10  WS-F-DATA-1         PIC  X.
               10  FILLER              PIC  X(9999).
           05  WS-F-HOLD-DATA          PIC  X(10000) VALUE SPACE.
           05  WS-R-DATA               PIC  X(10000) VALUE SPACE.
           05  WS-R-HOLD-DATA          PIC  X(10000) VALUE SPACE.
           05  WS-ADD-DATA             PIC  X(80)    VALUE SPACE.
           05  WS-PRE-DATA             PIC  X(44)    VALUE SPACE.

       01  WS-VARIABLE-FIELD.
           05  WS-HOLD-PACKED.
               10  WS-F-HOLD-PRE       PIC  X
                                       OCCURS 1 TO 9999 TIMES
                                       DEPENDING ON WS-ODO-PRE.
               10  WS-PACK-4           PIC  9(07)  COMP-3.
               10  WS-F-HOLD-POST      PIC  X
                                       OCCURS 1 TO 9999 TIMES
                                       DEPENDING ON WS-ODO-POST.

       01  WS-COND-FIELDS.
           05  WS-COND-DATA                          VALUE SPACE.
               10  WS-COND-CODE        PIC  X(04).
               10  FILLER              PIC  X.
               10  WS-COND-DAY         PIC  XX.
               10  WS-COND-DAY-N REDEFINES WS-COND-DAY
                                       PIC  99.
               10  FILLER              PIC  X.
               10  WS-COND-FLAG        PIC  X.
           05  WS-1-CYMD               PIC  X(08)    VALUE SPACE.
           05  FILLER REDEFINES WS-1-CYMD.
               10  WS-1-CYMD-CC        PIC  XX.
               10  WS-1-CYMD-YY        PIC  XX.
               10  WS-1-CYMD-MM        PIC  XX.
               10  WS-1-CYMD-DD        PIC  XX.
           05  FILLER REDEFINES WS-1-CYMD.
               10  FILLER              PIC  XX.
               10  WS-1-CYMD-YMD       PIC  X(06).

       01  WS-SUBSCRIPTS.
           05  WS-SUB1                 PIC  9(05)    VALUE ZERO.
           05  WS-SUB2                 PIC  9(05)    VALUE ZERO.
           05  WS-SUB3                 PIC  9(05)    VALUE ZERO.
           05  WS-SUB4                 PIC S9(05)    VALUE ZERO.
           05  WS-SUB5                 PIC  9(05)    VALUE ZERO.

       01  WS-COUNT-FIELDS             COMP-3.
           05  WS-READ-RCD-CNT         PIC S9(09)    VALUE ZERO.
           05  WS-REWRITE-RCD-CNT      PIC S9(09)    VALUE ZERO.

       01  WS-SWITCHES.
           05  WS-END-PARM01-SW        PIC  X        VALUE 'N'.
               88  END-OF-PARM01                     VALUE 'Y'.
               88  MORE-PARM01-RCDS                  VALUE 'N'.
           05  WS-END-CHANGED-SW       PIC  X        VALUE 'N'.
               88  END-OF-CHANGED                    VALUE 'Y'.
               88  MORE-CHANGED-RCDS                 VALUE 'N'.
           05  WS-DIFF-SW              PIC  X        VALUE SPACE.
           05  WS-SPACE-SW             PIC  X        VALUE SPACE.
           05  WS-REWRITE-SW           PIC  X        VALUE SPACE.
           05  WS-WRITE-SW             PIC  X        VALUE SPACE.
           05  WS-EDIT-S-SW            PIC  X        VALUE SPACE.
           05  WS-REPLACE-SW           PIC  X        VALUE SPACE.
           05  WS-CALC-POS-SW          PIC  X        VALUE SPACE.
           05  WS-CONVERT-SW           PIC  X        VALUE SPACE.
           05  WS-IGNORE-ERR-SW        PIC  X        VALUE SPACE.
           05  WS-COND-CODE-SW         PIC  X        VALUE SPACE.
           05  WS-POINT-SW             PIC  X        VALUE SPACE.
               88  POINTER-RCD                       VALUE ' ' 'F'
                                                     'N' 'R' 'S'.

       01  WS-PARM-TABLE.
           05  WS-PARM-LINES           PIC  X(5680)  VALUE SPACE.
           05  WS-PARM-LINE REDEFINES WS-PARM-LINES
                                       OCCURS 80 TIMES.
               10  WS-LEN              PIC  9(04).
               10  WS-POS              PIC  9(04).
               10  WS-MPOS             PIC  9(04).
               10  WS-INCL             PIC  99.
               10  WS-CNT              PIC  99.
               10  WS-FPOS             PIC  9(04).
               10  WS-PNT1             PIC  X.
               10  WS-PNT2             PIC  X.
               10  WS-TYPE             PIC  X.
               10  WS-FLAG             PIC  X.
               10  WS-PULL             PIC  X.
               10  WS-ADJ              PIC  X.
               10  WS-SUPPR            PIC  X.
               10  WS-DATA             PIC  X(44).

      *    YEAR 2000 COMPATIBLE DATE ROUTINE
       01  WS-STV0400B-FIELDS.
           05  STV0400B-DATA           PIC  X(10)   VALUE SPACE.
           05  FILLER REDEFINES STV0400B-DATA.
               10  STV0400B-ERROR      PIC  X(06).
               10  STV0400B-NBR        PIC  X(04).
           05  FILLER REDEFINES STV0400B-DATA.
               10  STV0400B-CYMD       PIC  X(08).
               10  FILLER              PIC  XX.
           05  FILLER REDEFINES STV0400B-DATA.
               10  STV0400B-DAYS       PIC  X(05).
               10  FILLER              PIC  X(05).
           05  FILLER REDEFINES STV0400B-DATA.
               10  STV0400B-DAY        PIC  X(09).
               10  STV0400B-DAY-NBR    PIC  X.
           05  STV0400B-DATA2          PIC  X(10)   VALUE SPACE.
           05  STV0400B-IN             PIC  X(06)   VALUE SPACE.
           05  STV0400B-OUT            PIC  X(06)   VALUE SPACE.

      *
      *    format as a standard CHNGFILE parm entry
      *
      *    ...+....1....+....2....
      *                                   1         2         3
      *    TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+...
      *
       01  PARM01-RECORD.
           05  PARM01-COMMENT          PIC  X.
           05  PARM01-TYPE             PIC  X.
           05  PARM01-INCLUDE-CNT      PIC  XX.
           05  PARM01-POINT-12.
               10  PARM01-POINT1       PIC  X.
               10  PARM01-POINT2       PIC  X.
           05  PARM01-FLAG             PIC  X.
           05  PARM01-POS              PIC  X(04).
           05  PARM01-MAX-POS          PIC  X(04).
           05  PARM01-PULL-PUT         PIC  X.
           05  PARM01-ADJUST           PIC  X.
           05  PARM01-LEN              PIC  X(04).
           05  FILLER                  PIC  XX.
           05  PARM01-DATA             PIC  X(44).
           05  PARM01-FILL             PIC  X(05).
           05  PARM01-NO-USE           PIC  X(08).

       01  WS-END.
           05  FILLER                  PIC  X(16)    VALUE
               '  CHNGCALL END  '.

       LINKAGE SECTION.

       01  PARM-FIELD.
           05  LS-FILE-LEN             PIC  X(04).
           05  LS-IGNORE-ERR-SW        PIC  X.
           05  LS-SUPPRESS-DISPLAY     PIC  X.
           05  LS-RETURN-CODE          PIC  9(05).
           05  LS-PARM-RCD1            PIC  X(80).
           05  LS-PARM-RCD2            PIC  X(80).
           05  LS-DATA                 PIC  X(10000).

      /

       PROCEDURE DIVISION USING PARM-FIELD.

       0100-PROGRAM-ENTRY.

           INITIALIZE WS-WORK-FIELDS.
           INITIALIZE WS-LARGE-FIELDS.
           INITIALIZE WS-COND-FIELDS.
           INITIALIZE WS-SUBSCRIPTS.
           INITIALIZE WS-COUNT-FIELDS.
           INITIALIZE WS-SWITCHES.
           INITIALIZE WS-PARM-TABLE.
           MOVE SPACE                         TO WS-STV0400B-FIELDS.
           CALL 'STV0400B' USING WS-STV0400B-FIELDS.
           MOVE STV0400B-CYMD                 TO WS-1-CYMD.

           IF LS-FILE-LEN NUMERIC
               MOVE LS-FILE-LEN               TO WS-FILE-LEN
               MOVE LS-IGNORE-ERR-SW          TO WS-IGNORE-ERR-SW
           ELSE
               DISPLAY '**** CHNGCALL file length not specified'
               MOVE +0100                     TO WS-RETURN-CODE.
           IF WS-RETURN-CODE = ZERO
               MOVE 'X'                       TO WS-EDIT-S-SW
               PERFORM 0400-LOAD-LINKAGE THRU
                       0400-LOAD-LINKAGE-EXIT.
           IF WS-RETURN-CODE = ZERO
               MOVE ZERO                      TO WS-READ-RCD-CNT
               MOVE SPACE                     TO WS-DIFF-SW
               PERFORM 0700-READ-CHANGED
                   UNTIL END-OF-CHANGED.

           IF WS-IGNORE-ERR-SW = 'Y'
             IF LS-SUPPRESS-DISPLAY = SPACE
               DISPLAY '**** Ignore date convert error switch = y'.
           IF LS-SUPPRESS-DISPLAY = SPACE
               DISPLAY '**** File length specified ' WS-FILE-LEN
               DISPLAY '**** Change records read   ' WS-READ-RCD-CNT
               DISPLAY '**** PARM records accepted ' WS-PARM01-MAX
               DISPLAY '**** Records updated       ' WS-REWRITE-RCD-CNT
               DISPLAY '**** CHNGCALL EOJ encountered '.

           IF WS-RETURN-CODE = ZERO
               IF WS-COND-CODE-SW = 'Y'
                 IF LS-SUPPRESS-DISPLAY = SPACE
                     DISPLAY '**** CHNGCALL cond code ' WS-SET-CODE
                         ' requested by user'
                     MOVE WS-SET-CODE         TO LS-RETURN-CODE
                 ELSE
                     MOVE WS-SET-CODE         TO LS-RETURN-CODE
               ELSE
                   MOVE WS-DEFAULT-CODE       TO LS-RETURN-CODE
           ELSE
               DISPLAY '**** CHNGCALL cond code ' WS-RETURN-CODE
                       ' sent by program'
               MOVE WS-RETURN-CODE            TO LS-RETURN-CODE.

           GOBACK.

      ****************************************
      *    LOAD A WS TABLE WITH UP TO 80 RECORDS FROM PARM 01
      *    (UP TO 40 CHANGES)
      ****************************************
       0400-LOAD-LINKAGE.
           IF WS-READ-RCD-CNT = 1
               IF PARM01-FLAG = SPACE OR 'N' OR 'S'
                   MOVE LS-PARM-RCD2          TO PARM01-RECORD
               ELSE
                   MOVE WS-SUB1               TO WS-PARM01-MAX
                   GO TO 0400-LOAD-LINKAGE-EXIT
           ELSE
           IF WS-READ-RCD-CNT > 1
               MOVE WS-SUB1                   TO WS-PARM01-MAX
               GO TO 0400-LOAD-LINKAGE-EXIT
           ELSE
               MOVE LS-PARM-RCD1              TO PARM01-RECORD.

           ADD 1                              TO WS-READ-RCD-CNT.
           IF PARM01-COMMENT = '*'
               GO TO 0400-LOAD-LINKAGE.
           IF WS-SUB1 > 79
               GO TO 0400-LOAD-LINKAGE.
           MOVE ZERO                          TO WS-F-POS WS-LEN1
                                                 WS-F-MPOS.
      ****************************************
      *    EDIT PARM ENTRIES
      ****************************************
           IF PARM01-INCLUDE-CNT = SPACE
               MOVE '00'                      TO PARM01-INCLUDE-CNT
           ELSE
           IF PARM01-INCLUDE-CNT NOT NUMERIC
               DISPLAY '**** Include count not numeric'
               DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT
               MOVE +0400                     TO WS-RETURN-CODE
               GO TO 0400-LOAD-LINKAGE.
           IF PARM01-POS NUMERIC
               MOVE PARM01-POS                TO WS-F-POS.
           IF PARM01-MAX-POS NUMERIC
               MOVE PARM01-MAX-POS            TO WS-F-MPOS.
           IF PARM01-LEN NUMERIC
               MOVE PARM01-LEN                TO WS-LEN1
           ELSE
           IF PARM01-DATA = SPACE OR LOW-VALUE
               DISPLAY '**** Length required if data = spaces'
               DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT
               MOVE +0401                     TO WS-RETURN-CODE
               GO TO 0400-LOAD-LINKAGE
           ELSE
           IF PARM01-LEN = 'CCCC'
                PERFORM 0600-CALC-PARM-LEN
                   VARYING WS-LEN2 FROM 44 BY -1
                   UNTIL WS-LEN2 < 1
           ELSE
               DISPLAY '**** Parm length not numeric'
               DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT
               MOVE +0402                     TO WS-RETURN-CODE
               GO TO 0400-LOAD-LINKAGE.

           IF WS-F-POS > WS-FILE-LEN
               DISPLAY '**** Parm position > file length'
               DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT
               MOVE +0403                     TO WS-RETURN-CODE
               GO TO 0400-LOAD-LINKAGE.
           IF WS-F-MPOS > WS-FILE-LEN
               DISPLAY '**** Max position > file length'
               DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT
               MOVE +0404                     TO WS-RETURN-CODE
               GO TO 0400-LOAD-LINKAGE
           ELSE
           IF WS-F-MPOS = ZERO
               MOVE WS-FILE-LEN               TO WS-F-MPOS.
           IF PARM01-TYPE = 'S'
               IF PARM01-PULL-PUT = 'P'
                   DISPLAY '**** S not allowed with P'
                   DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT
                   MOVE +0405                 TO WS-RETURN-CODE
                   GO TO 0400-LOAD-LINKAGE.
           IF PARM01-TYPE = 'R'
               IF PARM01-POINT-12 = SPACE
                   AND WS-F-POS < 1
                   DISPLAY '**** R with no pointers: pos > 0 req'
                   DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT
                   MOVE +0406                 TO WS-RETURN-CODE
               ELSE
               IF PARM01-FLAG = '+' OR '-'
                   PERFORM 0450-EDIT-PARM
                   IF WS-DIFF-SW > SPACE
                       PERFORM 0480-DISPLAY-POINTER-ERR.
           IF PARM01-TYPE = 'A'
               IF WS-FILE-LEN = 80
                   MOVE WS-FILE-LEN           TO WS-LEN1
               ELSE
                   DISPLAY '** A : requires lrecl of 80 '
                   MOVE +0407                 TO WS-RETURN-CODE
                   GO TO 0400-LOAD-LINKAGE.
           IF WS-LEN1 > WS-FILE-LEN
               OR WS-LEN1 < 1
               DISPLAY '**** Parm length < 1 or > file length'
               DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT
               MOVE +0408                     TO WS-RETURN-CODE
               GO TO 0400-LOAD-LINKAGE.

           IF WS-EDIT-S-SW = SPACE OR 'N' OR 'S'
               IF PARM01-TYPE = WS-EDIT-S-SW
                   MOVE 'X'                   TO WS-EDIT-S-SW
                   IF PARM01-FLAG = 'L'
                       DISPLAY '**** Space/N/S line 2: L flag ignored'
                       DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT
                   ELSE
                       CONTINUE
               ELSE
                   MOVE 'X'                   TO WS-EDIT-S-SW
                   DISPLAY '**** Space/N/S should occur in pairs'
                   DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT
                   MOVE +0409                 TO WS-RETURN-CODE
                   GO TO 0400-LOAD-LINKAGE
           ELSE
           IF PARM01-TYPE = SPACE OR 'N' OR 'S'
               MOVE PARM01-TYPE               TO WS-EDIT-S-SW
               IF PARM01-ADJUST = '1' OR '2'
                   DISPLAY '**** Space/N/S 1: insert fnd with find/pull'
                   DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT
                   MOVE +0410                 TO WS-RETURN-CODE
               ELSE
               IF PARM01-FLAG = '+' OR '-'
                   PERFORM 0450-EDIT-PARM
                   IF WS-DIFF-SW > SPACE
                       PERFORM 0480-DISPLAY-POINTER-ERR
                   ELSE
                       CONTINUE
               ELSE
                   CONTINUE
           ELSE
               MOVE 'X'                       TO WS-EDIT-S-SW.

           IF PARM01-TYPE = 'A'
               PERFORM 0450-EDIT-PARM
               IF WS-DIFF-SW > SPACE
                   PERFORM 0480-DISPLAY-POINTER-ERR.

           COMPUTE WS-F-MAX = WS-LEN1 + WS-F-POS - 1.
           IF WS-F-MAX > WS-F-MPOS
               DISPLAY '**** Len + pos > max pos or file length'
               DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT
               MOVE +0411                     TO WS-RETURN-CODE
               GO TO 0400-LOAD-LINKAGE.
           ADD 1                              TO WS-SUB1.
           MOVE WS-LEN1                       TO WS-LEN(WS-SUB1).
           MOVE WS-F-POS                      TO WS-POS(WS-SUB1).
           MOVE WS-F-MPOS                     TO WS-MPOS(WS-SUB1).
           MOVE ZERO                          TO WS-CNT(WS-SUB1).
           MOVE ZERO                          TO WS-FPOS(WS-SUB1).
           MOVE PARM01-INCLUDE-CNT            TO WS-INCL(WS-SUB1).
           MOVE PARM01-POINT1                 TO WS-PNT1(WS-SUB1).
           MOVE PARM01-POINT2                 TO WS-PNT2(WS-SUB1).
           MOVE PARM01-FLAG                   TO WS-FLAG(WS-SUB1).
           MOVE PARM01-PULL-PUT               TO WS-PULL(WS-SUB1).
           MOVE PARM01-TYPE                   TO WS-TYPE(WS-SUB1).
           MOVE PARM01-ADJUST                 TO WS-ADJ(WS-SUB1).
           MOVE PARM01-COMMENT                TO WS-SUPPR(WS-SUB1).
           MOVE PARM01-DATA                   TO WS-DATA(WS-SUB1).

           GO TO 0400-LOAD-LINKAGE.

       0400-LOAD-LINKAGE-EXIT. EXIT.

       0450-EDIT-PARM.
           MOVE SPACE                         TO WS-DIFF-SW.
           IF PARM01-POINT-12 = SPACE
               MOVE '1'                       TO WS-DIFF-SW
           ELSE
               MOVE ZERO                      TO WS-SUB2 WS-SUB3
               PERFORM VARYING WS-SUB4 FROM 1 BY 1
                   UNTIL WS-SUB4 > WS-SUB1
                   IF WS-PNT1(WS-SUB4) = PARM01-POINT1
                       ADD 1                  TO WS-SUB2
                   END-IF
                   IF WS-PNT2(WS-SUB4) = PARM01-POINT2
                       ADD 1                  TO WS-SUB3
                   END-IF
               END-PERFORM
               IF PARM01-POINT1 > SPACE
                   AND WS-SUB2 = ZERO
                   MOVE '2'                   TO WS-DIFF-SW
               ELSE
               IF PARM01-POINT2 > SPACE
                   AND WS-SUB3 = ZERO
                   MOVE '3'                   TO WS-DIFF-SW.

       0480-DISPLAY-POINTER-ERR.
           IF WS-DIFF-SW = '1'
             IF PARM01-TYPE = 'A'
                 DISPLAY '**** A records require a pointer'
             ELSE
             IF PARM01-TYPE = 'R'
                 DISPLAY '**** R records with +/- require a pointer'
             ELSE
                 DISPLAY '**** Space/N/S line 1: +/- requires pointer'
           ELSE
           IF WS-DIFF-SW = '2'
             IF PARM01-TYPE = 'A'
                 DISPLAY '**** A record: no prev pointer 1 found'
             ELSE
             IF PARM01-TYPE = 'R'
                 DISPLAY '**** R record: no prev pointer 1 found'
             ELSE
                 DISPLAY '**** Space/N/S line 1: no prev pointer '
                         '1 found'
           ELSE
           IF PARM01-TYPE = 'A'
               DISPLAY '**** A record: no prev pointer 1 found'
           ELSE
           IF PARM01-TYPE = 'R'
               DISPLAY '**** R record: no prev pointer 1 found'
           ELSE
               DISPLAY '**** Space/N/S line 1: no prev pointer '
                       '1 found'.

           DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT.
           MOVE +0412                         TO WS-RETURN-CODE.

       0600-CALC-PARM-LEN.
           IF PARM01-DATA(WS-LEN2: 1) NOT = SPACE
               MOVE WS-LEN2                   TO WS-LEN1
               MOVE ZERO                      TO WS-LEN2.

      ****************************************
      ****************************************
      ****************************************
      ****************************************
      ****************************************

       0700-READ-CHANGED.
           ADD 1                              TO WS-READ-RCD-CNT.
           PERFORM 0800-NEXT-RECORD THRU
                   0800-NEXT-RECORD-EXIT.
           MOVE 'Y'                           TO WS-END-CHANGED-SW.

      ****************************************
      *    LOOP THROUGH THE PARM RECORDS (IE: 1, 3, 5, 7, ETC)
      *    CONTAINING THE SEARCH DATA.  REPLACE WITH DATA IN THE
      *    ALTERNATE PARM RECORDS (IE: 2, 4, 6, 8, ETC).
      *+**************************************
       0800-NEXT-RECORD.
           MOVE SPACE                         TO WS-REWRITE-SW.
           MOVE SPACE                         TO WS-WRITE-SW.
           MOVE WS-READ-RCD-CNT               TO WS-RCD-N.
           PERFORM 1000-PARM-LOOP THRU
                   1000-PARM-LOOP-EXIT
                   VARYING WS-SUB1 FROM 1 BY 1
                   UNTIL WS-SUB1 > WS-PARM01-MAX.

           PERFORM 0900-INCREMENT-COUNT
               VARYING WS-SUB1 FROM 1 BY 1
               UNTIL WS-SUB1 > WS-PARM01-MAX.

           IF WS-REWRITE-SW = 'Y'
               PERFORM 3000-REWRITE-CHANGED.
           IF WS-WRITE-SW = 'Y'
               MOVE WS-ADD-DATA               TO LS-DATA
               PERFORM 3000-REWRITE-CHANGED
               DISPLAY '**** Add:  ' WS-ADD-DATA.

       0800-NEXT-RECORD-EXIT. EXIT.

       0900-INCREMENT-COUNT.
           IF WS-FPOS(WS-SUB1) > ZERO
             IF WS-INCL(WS-SUB1) NOT = 99
               IF WS-CNT(WS-SUB1) < 99
                   ADD 1                      TO WS-CNT(WS-SUB1)
                   IF WS-CNT(WS-SUB1) > WS-INCL(WS-SUB1)
                       MOVE ZERO              TO WS-CNT(WS-SUB1)
                       MOVE ZERO              TO WS-FPOS(WS-SUB1).

      ****************************************
      *    IF STRING IS 5 BYTES, WS-F-MAX WILL BE (LRECL - STRING + 1).
      *    IF MAX POS IS SET, WS-F-MAX WILL REFLECT MAX SEARCH POS.
      ****************************************
       1000-PARM-LOOP.
           MOVE WS-TYPE(WS-SUB1)              TO WS-F-TYPE.
           MOVE WS-SUB1                       TO WS-SUB5.
           PERFORM 2700-LOAD-F-FIELDS.
           MOVE WS-F-POS                      TO WS-F-SAVE-POS.
           COMPUTE WS-F-MAX = WS-F-MPOS - WS-F-LEN + 1.
           ADD 1 TO WS-SUB1 GIVING WS-SUB2.

      ****************************************
      *    TYPES SPACE/S/N REQUIRE AND USE Parm rcd 2
      ****************************************
      *    TYPE = SPACE  FIND AND REPLACE DATA, GO TO NEW RCD
      *    TYPE = N      FIND AND REPLACE DATA, KEEP RCD, USE NEXT PARM
      *    TYPE = S      FIND AND REPLACE DATA, KEEP RCD, USE SAME PARM
      *    TYPE = F      SAVE STRING POS AND LENGTH
      *    TYPE = R      PLACE/REPLACE DATA
      *    TYPE = C      SET CONDITION CODE
      *    TYPE = D      SET DEFAULT CONDITION CODE
      *    TYPE = A      OVERLAY BLANK COMMENT LINE W/ COMMENT
      ****************************************
      *    WS-SUB1 = RECORD 1 DATA
      *    WS-SUB2 = RECORD 2 DATA
      *    WS-SUB3 = CALCULATED FIND OR REPLACE POSITION
      *    WS-SUB4 = GENERAL HOLD FIELD FOR LOOPS
      *              ALSO USED IN INSERT DELETE CALCULATIONS
      *    WS-SUB5 = HOLDS WS-SUB1 OR WS-SUB2 IN 2700-LOAD-X-FIELDS
      ****************************************
           PERFORM 1300-GET-PUT-POS THRU
                   1300-GET-PUT-POS-EXIT.
           IF WS-F-TYPE = 'F'
               PERFORM 1500-FIND THRU
                       1500-FIND-EXIT.

           IF WS-F-TYPE = 'S' OR 'N' OR SPACE
               IF WS-REPLACE-SW = 'Y'
                   PERFORM 1500-FIND THRU
                           1500-FIND-EXIT.

           IF WS-F-TYPE = 'R'
               IF WS-REPLACE-SW = 'Y'
                   PERFORM 1700-PUT-DATA THRU
                           1700-PUT-DATA-EXIT.

           IF WS-F-TYPE = 'C' OR 'D'
               IF WS-REPLACE-SW = 'Y'
                   PERFORM 2800-SET-RETURN-CODE THRU
                           2800-SET-RETURN-EXIT.

           IF WS-F-TYPE = 'A'
               IF WS-REPLACE-SW = 'Y'
                   PERFORM 3100-ADD-LINE THRU
                           3100-ADD-LINE-EXIT.

           IF WS-F-TYPE = SPACE OR 'N' OR 'S'
               ADD 1                          TO WS-SUB1.

       1000-PARM-LOOP-EXIT. EXIT.

      ****************************************
      *    IF THE PARM REFERS BACK TO A PREVIOUS PARM, SEE
      *    IF THE FIELD WAS FOUND AND SAVE THE POSITION WHERE IT
      *    WAS FOUND.
      ****************************************
       1300-GET-PUT-POS.
           MOVE SPACE                         TO WS-REPLACE-SW.
           IF WS-PNT1(WS-SUB1) NOT = SPACE
               PERFORM VARYING WS-SUB4 FROM 1 BY 1
                   UNTIL WS-SUB4 NOT < WS-SUB1
                   IF WS-PNT1(WS-SUB1) = WS-PNT1(WS-SUB4)
                       MOVE WS-TYPE(WS-SUB4)  TO WS-POINT-SW
                       IF POINTER-RCD
                         IF WS-FPOS(WS-SUB4) > ZERO
                             MOVE WS-FPOS(WS-SUB4) TO WS-F-SAVE-POS
                             MOVE 'Y'         TO WS-REPLACE-SW
                         ELSE
                             MOVE 'N'         TO WS-REPLACE-SW
                             MOVE 80          TO WS-SUB4
                         END-IF
                       END-IF
                   END-IF
               END-PERFORM.
           IF WS-PNT2(WS-SUB1) NOT = SPACE
             IF WS-REPLACE-SW NOT = 'Y'
                 PERFORM VARYING WS-SUB4 FROM 1 BY 1
                     UNTIL WS-SUB4 NOT < WS-SUB1
                     IF WS-PNT2(WS-SUB1) = WS-PNT2(WS-SUB4)
                         MOVE WS-TYPE(WS-SUB4)  TO WS-POINT-SW
                         IF POINTER-RCD
                           IF WS-FPOS(WS-SUB4) > ZERO
                               MOVE WS-FPOS(WS-SUB4) TO WS-F-SAVE-POS
                               MOVE 'Y'         TO WS-REPLACE-SW
                           ELSE
                               MOVE 'N'         TO WS-REPLACE-SW
                               MOVE 80          TO WS-SUB4
                           END-IF
                         END-IF
                     END-IF
                 END-PERFORM.
           IF WS-REPLACE-SW = SPACE
               MOVE 'Y'                       TO WS-REPLACE-SW.

       1300-GET-PUT-POS-EXIT. EXIT.

      ****************************************
      *    'P' MEANS PULL DATA FOR LATER PLACEMENT
      *    'L' MEANS START SEARCH AT POS > 1
      ****************************************
       1500-FIND.
           IF WS-F-PULL = 'P'
               PERFORM 1600-PULL-DATA THRU
                       1600-PULL-DATA-EXIT
           ELSE
           IF WS-F-FLAG = 'L'
               PERFORM 1800-FIND-STRING
                   VARYING WS-SUB3 FROM WS-F-POS BY 1
                   UNTIL WS-SUB3 > WS-F-MAX
           ELSE
           IF WS-F-POS > ZERO
               IF WS-F-FLAG = '+' OR '-'
                   MOVE WS-F-SAVE-POS         TO WS-SUB3
                   MOVE WS-SUB1               TO WS-SUB5
                   PERFORM 2700-LOAD-R-FIELDS
                   PERFORM 2000-PLUS-MINUS-POS
                   IF WS-CALC-POS-SW = 'N'
                       CONTINUE
                   ELSE
                       PERFORM 1800-FIND-STRING
               ELSE
                   MOVE WS-F-POS              TO WS-SUB3
                   PERFORM 1800-FIND-STRING
           ELSE
               PERFORM 1800-FIND-STRING
                   VARYING WS-SUB3 FROM 1 BY 1
                   UNTIL WS-SUB3 > WS-F-MAX.

       1500-FIND-EXIT. EXIT.

       1600-PULL-DATA.
           MOVE WS-SUB1                       TO WS-SUB5.
           PERFORM 2700-LOAD-R-FIELDS.
           IF WS-R-POS = ZERO
               OR WS-R-FLAG = '+' OR '-'
               MOVE WS-F-SAVE-POS             TO WS-SUB3
           ELSE
               MOVE WS-R-POS                  TO WS-SUB3.
           PERFORM 2000-PLUS-MINUS-POS.
           IF WS-CALC-POS-SW = 'N'
               GO TO 1600-PULL-DATA-EXIT.
           MOVE WS-SUB3                       TO WS-FPOS(WS-SUB1).
           MOVE LS-DATA(WS-SUB3: WS-R-LEN) TO WS-F-DATA.
           IF WS-R-ADJ = 'S'
               MOVE SPACE TO LS-DATA(WS-SUB3: WS-R-LEN)
           ELSE
           IF WS-R-ADJ = '3' OR '4'
               PERFORM 2400-POSITION-DELETE.
           IF WS-SUB3 > WS-FILE-LEN
               GO TO 1600-PULL-DATA-EXIT.
           MOVE WS-SUB2                       TO WS-SUB5.
           PERFORM 2700-LOAD-R-FIELDS.
           IF WS-R-PULL = 'P'
               MOVE WS-F-DATA                 TO WS-R-DATA.
           IF WS-R-POS = ZERO
               OR WS-R-FLAG = '+' OR '-'
               CONTINUE
           ELSE
               MOVE WS-R-POS                  TO WS-SUB3.
           PERFORM 1900-REPLACE THRU
                   1900-REPLACE-EXIT.

       1600-PULL-DATA-EXIT. EXIT.

      ****************************************
      *    R parm - place data
      *    IF  #+00000#XXXXXX# THEN CONVERT DATE OR TIME.
      ****************************************
       1700-PUT-DATA.
           MOVE WS-SUB1                       TO WS-SUB5.
           PERFORM 2700-LOAD-R-FIELDS.
           IF WS-R-POS = ZERO
               OR WS-R-FLAG = '+' OR '-'
               MOVE WS-F-SAVE-POS             TO WS-SUB3
           ELSE
               MOVE WS-R-POS                  TO WS-SUB3.
           MOVE 'Y'                           TO WS-CONVERT-SW.
           IF WS-F-DATA-1 = '#'
               AND WS-R-DATA(8: 1) = '#'
               PERFORM 2700-CONVERT-NUMERICS.
           IF WS-CONVERT-SW NOT = 'N'
               PERFORM 1900-REPLACE THRU
                       1900-REPLACE-EXIT.

       1700-PUT-DATA-EXIT. EXIT.

       1800-FIND-STRING.
           IF WS-F-DATA-1 = '#'
               MOVE SPACE                     TO WS-CONVERT-SW
               PERFORM 1800-TEST-MATCH
               IF WS-CONVERT-SW = 'Y'
                   PERFORM 1800-MATCH
               ELSE
               IF WS-CONVERT-SW = 'N'
                   CONTINUE
               ELSE
               IF WS-F-DATA(1: WS-F-LEN) =
                               LS-DATA(WS-SUB3: WS-F-LEN)
                   PERFORM 1800-MATCH
               ELSE
                   CONTINUE
           ELSE
           IF WS-F-DATA(1: WS-F-LEN) =
                               LS-DATA(WS-SUB3: WS-F-LEN)
               PERFORM 1800-MATCH.

       1800-TEST-MATCH.
           EVALUATE WS-F-DATA
             WHEN '#CY#'
             WHEN '#CYDDD#'
             WHEN '#CYMD#'
             WHEN '#DDD#'
             WHEN '#HMM#'
             WHEN '#HMSM#'
             WHEN '#MD#'
             WHEN '#MDCY#'
             WHEN '#MDY#'
             WHEN '#NBR#'
             WHEN '#YDDD#'
             WHEN '#YMD#'
               IF LS-DATA(WS-SUB3: WS-F-LEN) NUMERIC
                   MOVE 'Y'                   TO WS-CONVERT-SW
               ELSE
                   MOVE 'N'                   TO WS-CONVERT-SW
               END-IF
             WHEN '#M/D/Y#'
             WHEN '#Y/M/D#'
               IF LS-DATA(WS-SUB3 + 2: 1) = '/'
                   AND LS-DATA(WS-SUB3 + 5: 1) = '/'
                   AND LS-DATA(WS-SUB3: 2) NUMERIC
                   AND LS-DATA(WS-SUB3 + 3: 2) NUMERIC
                   AND LS-DATA(WS-SUB3 + 6: 2) NUMERIC
                   MOVE 'Y'                   TO WS-CONVERT-SW
               ELSE
                   MOVE 'N'                   TO WS-CONVERT-SW
               END-IF
             WHEN '#M/D#'
               IF LS-DATA(WS-SUB3 + 2: 1) = '/'
                   AND LS-DATA(WS-SUB3: 2) NUMERIC
                   AND LS-DATA(WS-SUB3 + 3: 2) NUMERIC
                   MOVE 'Y'                   TO WS-CONVERT-SW
               ELSE
                   MOVE 'N'                   TO WS-CONVERT-SW
               END-IF
             WHEN '#M/D/CY#'
               IF LS-DATA(WS-SUB3 + 2: 1) = '/'
                   AND LS-DATA(WS-SUB3 + 5: 1) = '/'
                   AND LS-DATA(WS-SUB3: 2) NUMERIC
                   AND LS-DATA(WS-SUB3 + 3: 2) NUMERIC
                   AND LS-DATA(WS-SUB3 + 6: 4) NUMERIC
                   MOVE 'Y'                   TO WS-CONVERT-SW
               ELSE
                   MOVE 'N'                   TO WS-CONVERT-SW
               END-IF
             WHEN '#Y/DDD#'
               IF LS-DATA(WS-SUB3 + 2: 1) = '/'
                   AND LS-DATA(WS-SUB3: 2) NUMERIC
                   AND LS-DATA(WS-SUB3 + 3: 3) NUMERIC
                   MOVE 'Y'                   TO WS-CONVERT-SW
               ELSE
                   MOVE 'N'                   TO WS-CONVERT-SW
               END-IF
             WHEN '#CY/DDD#'
               IF LS-DATA(WS-SUB3 + 4: 1) = '/'
                   AND LS-DATA(WS-SUB3: 4) NUMERIC
                   AND LS-DATA(WS-SUB3 + 5: 3) NUMERIC
                   MOVE 'Y'                   TO WS-CONVERT-SW
               ELSE
                   MOVE 'N'                   TO WS-CONVERT-SW
               END-IF
             WHEN '#CY/M/D#'
               IF LS-DATA(WS-SUB3 + 4: 1) = '/'
                   AND LS-DATA(WS-SUB3 + 7: 1) = '/'
                   AND LS-DATA(WS-SUB3: 4) NUMERIC
                   AND LS-DATA(WS-SUB3 + 5: 2) NUMERIC
                   AND LS-DATA(WS-SUB3 + 8: 2) NUMERIC
                   MOVE 'Y'                   TO WS-CONVERT-SW
               ELSE
                   MOVE 'N'                   TO WS-CONVERT-SW
               END-IF
             WHEN '#H:M:SM#'
               IF LS-DATA(WS-SUB3 + 2: 1) = ':'
                   AND LS-DATA(WS-SUB3 + 5: 1) = ':'
                   AND LS-DATA(WS-SUB3: 2) NUMERIC
                   AND LS-DATA(WS-SUB3 + 3: 2) NUMERIC
                   AND LS-DATA(WS-SUB3 + 6: 2) NUMERIC
                   MOVE 'Y'                   TO WS-CONVERT-SW
               ELSE
                   MOVE 'N'                   TO WS-CONVERT-SW
               END-IF
             WHEN '#H:MM#'
               IF LS-DATA(WS-SUB3 + 2: 1) = ':'
                   AND LS-DATA(WS-SUB3: 2) NUMERIC
                   AND LS-DATA(WS-SUB3 + 3: 2) NUMERIC
                   MOVE 'Y'                   TO WS-CONVERT-SW
               ELSE
                   MOVE 'N'                   TO WS-CONVERT-SW
               END-IF
             WHEN '#HMP#'
               IF LS-DATA(WS-SUB3: 4) NUMERIC
                   AND LS-DATA(WS-SUB3 + 4: 2) = 'AM' OR 'PM'
                                                   OR 'am' OR 'pm'
                   MOVE 'Y'                   TO WS-CONVERT-SW
               ELSE
                   MOVE 'N'                   TO WS-CONVERT-SW
               END-IF
             WHEN '#H:M P#'
               IF LS-DATA(WS-SUB3 + 2: 1) = ':'
                   AND LS-DATA(WS-SUB3 + 5: 1) = ' '
                   AND LS-DATA(WS-SUB3: 2) NUMERIC
                   AND LS-DATA(WS-SUB3 + 3: 2) NUMERIC
                   AND LS-DATA(WS-SUB3 + 6: 2) = 'AM' OR 'PM'
                                                   OR 'am' OR 'pm'
                   MOVE 'Y'                   TO WS-CONVERT-SW
               ELSE
                   MOVE 'N'                   TO WS-CONVERT-SW
               END-IF
             WHEN '#MDY4#'
             WHEN '#YMD4#'
                 MOVE 'Y'                     TO WS-CONVERT-SW
             WHEN OTHER
                 CONTINUE
           END-EVALUATE.

       1800-MATCH.
           MOVE ZERO                          TO WS-CNT(WS-SUB1).
           MOVE WS-SUB3                       TO WS-FPOS(WS-SUB1).
           IF WS-TYPE(WS-SUB1) = 'F'
               MOVE WS-FILE-LEN               TO WS-SUB3
           ELSE
               MOVE WS-SUB2                   TO WS-SUB5
               PERFORM 2700-LOAD-R-FIELDS
               PERFORM 2700-CONVERT-NUMERICS
               IF WS-CONVERT-SW NOT = 'N'
                   PERFORM 1900-REPLACE THRU
                           1900-REPLACE-EXIT.

       1900-REPLACE.
           MOVE SPACE                         TO WS-F-HOLD-DATA
                                                 WS-R-HOLD-DATA
                                                 WS-PRE-DATA.
           PERFORM 2000-PLUS-MINUS-POS.
           IF WS-CALC-POS-SW = 'N'
               GO TO 1900-REPLACE-EXIT.
      ****************************************
      *    LOAD REPLACE DATA POINTERS
      ****************************************
           COMPUTE WS-R-MAX = WS-R-LEN + WS-SUB3 - 1.
           IF WS-R-MAX > WS-R-MPOS
               DISPLAY '**** Skipping: replacement length error'
               DISPLAY '**** Position:  RCD ' WS-RCD-N
                       '  POS ' WS-SUB3 '  LEN ' WS-R-LEN
               DISPLAY '**** Data: ' WS-R-DATA(1: 44)
               MOVE WS-FILE-LEN               TO WS-SUB3
               GO TO 1900-REPLACE-EXIT.

      ****************************************
      *    '1' MEANS THAT REPLACE DATA IS BEING INSERTED
      *    '2' MEANS THAT REPLACE DATA IS BEING INSERTED AND ADJUSTED
      *    '3' MEANS THAT REPLACE DATA IS BEING DELETED
      *    '4' MEANS THAT REPLACE DATA IS BEING DELETED AND ADJUSTED
      *    'S' MEANS THAT REPLACE DATA IS SPACES
      ****************************************
           IF WS-R-ADJ = '1' OR '2'
               IF WS-R-POS > ZERO
                   PERFORM 2300-POSITION-INSERT
                   GO TO 1900-REPLACE-EXIT
               ELSE
               IF (WS-F-LEN NOT = WS-R-LEN)
                   PERFORM 2100-CALC-INSERT
                   GO TO 1900-REPLACE-EXIT.
           IF WS-R-ADJ = '3' OR '4'
               PERFORM 2400-POSITION-DELETE
               IF WS-SUB3 > WS-FILE-LEN
                   GO TO 1900-REPLACE-EXIT
               ELSE
                   PERFORM 2700-POST-UPDATE
                   GO TO 1900-REPLACE-EXIT.

           IF WS-R-ADJ = 'S'
               MOVE LS-DATA(WS-SUB3: WS-R-LEN) TO WS-PRE-DATA
               MOVE SPACE    TO LS-DATA(WS-SUB3: WS-R-LEN)
           ELSE
               MOVE LS-DATA(WS-SUB3: WS-R-LEN) TO WS-PRE-DATA
               MOVE WS-R-DATA(1: WS-R-LEN)
                             TO LS-DATA(WS-SUB3: WS-R-LEN).
           PERFORM 2700-POST-UPDATE.

       1900-REPLACE-EXIT. EXIT.

      ****************************************
      *    DETERMINE FIND/REPLACEMENT LOCATION
      ****************************************
       2000-PLUS-MINUS-POS.
           MOVE 'Y'                           TO WS-CALC-POS-SW.
           MOVE WS-SUB3                       TO WS-SUB4 WS-FIND-POS.
           IF WS-R-FLAG = '-'
               COMPUTE WS-SUB4 = WS-SUB4 - WS-R-POS
           ELSE
           IF WS-R-FLAG = '+'
               COMPUTE WS-SUB4 = WS-SUB4 + WS-R-POS
           ELSE
           IF WS-R-POS > ZERO
               MOVE WS-R-POS                  TO WS-SUB4.
           IF WS-SUB4 < 1
               OR WS-SUB4 > WS-FILE-LEN
               DISPLAY '**** Skipping: find or replacement length error'
               DISPLAY '**** Position:  RCD ' WS-RCD-N
                       '  POS ' WS-SUB4 '  LEN ' WS-R-LEN
               DISPLAY '**** Data: ' WS-R-DATA(1: 44)
               MOVE WS-FILE-LEN               TO WS-SUB3
               MOVE 'N'                       TO WS-CALC-POS-SW
           ELSE
               MOVE WS-SUB4                   TO WS-SUB3.

      ****************************************
      *    IF REPLACEMENT LENGTH GREATER THAN FIELD:
      *        LOGIC SIMILAR TO POSITION-INSERT PARAGRAPH
      *    ELSE
      *        DELETE THE DIFFERENCE IN THEIR LENGTHS (IE: ADJUST
      *        DATA TO THE LEFT WS-LEN-DIFF AMOUNT)
      *        IF DATA ADJUSTMENT REQUESTED, INSERT SPACES TO THE
      *        RIGHT TO KEEP RIGHT-MOST DATA POSITIONALLY STABLE
      ****************************************
       2100-CALC-INSERT.
           COMPUTE WS-F-AHEAD-POS = WS-SUB3 + WS-F-LEN.
           COMPUTE WS-R-AHEAD-POS = WS-SUB3 + WS-R-LEN.
           IF WS-F-LEN > WS-R-LEN
               COMPUTE WS-LEN-DIFF = WS-F-LEN - WS-R-LEN
               MOVE 'I'                       TO WS-DIFF-SW
           ELSE
               COMPUTE WS-LEN-DIFF = WS-R-LEN - WS-F-LEN
               MOVE 'D'                       TO WS-DIFF-SW.
           MOVE LS-DATA                       TO WS-F-HOLD-DATA
                                                 WS-R-HOLD-DATA.
           MOVE SPACE                         TO WS-SPACE-SW.
           IF WS-DIFF-SW = 'I'
               MOVE WS-R-HOLD-DATA(WS-R-AHEAD-POS: ) TO WS-PRE-DATA
               MOVE WS-F-HOLD-DATA(WS-F-AHEAD-POS: ) TO
                         WS-R-HOLD-DATA(WS-R-AHEAD-POS: )
               MOVE WS-R-HOLD-DATA            TO WS-F-HOLD-DATA
               IF WS-R-ADJ = '2'
                 PERFORM 2500-FIND-SPACE-INS
                     VARYING WS-SUB4 FROM WS-R-AHEAD-POS BY 1
                     UNTIL WS-SUB4 > WS-R-MPOS
                 IF WS-SPACE-SW = SPACE
                     DISPLAY '**** Skipping: unable to insert spaces'
                     DISPLAY '**** Record: ' WS-READ-RCD-CNT
                         '  POS ' WS-SUB3 '  LEN ' WS-R-LEN
                     DISPLAY '**** Data:   ' WS-R-DATA(1: 44)
                     MOVE WS-FILE-LEN         TO WS-SUB3
                 ELSE
                     MOVE WS-R-DATA(1: WS-R-LEN)
                               TO WS-F-HOLD-DATA(WS-SUB3: WS-R-LEN)
                     MOVE WS-F-HOLD-DATA      TO LS-DATA
                     PERFORM 2700-POST-UPDATE
               ELSE
                   MOVE WS-R-DATA(1: WS-R-LEN)
                             TO WS-F-HOLD-DATA(WS-SUB3: WS-R-LEN)
                   MOVE WS-F-HOLD-DATA        TO LS-DATA
                   PERFORM 2700-POST-UPDATE
           ELSE
               COMPUTE WS-R-MAX = WS-R-MPOS - WS-LEN-DIFF
               IF WS-R-ADJ = '2'
                 PERFORM 2500-FIND-SPACE-DEL
                     VARYING WS-SUB4 FROM WS-R-AHEAD-POS BY 1
                     UNTIL WS-SUB4 > WS-R-MAX
                 IF WS-SPACE-SW = SPACE
                     DISPLAY '**** Skipping: unable to find del spaces'
                     DISPLAY '**** Record: ' WS-READ-RCD-CNT
                         '  POS ' WS-SUB3 '  LEN ' WS-R-LEN
                     DISPLAY '**** Data:   ' WS-R-DATA(1: 44)
                     MOVE WS-FILE-LEN         TO WS-SUB3
                 ELSE
                     MOVE WS-F-HOLD-DATA(WS-SUB3: ) TO WS-PRE-DATA
                     MOVE WS-R-HOLD-DATA(WS-F-AHEAD-POS: ) TO
                           WS-F-HOLD-DATA(WS-R-AHEAD-POS: )
                     MOVE WS-R-DATA(1: WS-R-LEN)
                             TO WS-F-HOLD-DATA(WS-SUB3: WS-R-LEN)
                     MOVE WS-F-HOLD-DATA      TO LS-DATA
                     PERFORM 2700-POST-UPDATE
               ELSE
                   MOVE WS-F-HOLD-DATA(WS-SUB3: ) TO WS-PRE-DATA
                   MOVE WS-R-HOLD-DATA(WS-F-AHEAD-POS: ) TO
                         WS-F-HOLD-DATA(WS-R-AHEAD-POS: )
                   MOVE WS-R-DATA(1: WS-R-LEN)
                           TO WS-F-HOLD-DATA(WS-SUB3: WS-R-LEN)
                   MOVE WS-F-HOLD-DATA        TO LS-DATA
                   PERFORM 2700-POST-UPDATE.

      ****************************************
      *    IF ADJUSTMENT REQUESTED, SEARCH FOR SPACES OCCURRING
      *    AFTER FOUND FIELD.  IF FOUND, DELETE THE SPACES.
      *
      *    MOVE DATA FROM FOUND FIELD LOCATION TO THE RIGHT.
      *    INSERT FIELD.
      ****************************************
       2300-POSITION-INSERT.
           COMPUTE WS-R-AHEAD-POS = WS-SUB3 + WS-R-LEN.
           MOVE 'D'                           TO WS-DIFF-SW.
           MOVE LS-DATA                       TO WS-F-HOLD-DATA
                                                 WS-R-HOLD-DATA.
           MOVE SPACE                         TO WS-SPACE-SW.
           MOVE WS-R-LEN                      TO WS-LEN-DIFF.
           COMPUTE WS-R-MAX = WS-R-MPOS - WS-R-LEN.
           IF WS-R-ADJ = '2'
               PERFORM 2500-FIND-SPACE-DEL
                   VARYING WS-SUB4 FROM WS-R-AHEAD-POS BY 1
                   UNTIL WS-SUB4 > WS-R-MAX
               IF WS-SPACE-SW = SPACE
                   DISPLAY '**** Skipping: unable to find del spaces'
                   DISPLAY '**** Record: ' WS-READ-RCD-CNT
                       '  POS ' WS-SUB3 '  LEN ' WS-R-LEN
                   DISPLAY '**** Data:   ' WS-R-DATA(1: 44)
                   MOVE WS-FILE-LEN           TO WS-SUB3
               ELSE
                   MOVE WS-F-HOLD-DATA(WS-SUB3: ) TO WS-PRE-DATA
                   MOVE WS-R-HOLD-DATA(WS-SUB3: ) TO
                         WS-F-HOLD-DATA(WS-R-AHEAD-POS: )
                   MOVE WS-R-DATA(1: WS-R-LEN)
                           TO WS-F-HOLD-DATA(WS-SUB3: WS-R-LEN)
                   MOVE WS-F-HOLD-DATA        TO LS-DATA
                   PERFORM 2700-POST-UPDATE
           ELSE
               MOVE WS-F-HOLD-DATA(WS-SUB3: ) TO WS-PRE-DATA
               MOVE WS-R-HOLD-DATA(WS-SUB3: ) TO
                     WS-F-HOLD-DATA(WS-R-AHEAD-POS: )
               MOVE WS-R-DATA(1: WS-R-LEN)
                       TO WS-F-HOLD-DATA(WS-SUB3: WS-R-LEN)
               MOVE WS-F-HOLD-DATA            TO LS-DATA
               PERFORM 2700-POST-UPDATE.

      ****************************************
      *    MOVE ALL DATA FROM (FOUND POS + LEN) TO FOUND POS,
      *    THEREBY DELETING THE FIELD.  OPTIONALLY INSERT SPACES
      *    TO RE-ADJUST DATA.
      ****************************************
       2400-POSITION-DELETE.
           COMPUTE WS-R-AHEAD-POS = WS-SUB3 + WS-R-LEN.
           MOVE 'I'                           TO WS-DIFF-SW.
           MOVE LS-DATA                       TO WS-F-HOLD-DATA
                                                 WS-R-HOLD-DATA.
           MOVE SPACE                         TO WS-SPACE-SW.
           MOVE WS-R-LEN                      TO WS-LEN-DIFF.
           COMPUTE WS-R-MAX = WS-R-MPOS - WS-R-LEN.
           MOVE WS-F-HOLD-DATA(WS-R-AHEAD-POS: ) TO
                         WS-R-HOLD-DATA(WS-SUB3: ).
           MOVE WS-R-HOLD-DATA                TO WS-F-HOLD-DATA.
           IF WS-R-ADJ = '4'
               PERFORM 2500-FIND-SPACE-INS
                   VARYING WS-SUB4 FROM WS-R-AHEAD-POS BY 1
                   UNTIL WS-SUB4 > WS-R-MPOS
               IF WS-SPACE-SW = SPACE
                   DISPLAY '**** Skipping: unable to insert spaces'
                   DISPLAY '**** Record: ' WS-READ-RCD-CNT
                       '  POS ' WS-SUB3 '  LEN ' WS-R-LEN
                   DISPLAY '**** Data:   ' WS-R-DATA(1: 44)
                   MOVE WS-FILE-LEN           TO WS-SUB3
               ELSE
                   MOVE WS-F-HOLD-DATA        TO LS-DATA
           ELSE
               MOVE WS-F-HOLD-DATA            TO LS-DATA.

       2500-FIND-SPACE-INS.
           IF WS-R-HOLD-DATA(WS-SUB4: 1) = SPACE
               MOVE 'Y'                       TO WS-SPACE-SW
               COMPUTE WS-AHEAD-LOC = WS-SUB4 + WS-LEN-DIFF
               MOVE WS-R-HOLD-DATA(WS-SUB4: ) TO
                          WS-F-HOLD-DATA(WS-AHEAD-LOC: )
               MOVE SPACE TO WS-F-HOLD-DATA(WS-SUB4: WS-LEN-DIFF)
               MOVE WS-FILE-LEN               TO WS-SUB4.

       2500-FIND-SPACE-DEL.
           IF WS-R-HOLD-DATA(WS-SUB4: WS-LEN-DIFF) = SPACE
               MOVE 'Y'                       TO WS-SPACE-SW
               COMPUTE WS-AHEAD-LOC = WS-SUB4 + WS-LEN-DIFF
               MOVE WS-F-HOLD-DATA(WS-AHEAD-LOC: ) TO
                          WS-R-HOLD-DATA(WS-SUB4: )
               MOVE WS-FILE-LEN               TO WS-SUB4.

      ****************************************
      *    HOLDING FIELDS
      ****************************************
       2700-LOAD-F-FIELDS.
           MOVE WS-LEN(WS-SUB5)               TO WS-F-LEN.
           MOVE WS-POS(WS-SUB5)               TO WS-F-POS.
           MOVE WS-MPOS(WS-SUB5)              TO WS-F-MPOS.
           MOVE WS-FLAG(WS-SUB5)              TO WS-F-FLAG.
           MOVE WS-PULL(WS-SUB5)              TO WS-F-PULL.
           MOVE WS-DATA(WS-SUB5)              TO WS-F-DATA.

      ****************************************
      *    HOLDING FIELDS, SOMETIMES CONTAINING LINE 1 DATA,
      *    OTHER TIMES CONTAINING LINE 2 DATA.
      ****************************************
       2700-LOAD-R-FIELDS.
           MOVE WS-LEN(WS-SUB5)               TO WS-R-LEN.
           MOVE WS-POS(WS-SUB5)               TO WS-R-POS.
           MOVE WS-MPOS(WS-SUB5)              TO WS-R-MPOS.
           MOVE WS-FLAG(WS-SUB5)              TO WS-R-FLAG.
           MOVE WS-PULL(WS-SUB5)              TO WS-R-PULL.
           MOVE WS-ADJ(WS-SUB5)               TO WS-R-ADJ.
           MOVE WS-DATA(WS-SUB5)              TO WS-R-DATA.

      ****************************************
      *    IF #NBR#, SEARCH WAS FOR A NUMERIC STRING.
      *    ADD OR SUBTRACT TO THAT AMOUNT VIA THE #-00000# PARAMETER.
      *
      *    IF #XXXXXX#, SEARCH WAS FOR A DATE/TIME STRING.
      *    ADD OR SUBTRACT THE NUMBER OF DAYS/MINUTES REQUESTED,
      *    THEN CONVERT TO THE SAME OR A DIFFERENT FORMAT.
      ****************************************
       2700-CONVERT-NUMERICS.
           IF WS-CONVERT-SW = 'Y'
               IF WS-R-DATA(8: 5) = '#NBR#'
                 IF WS-R-DATA(2: 1) = '+' OR '-' OR '/' OR '*'
                     AND WS-R-DATA(3: 5) NUMERIC
                     PERFORM 2700-DO-MATH
                 ELSE
                     CONTINUE
               ELSE
               IF WS-R-DATA(8: 8) = '#HMSM#' OR '#H:M:SM#' OR '#HMM#'
                                 OR '#HMP#'  OR '#H:M P# ' OR '#H:MM#'
                                 OR '#HMSP#' OR '#H:M:SP#' OR '#H:MP#'
                   IF WS-R-DATA(2: 1) = 'I' OR 'D'
                       AND WS-R-DATA(3: 5) NUMERIC
                       MOVE 'HMSM  '          TO WS-HOLD-IN
                       PERFORM 2700-CONVERT THRU
                               2700-CONVERT-EXIT
                   ELSE
                       CONTINUE
               ELSE
               IF WS-R-DATA(2: 1) = '+' OR '-'
                   AND WS-R-DATA(3: 5) NUMERIC
                   MOVE 'CYMD  '          TO WS-HOLD-IN
                   PERFORM 2700-CONVERT THRU
                           2700-CONVERT-EXIT.

       2700-DO-MATH.
           MOVE ZERO                 TO WS-MATH-VALUE WS-MATH-INC.
           MOVE LS-DATA(WS-SUB3: WS-F-LEN) TO WS-MATH-VALUE.
           MOVE WS-R-DATA(3: 5)               TO WS-MATH-INC.
           IF WS-R-DATA(2: 1) = '+'
               ADD WS-MATH-INC TO WS-MATH-VALUE
           ELSE
           IF WS-R-DATA(2: 1) = '-'
               SUBTRACT WS-MATH-INC FROM WS-MATH-VALUE
           ELSE
           IF WS-R-DATA(2: 1) = '*'
               COMPUTE WS-MATH-VALUE = WS-MATH-INC * WS-MATH-VALUE
           ELSE
           IF WS-R-DATA(2: 1) = '/'
               COMPUTE WS-MATH-VALUE = WS-MATH-VALUE / WS-MATH-INC.
           COMPUTE WS-MATH-INC = 12 - WS-R-LEN + 1.
           MOVE WS-MATH-VALUE(WS-MATH-INC: )  TO WS-R-DATA.

      ****************************************
      *    CONVERT +- NUMBER OF DAYS, OR INCREMENT/DECREMENT NUMBER
      *    OF MINUTES, THEN PLACE IN DESIRED FORMAT
      ****************************************
       2700-CONVERT.
           MOVE SPACE                         TO WS-STV0400B-FIELDS.
           IF WS-F-TYPE = 'R'
               CONTINUE
           ELSE
           IF WS-F-DATA(2: 4) = 'MDY4' OR 'YMD4'
               COMPUTE WS-ODO-POST = (WS-FILE-LEN - WS-SUB3) - 3
               COMPUTE WS-ODO-PRE = (WS-FILE-LEN - WS-ODO-POST) - 4
               MOVE LS-DATA                   TO WS-HOLD-PACKED
               MOVE WS-PACK-4                 TO WS-UNPACK-6
               IF WS-UNPACK-6 NOT NUMERIC
                   DISPLAY '**** Packed field not numeric'
                   DISPLAY '**** Record: ' WS-READ-RCD-CNT
                           '  POS ' WS-SUB3 '  LEN ' WS-R-LEN
                   DISPLAY '**** Data:   ' WS-PACK-4
                   MOVE 'N'                   TO WS-CONVERT-SW
                   GO TO 2700-CONVERT-EXIT
               ELSE
                   MOVE WS-UNPACK-6           TO STV0400B-DATA
                                                 WS-HOLD-DATE
                   IF WS-F-DATA(2: 4) = 'MDY4'
                       MOVE '#MDY# '          TO WS-F-DATA
                       MOVE 'MDY   '          TO STV0400B-IN
                   ELSE
                       MOVE '#YMD# '          TO WS-F-DATA
                       MOVE 'YMD   '          TO STV0400B-IN
           ELSE
               MOVE LS-DATA(WS-SUB3: WS-F-LEN) TO STV0400B-DATA
                                                       WS-HOLD-DATE
               MOVE WS-F-DATA(2: 6)           TO STV0400B-IN.

           MOVE WS-R-DATA(2: 6)               TO STV0400B-OUT.
           INSPECT STV0400B-IN REPLACING ALL '#' BY SPACE.
           CALL 'STV0400B' USING WS-STV0400B-FIELDS.
           IF STV0400B-ERROR = 'ERROR'
               DISPLAY '**** Skipping: unable to convert in data'
               DISPLAY '**** Record: ' WS-READ-RCD-CNT
                       '  POS ' WS-SUB3 '  LEN ' WS-R-LEN
               DISPLAY '**** Data:   ' WS-HOLD-DATE
               IF WS-IGNORE-ERR-SW = 'Y'
                   MOVE WS-HOLD-DATE          TO WS-R-DATA
               ELSE
                   MOVE 'N'                   TO WS-CONVERT-SW
           ELSE
               MOVE STV0400B-DATA             TO WS-HOLD-DATE
               MOVE WS-HOLD-IN                TO STV0400B-IN
               MOVE WS-R-DATA(9: 6)           TO STV0400B-OUT
               INSPECT STV0400B-OUT REPLACING ALL '#' BY SPACE
               CALL 'STV0400B' USING WS-STV0400B-FIELDS
               IF STV0400B-ERROR = 'ERROR'
                   DISPLAY '**** Skipping: unable to convert out data'
                   DISPLAY '**** Record: ' WS-READ-RCD-CNT
                           '  POS ' WS-SUB3 '  LEN ' WS-R-LEN
                   DISPLAY '**** Data:   ' WS-HOLD-DATE
                   IF WS-IGNORE-ERR-SW = 'Y'
                       MOVE WS-HOLD-DATE      TO WS-R-DATA
                   ELSE
                       MOVE 'N'               TO WS-CONVERT-SW
               ELSE
                   MOVE STV0400B-DATA         TO WS-R-DATA.

       2700-CONVERT-EXIT. EXIT.

       2700-POST-UPDATE.
           MOVE WS-SUB3                       TO WS-FPOS(WS-SUB5).
           MOVE 'Y'                           TO WS-REWRITE-SW.
           IF WS-SUPPR(WS-SUB1) NOT = 'A'
               DISPLAY '**** Position:  RCD ' WS-RCD-N
                         '  POS ' WS-SUB3 '  LEN ' WS-R-LEN.
           IF WS-SUPPR(WS-SUB1) = SPACE OR 'I'
               DISPLAY '**** Was : ' WS-PRE-DATA.
           IF WS-SUPPR(WS-SUB1) = SPACE OR 'W'
               DISPLAY '**** Is  : ' LS-DATA(WS-SUB3: 44).
           IF WS-SUPPR(WS-SUB1) NOT = 'A'
               IF WS-R-ADJ = '3' OR '4'
                   DISPLAY '**** Del : ' WS-F-DATA(1: 44)
               ELSE
               IF WS-R-ADJ = '1' OR '2'
                   DISPLAY '**** Ins : ' WS-R-DATA(1: 44)
               ELSE
                   DISPLAY '**** Data: ' WS-R-DATA(1: 44).
           IF WS-TYPE(WS-SUB1) = 'N' OR 'F' OR 'R'
               MOVE WS-FILE-LEN               TO WS-SUB3
           ELSE
           IF WS-TYPE(WS-SUB1) = 'S'
               MOVE WS-FIND-POS               TO WS-SUB3
           ELSE
               MOVE WS-FILE-LEN               TO WS-SUB3
               MOVE 80                        TO WS-SUB1.

       2800-SET-RETURN-CODE.
           MOVE WS-F-DATA                     TO WS-COND-DATA.
           IF WS-COND-DAY NUMERIC
             IF WS-COND-FLAG = 'W'
                 MOVE SPACE                   TO WS-STV0400B-FIELDS
                 MOVE WS-1-CYMD               TO STV0400B-CYMD
                 MOVE 'CYMD  '                TO STV0400B-IN
                 MOVE 'DAY   '                TO STV0400B-OUT
                 CALL 'STV0400B' USING WS-STV0400B-FIELDS
                 DISPLAY '**** STV0400B output: ' WS-STV0400B-FIELDS
                 IF STV0400B-ERROR = 'ERROR'
                     DISPLAY '**** STV0400B day calc error'
                     MOVE +2800               TO WS-RETURN-CODE
                 ELSE
                 MOVE STV0400B-DAY-NBR        TO WS-DAY-NBR
                 IF WS-DAY-NBR = WS-COND-DAY-N
                     DISPLAY '**** Day of week match '
                 ELSE
                     GO TO 2800-SET-RETURN-EXIT
             ELSE
             IF WS-COND-FLAG = 'M'
                 IF WS-COND-DAY = WS-1-CYMD-DD
                     DISPLAY '**** Day of month match: ' WS-1-CYMD
                 ELSE
                     GO TO 2800-SET-RETURN-EXIT.

           IF WS-COND-CODE NUMERIC
               MOVE WS-COND-CODE              TO WS-SUB4
               IF WS-SUB4 > 4095
                   DISPLAY '**** Requested return code > 4095'
                   MOVE +2800         TO WS-RETURN-CODE
               ELSE
               IF WS-F-TYPE = 'C'
                   MOVE WS-SUB4       TO WS-SET-CODE
                   MOVE 'Y'           TO WS-COND-CODE-SW
               ELSE
                   MOVE WS-SUB4       TO WS-DEFAULT-CODE.

       2800-SET-RETURN-EXIT. EXIT.

       3000-REWRITE-CHANGED.
           ADD 1                              TO WS-REWRITE-RCD-CNT.

       3100-ADD-LINE.
           IF LS-DATA(1: 25) = '//*                      '
                                 OR '//***********************'
                                 OR '//*----------------------'
               CONTINUE
           ELSE
               GO TO 3100-ADD-LINE-EXIT.
           MOVE WS-F-DATA                     TO WS-ADD-DATA.
           IF WS-F-DATA(15: 6) = 'YYMMDD'
               MOVE WS-1-CYMD-YMD             TO WS-ADD-DATA(15: 6).
           IF WS-F-DATA(44: 1) = '+'
               ADD 1 TO WS-SUB1 GIVING WS-SUB4
               IF WS-TYPE(WS-SUB4) = 'A'
                   MOVE WS-DATA(WS-SUB4)      TO WS-ADD-DATA(44: )
                   ADD 1                      TO WS-SUB1.
           MOVE 'Y'                           TO WS-WRITE-SW.

       3100-ADD-LINE-EXIT. EXIT.

      ************************************ END CHNGCALL
