
       TITLE '  XLT04660: zap report pages with zero totals '.
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    XLT04660.
      **********************************************************CX003B
      *@@@ C3 zap report pages with zero totals
      ****************************************************************
      *
      *  I am interested in knowing if/where these programs
      *  are in use.     Email:  jiannon@me.com
      *
      ****************************************************************
      * Date written: 12/06/2019
      * Author      : Jim Iannone
      *               skip printing report pages with zero totals
      *
      *   this program assumes carriage control characters exist
      *   in column 1.  loop through a printed report.
      *   for specified pages, check 'totals' field to see if totals
      *   on the report are zeros (or blanks).  if so, all pages
      *   related to the search criteria can be supressed/skipped,
      *   or just those pages with zero totals.
      *
      *   search criteria can be headers and values or just values:
      *     example:  search for pages containing 'REPORT-ID: XLT04100A'
      *               or for pages containing 'XLT04100A'
      *
      *   Program was written for 133 byte report files.
      *   Recompiling for different record length report file?
      *     along with changing '01' and 'FD' definitions, change
      *     WS-RECORD-MAX value to be one more than record length.
      *     column fields are defined as PIC 9(03) -
      *     if expanding beyond 999 bytes wide then column field
      *     lengths in program and parm will need expanding.
      *
      ****************************************************************
      * Date changed: mm/dd/yyyy username
      *               comments...
      ****************************************************************

       ENVIRONMENT DIVISION.

       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           C01 IS PAGE-TOP.

       INPUT-OUTPUT SECTION.
       FILE-CONTROL.

           SELECT REPORTI              ASSIGN TO REPORTI
                                       ORGANIZATION IS SEQUENTIAL
                                       ACCESS MODE IS SEQUENTIAL
                                       FILE STATUS IS WS-STAT.

           SELECT REPORTO              ASSIGN TO REPORTO
                                       ORGANIZATION IS SEQUENTIAL
                                       ACCESS MODE IS SEQUENTIAL
                                       FILE STATUS IS WS-STAT.

           SELECT REPORTD              ASSIGN TO REPORTD
                                       ORGANIZATION IS SEQUENTIAL
                                       ACCESS MODE IS SEQUENTIAL
                                       FILE STATUS IS WS-STAT.

           SELECT PARM01               ASSIGN TO PARM01
                                       ORGANIZATION IS SEQUENTIAL
                                       ACCESS MODE IS SEQUENTIAL
                                       FILE STATUS IS WS-STAT.

           SELECT SORT-REPORTI         ASSIGN TO S-SORTWK01.

       DATA DIVISION.
       FILE SECTION.

       FD  REPORTI
           RECORDING MODE F.
       01  REPORTI-RECORD.
           05  REPORTI-RCD             PIC  X(133).

       FD  REPORTO
           RECORDING MODE F.
       01  REPORTO-RECORD.
           05  REPORTO-RCD             PIC  X(133).

       FD  REPORTD
           RECORDING MODE F.
       01  REPORTD-RECORD.
           05  REPORTD-RCD             PIC  X(133).

      * - --- --- -------------------- -- --------------------
       FD  PARM01
           RECORDING MODE F.
       01  PARM01-RECORD.
           05  PARM01-DOCU             PIC  X.
           05  FILLER                  PIC  X.
           05  PARM01-TYPE             PIC  X.
           05  FILLER                  PIC  X.
           05  PARM01-GROUP            PIC  X.
           05  FILLER                  PIC  X.
           05  PARM01-LINE             PIC  XXX.
           05  FILLER                  PIC  X.
           05  PARM01-REST             PIC  X(62).
           05  PARM01-S-REST REDEFINES PARM01-REST.
               10  PARM01-S-COL        PIC  XXX.
               10  FILLER              PIC  X.
               10  PARM01-S-HDR        PIC  X(20).
               10  FILLER              PIC  X.
               10  PARM01-S-GAP        PIC  XX.
               10  FILLER              PIC  X.
               10  PARM01-S-VAL        PIC  X(20).
               10  FILLER              PIC  X(14).
           05  PARM01-T-REST REDEFINES PARM01-REST.
               10  PARM01-T-END        PIC  XXX.
               10  FILLER              PIC  X.
               10  PARM01-T-COL        PIC  XXX.
               10  FILLER              PIC  X.
               10  PARM01-TOTAL        PIC  X(20).
               10  FILLER              PIC  X.
               10  PARM01-T-LEN        PIC  XX.
               10  FILLER              PIC  X.
               10  PARM01-T-PGS        PIC  X.
               10  FILLER              PIC  X.
               10  PARM01-T-SUPP       PIC  X.
               10  FILLER              PIC  X(27).
           05  FILLER                  PIC  X(08).

       SD  SORT-REPORTI.
       01  SORT-RECORD.
           05  SR-GROUP                PIC  X.
           05  SR-FILL1                PIC  X.
           05  SR-FIRST-PAGE           PIC  9(07).
           05  SR-FILL2                PIC  X.
           05  SR-LAST-PAGE            PIC  9(07).
           05  SR-FILL3                PIC  X.
           05  SR-PAGE                 PIC  9(07).
           05  SR-FILL4                PIC  X.
           05  SR-ALL-LAST             PIC  X.
           05  SR-SUPP-I-G             PIC  X.

       WORKING-STORAGE SECTION.

       01  WS-START.
           05  FILLER                  PIC  X(32)    VALUE
               ' Working storage XLT04660 start '.

       01  WS-WORK-FIELDS.
           05  WS-STAT                 PIC  99       VALUE ZERO.
           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.
           05  WS-TALLY                PIC S9(05)    VALUE ZERO COMP.
           05  WS-LS-DATA              PIC  X(10)    VALUE SPACE.
           05  FILLER REDEFINES WS-LS-DATA.
               10  WS-LS-TEST          PIC  X.
               10  WS-LS-EXTRA         PIC  X(09).
           05  WS-1-CYMD               PIC  X(08)    VALUE SPACE.
           05  WS-HOLD-FIELD           PIC  X(50)    VALUE SPACE.
           05  WS-TITLE                PIC  X(28)    VALUE SPACE.
           05  WS-STARS                PIC  XX       VALUE SPACE.
           05  WS-GROUP-SW             PIC  X        VALUE SPACE.
           05  WS-READ-REPORTI-SW      PIC  X        VALUE SPACE.
           05  WS-RETURN-SORT-SW       PIC  X        VALUE SPACE.
           05  WS-SR-ALL-LAST          PIC  X        VALUE SPACE.
           05  WS-SR-SUPP-I-G          PIC  X        VALUE SPACE.
           05  WS-SR-GROUP             PIC  X        VALUE SPACE.
           05  WS-KEEP-GROUP-SW        PIC  X        VALUE SPACE.
           05  WS-SORT-FLIP-SW         PIC  X        VALUE SPACE.
           05  WS-WRITE-OR-SKIP-SW     PIC  X        VALUE SPACE.
           05  WS-PAGE                 PIC  9(07)    VALUE ZERO.
           05  WS-HOLD-FIRST-PG        PIC  9(07)    VALUE ZERO.
           05  WS-HOLD-LAST-PG         PIC  9(07)    VALUE ZERO.
           05  WS-HOLD-PG              PIC  9(07)    VALUE ZERO.
           05  WS-HIGH-SUB             PIC  9(05)    VALUE ZERO.
           05  WS-PARM01-MAX           PIC  9(05)    VALUE ZERO.
           05  WS-RPT-LINE             PIC  999      VALUE ZERO.
           05  WS-HOLD-LEN             PIC  999      VALUE ZERO.
           05  WS-HOLD-POS             PIC  999      VALUE ZERO.
           05  WS-HDR-LEN              PIC  999      VALUE ZERO.
           05  WS-VAL-LEN              PIC  999      VALUE ZERO.
           05  WS-VAL-OFF              PIC  999      VALUE ZERO.
           05  WS-END-HDR              PIC  999      VALUE ZERO.
           05  WS-END-VAL              PIC  999      VALUE ZERO.
           05  WS-HDR-POS              PIC  999      VALUE ZERO.
           05  WS-VAL-POS              PIC  999      VALUE ZERO.
           05  WS-T-LN                 PIC  999      VALUE ZERO.
           05  WS-RECORD-MAX           PIC  999      VALUE ZERO.


       01  WS-SWITCHES.
           05  WS-END-REPORTI-SW       PIC  X        VALUE 'N'.
               88  END-OF-REPORTI                    VALUE 'Y'.
               88  MORE-REPORTI-RCDS                 VALUE 'N'.
           05  WS-END-SORT-SW          PIC  X        VALUE 'N'.
               88  END-OF-SORT                       VALUE 'Y'.
               88  MORE-SORT-RCDS                    VALUE 'N'.
           05  WS-FIRST-RCD-SW         PIC  X        VALUE 'Y'.
               88  FIRST-RECORD                      VALUE 'Y'.

       01  WS-COUNT-FIELDS             COMP-3.
           05  WS-READ-REPORTI-CNT     PIC S9(07)    VALUE ZERO.
           05  WS-SORT-RCD-CNT         PIC S9(07)    VALUE ZERO.
           05  WS-WRITE-REPORTO-CNT    PIC S9(07)    VALUE ZERO.
           05  WS-SKIP-PAGE-CNT        PIC S9(07)    VALUE ZERO.
           05  WS-SKIP-LINE-CNT        PIC S9(07)    VALUE ZERO.

       01  WS-SUBSCRIPTS               COMP.
           05  WS-SUB1                 PIC S9(07)    VALUE ZERO.
           05  WS-SUB2                 PIC S9(07)    VALUE ZERO.
           05  WS-SUB3                 PIC S9(07)    VALUE ZERO.
           05  WS-STR1                 PIC S9(07)    VALUE ZERO.
           05  WS-STR2                 PIC S9(07)    VALUE ZERO.

       01  WS-TABLES.
           05  WS-PARM01-ITEM          OCCURS 40 TIMES.
               10  WS-TYPE             PIC  X.
               10  WS-GROUP            PIC  X.
               10  WS-LINE             PIC  999.
               10  WS-END-LINE         PIC  999.
               10  WS-COLUMN           PIC  999.
               10  WS-HEADER           PIC  X(20).
               10  WS-GAP              PIC  99.
               10  WS-VALUE            PIC  X(20).
               10  WS-SUB              PIC  9(05).
               10  WS-PAGE-GROUPS      OCCURS 100 TIMES.
                   15  WS-FIRST-PG     PIC  9(07).
                   15  WS-LAST-PG      PIC  9(07).
               10  WS-ALL-LAST         PIC  X.
               10  WS-SUPP-I-G         PIC  X.
               10  WS-MATCH            PIC  X.
               10  WS-AUDIT            PIC  X.
               10  WS-T-LINES          PIC  X(40).

       01  WS-TEMP-TABLE-FIELDS.
           05  WS-TMP-TYPE             PIC  X        VALUE SPACE.
           05  WS-TMP-GROUP            PIC  X        VALUE SPACE.
           05  WS-TMP-LINE             PIC  999      VALUE ZERO.
           05  WS-TMP-END-LINE         PIC  999      VALUE ZERO.
           05  WS-TMP-COLUMN           PIC  999      VALUE ZERO.
           05  WS-TMP-HEADER           PIC  X(20)    VALUE SPACE.
           05  WS-TMP-GAP              PIC  99       VALUE ZERO.
           05  WS-TMP-VALUE            PIC  X(20)    VALUE SPACE.
           05  WS-TMP-ALL-LAST         PIC  X        VALUE SPACE.
           05  WS-TMP-SUPP-I-G         PIC  X        VALUE SPACE.

       01  WS-END.
           05  FILLER                  PIC  X(16)    VALUE
               '  XLT04660 END  '.

       LINKAGE SECTION.

       01  LS-FIELD.
           05  LS-LENGTH               PIC S9(04)    COMP.
           05  LS-DATA                 PIC  X(10).
           05  FILLER REDEFINES LS-DATA.
               10  LS-TEST             PIC  X.
               10  LS-EXTRA            PIC  X(09).

      /

       PROCEDURE DIVISION USING LS-FIELD.

       0100-PROGRAM-ENTRY.
           MOVE +0000                         TO WS-RETURN-CODE.
           MOVE 134                           TO WS-RECORD-MAX.
           DISPLAY '    '.
           DISPLAY '**** XLT04660 zap report pages with zero totals'.
           PERFORM 0200-OPEN-INPUT-REPORTI.
           PERFORM 0200-OPEN-FILES.

           IF WS-RETURN-CODE = ZERO
               PERFORM 0400-PROCESS-REPORTI.

           DISPLAY '                         '.
           DISPLAY '**** Parm entries        ' WS-PARM01-MAX ' of 40'.
           DISPLAY '**** Records in REPORTI  ' WS-READ-REPORTI-CNT.
           DISPLAY '**** Records sorted      ' WS-SORT-RCD-CNT.
           DISPLAY '**** Pages skipped       ' WS-SKIP-PAGE-CNT.
           DISPLAY '**** Lines skipped       ' WS-SKIP-LINE-CNT.
           DISPLAY '**** REPORTO written     ' WS-WRITE-REPORTO-CNT.
           DISPLAY '**** Highest group       ' WS-HIGH-SUB   ' of 100'.

           IF WS-RETURN-CODE = ZERO
               PERFORM 0300-CLOSE-FILES
           ELSE
               DISPLAY '**** XLT04660 cond code ' WS-RETURN-CODE
                       ' set by program'
               MOVE WS-RETURN-CODE            TO RETURN-CODE.

           DISPLAY '**** XLT04660 EOJ encountered '.
           DISPLAY '    '.
           STOP RUN.

       0200-OPEN-INPUT-REPORTI.
           OPEN INPUT  REPORTI.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** XLT04660 open error on REPORTI'
               DISPLAY '**** File stat           ' WS-STAT
               MOVE +0200                     TO WS-RETURN-CODE.

       0200-OPEN-FILES.
           OPEN INPUT PARM01.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** XLT04660 open error on PARM01'
               DISPLAY '**** File stat           ' WS-STAT
               MOVE +0200                     TO WS-RETURN-CODE.
           OPEN OUTPUT REPORTO.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** XLT04660 open error on REPORTO'
               DISPLAY '**** File stat           ' WS-STAT
               MOVE +0200                     TO WS-RETURN-CODE.
           OPEN OUTPUT REPORTD.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** XLT04660 open error on REPORTD'
               DISPLAY '**** File stat           ' WS-STAT
               MOVE +0200                     TO WS-RETURN-CODE.

       0300-CLOSE-REPORTI.
           CLOSE REPORTI.

       0300-CLOSE-FILES.
           CLOSE REPORTD.
           CLOSE REPORTO.
           CLOSE PARM01.

      *---------------------------------------
      *    X
      *---------------------------------------
       0400-PROCESS-REPORTI.

           PERFORM 0500-GET-LINKAGE.

           IF WS-RETURN-CODE = ZERO
               PERFORM 0600-GET-PARM-CYMD.

           IF WS-RETURN-CODE = ZERO
               PERFORM 0700-INIT-PARM-TABLE
               MOVE ZERO                      TO WS-SUB1
               PERFORM 0700-LOAD-PARM01 THRU
                       0700-LOAD-PARM01-EXIT.

           IF WS-RETURN-CODE = ZERO
               PERFORM 0800-AUDIT-PARM-TABLE.

           IF WS-RETURN-CODE = ZERO
               MOVE 'N'                       TO WS-SORT-FLIP-SW
               PERFORM 0900-SORT-PARM-TABLE
                   UNTIL WS-SORT-FLIP-SW = SPACE.

           IF WS-RETURN-CODE = ZERO
               SORT SORT-REPORTI
                   ON ASCENDING KEY  SR-FIRST-PAGE
                                     SR-PAGE
                   INPUT PROCEDURE IS 1000-SORT-IN
                   OUTPUT PROCEDURE IS 2000-SORT-OUT.

       0500-GET-LINKAGE.
           IF LS-LENGTH = ZERO
               DISPLAY '**** Parm length is zero '
               MOVE +0500                     TO WS-RETURN-CODE
           ELSE
           IF LS-LENGTH > LENGTH OF WS-LS-DATA
               DISPLAY '**** Parm length is excessive '
               MOVE +0500                     TO WS-RETURN-CODE
           ELSE
               MOVE LS-DATA(1: LS-LENGTH)     TO WS-LS-DATA.

           IF WS-LS-TEST NOT = SPACE
               DISPLAY '**** Test switch set to  ' WS-LS-TEST.
           DISPLAY '                         '.

       0600-GET-PARM-CYMD.
           MOVE FUNCTION CURRENT-DATE(1: 8)   TO WS-1-CYMD.

       0700-INIT-PARM-TABLE.
           PERFORM VARYING WS-SUB1 FROM 1 BY 1
               UNTIL WS-SUB1 > 40
               MOVE SPACE                     TO WS-TYPE(WS-SUB1)
               MOVE SPACE                     TO WS-GROUP(WS-SUB1)
               MOVE SPACE                     TO WS-HEADER(WS-SUB1)
               MOVE SPACE                     TO WS-VALUE(WS-SUB1)
               MOVE SPACE                     TO WS-ALL-LAST(WS-SUB1)
               MOVE SPACE                     TO WS-SUPP-I-G(WS-SUB1)
               MOVE SPACE                     TO WS-MATCH(WS-SUB1)
               MOVE SPACE                     TO WS-AUDIT(WS-SUB1)
               MOVE SPACE                     TO WS-T-LINES(WS-SUB1)
               MOVE ZERO                      TO WS-LINE(WS-SUB1)
               MOVE ZERO                      TO WS-END-LINE(WS-SUB1)
               MOVE ZERO                      TO WS-COLUMN(WS-SUB1)
               MOVE ZERO                      TO WS-GAP(WS-SUB1)
               MOVE ZERO                      TO WS-SUB(WS-SUB1)
               PERFORM VARYING WS-STR2 FROM 1 BY 1
                   UNTIL WS-STR2 > 100
                   MOVE ZERO           TO WS-FIRST-PG(WS-SUB1, WS-STR2)
                   MOVE ZERO           TO WS-LAST-PG(WS-SUB1, WS-STR2)
               END-PERFORM
           END-PERFORM.

      *---------------------------------------
      *    load XXX...
      *---------------------------------------
       0700-LOAD-PARM01.
           READ PARM01.
           IF WS-STAT = 10
               MOVE WS-SUB1                   TO WS-PARM01-MAX
               GO TO 0700-LOAD-PARM01-EXIT
           ELSE
           IF WS-STAT > ZERO
               DISPLAY '**** XLT04660 read error on PARM01'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0700                     TO WS-RETURN-CODE
               GO TO 0700-LOAD-PARM01-EXIT.

           IF PARM01-DOCU = '*'
               GO TO 0700-LOAD-PARM01.

           IF WS-SUB1 < 40
               ADD 1                          TO WS-SUB1
               PERFORM 0700-PARM01-FIELDS.

           GO TO 0700-LOAD-PARM01.

       0700-LOAD-PARM01-EXIT. EXIT.

       0700-PARM01-FIELDS.
           IF PARM01-LINE NUMERIC
               MOVE PARM01-LINE               TO WS-LINE(WS-SUB1)
           ELSE
               DISPLAY '**** XLT04660 PARM01 line not numeric'
               MOVE +0700                     TO WS-RETURN-CODE.
           MOVE PARM01-GROUP                  TO WS-GROUP(WS-SUB1).
           IF PARM01-TYPE = 'S'
               MOVE PARM01-TYPE               TO WS-TYPE(WS-SUB1)
               PERFORM 0700-PARM01-S-FIELDS
           ELSE
           IF PARM01-TYPE = 'T'
               MOVE PARM01-TYPE               TO WS-TYPE(WS-SUB1)
               PERFORM 0700-PARM01-T-FIELDS
           ELSE
               DISPLAY '**** XLT04660 PARM01 type must be S or T'
               MOVE +0702                     TO WS-RETURN-CODE.

       0700-PARM01-S-FIELDS.
           IF PARM01-S-COL NUMERIC
               MOVE PARM01-S-COL              TO WS-COLUMN(WS-SUB1)
           ELSE
               DISPLAY '**** XLT04660 PARM01 column not numeric'
               MOVE +0703                     TO WS-RETURN-CODE.
           IF PARM01-S-HDR = SPACE
             IF PARM01-S-COL NUMERIC
               IF PARM01-S-COL = '000'
                 IF PARM01-S-VAL = SPACE
                     DISPLAY '**** XLT04660 PARM01 if column 000 then '
                             'header or value required'
                     MOVE +0704               TO WS-RETURN-CODE
                 ELSE
                     CONTINUE
               ELSE
                   CONTINUE
             ELSE
                 CONTINUE
           ELSE
               MOVE PARM01-S-HDR              TO WS-HEADER(WS-SUB1).
           IF PARM01-S-GAP NUMERIC
               MOVE PARM01-S-GAP              TO WS-GAP(WS-SUB1)
           ELSE
               DISPLAY '**** XLT04660 PARM01 gap not numeric'
               MOVE +0705                     TO WS-RETURN-CODE.
           IF PARM01-S-VAL = SPACE
               DISPLAY '**** XLT04660 PARM01 value is blank'
               MOVE +0706                     TO WS-RETURN-CODE
           ELSE
               MOVE PARM01-S-VAL              TO WS-VALUE(WS-SUB1).

       0700-PARM01-T-FIELDS.
           IF PARM01-T-END NUMERIC
               MOVE PARM01-T-END              TO WS-END-LINE(WS-SUB1)
           ELSE
               DISPLAY '**** XLT04660 PARM01 end line not numeric'
               MOVE +0707                     TO WS-RETURN-CODE.
           IF WS-END-LINE(WS-SUB1) > ZERO
               MOVE ZERO                      TO WS-T-LN
               COMPUTE WS-T-LN = WS-END-LINE(WS-SUB1)
                               - WS-LINE(WS-SUB1) + 1
               IF WS-T-LN > 40
                   DISPLAY '**** XLT04660 PARM01 totals end line more '
                           'than 40 lines after start line'
                   MOVE +0708                 TO WS-RETURN-CODE.
           IF PARM01-T-COL NUMERIC
               MOVE PARM01-T-COL              TO WS-COLUMN(WS-SUB1)
               IF WS-COLUMN(WS-SUB1) = ZERO
                   DISPLAY '**** XLT04660 PARM01 column must not '
                           'be zero'
                   MOVE +0709                 TO WS-RETURN-CODE
               ELSE
                   CONTINUE
           ELSE
               DISPLAY '**** XLT04660 PARM01 column not numeric'
               MOVE +0710                     TO WS-RETURN-CODE.
           IF PARM01-TOTAL = SPACE OR 'BLANK'
               MOVE SPACE                     TO WS-HEADER(WS-SUB1)
           ELSE
               MOVE PARM01-TOTAL              TO WS-HEADER(WS-SUB1).
           IF PARM01-T-LEN NUMERIC
               MOVE PARM01-T-LEN              TO WS-GAP(WS-SUB1)
           ELSE
               DISPLAY '**** XLT04660 PARM01 length not numeric'
               MOVE +0711                     TO WS-RETURN-CODE.
           IF WS-HEADER(WS-SUB1) = SPACE
             IF WS-GAP(WS-SUB1) = ZERO
                 DISPLAY '**** XLT04660 PARM01 if total field is blank'
                         ' then must specify a length'
                 MOVE +0712                   TO WS-RETURN-CODE.
           IF PARM01-T-PGS = SPACE
               MOVE 'L'                       TO WS-ALL-LAST(WS-SUB1)
           ELSE
           IF PARM01-T-PGS = 'A' OR 'L'
               MOVE PARM01-T-PGS              TO WS-ALL-LAST(WS-SUB1)
           ELSE
               DISPLAY '**** XLT04660 PARM01 all/last flag should '
                       'be A or L'
               MOVE +0713                     TO WS-RETURN-CODE.
           IF PARM01-T-SUPP = SPACE
               MOVE 'G'                       TO WS-SUPP-I-G(WS-SUB1)
           ELSE
           IF PARM01-T-SUPP = 'I'
             IF WS-ALL-LAST(WS-SUB1) = 'L'
                 MOVE 'G'                     TO WS-SUPP-I-G(WS-SUB1)
                 DISPLAY '**** XLT04660 PARM01 suppress individual/'
                         'group changed to "G" '
                 DISPLAY '****                 since all/last is "L" '
             ELSE
                 MOVE PARM01-T-SUPP           TO WS-SUPP-I-G(WS-SUB1)
           ELSE
           IF PARM01-T-SUPP = 'G'
               MOVE PARM01-T-SUPP             TO WS-SUPP-I-G(WS-SUB1)
           ELSE
               DISPLAY '**** XLT04660 PARM01 print individual/'
                       'group should be I or G'
               MOVE +0714                     TO WS-RETURN-CODE.

      *---------------------------------------

       0800-AUDIT-PARM-TABLE.
           PERFORM 0800-AUDIT-PARM-TOP-LOOP
               VARYING WS-SUB1 FROM 1 BY 1
               UNTIL WS-SUB1 > WS-PARM01-MAX.
           PERFORM 0800-ANNOUNCE-GROUP-NOMATCH
               VARYING WS-SUB1 FROM 1 BY 1
               UNTIL WS-SUB1 > WS-PARM01-MAX.

       0800-AUDIT-PARM-TOP-LOOP.
           PERFORM 0800-AUDIT-PARM-BOT-LOOP
               VARYING WS-SUB2 FROM 1 BY 1
               UNTIL WS-SUB2 > WS-PARM01-MAX.

      *---------------------------------------
      *    loop through the parm table and try to match-up
      *    'S' and 'T' records for the same group, and generate
      *    errors for unmatched records.
      *    also generate errors for more than one 'T' record with
      *    the same group code.
      *---------------------------------------
       0800-AUDIT-PARM-BOT-LOOP.
           IF WS-SUB1 NOT = WS-SUB2
             IF WS-TYPE(WS-SUB1) = 'T'
               IF WS-TYPE(WS-SUB2) = 'T'
                 IF WS-GROUP(WS-SUB1) = WS-GROUP(WS-SUB2)
                     MOVE 'X'                 TO WS-AUDIT(WS-SUB2).
           IF WS-TYPE(WS-SUB1) = 'S'
             IF WS-TYPE(WS-SUB2) = 'T'
               IF WS-GROUP(WS-SUB1) = WS-GROUP(WS-SUB2)
                   MOVE 'Y'                   TO WS-AUDIT(WS-SUB1)
                   IF WS-AUDIT(WS-SUB2) NOT = 'X'
                       MOVE 'Y'               TO WS-AUDIT(WS-SUB2).

       0800-ANNOUNCE-GROUP-NOMATCH.
           IF WS-AUDIT(WS-SUB1) = SPACE
               DISPLAY '**** XLT04660 PARM01 has unmatched '
                       'group S and T records  ' WS-SUB1
               MOVE +0800                     TO WS-RETURN-CODE.
           IF WS-AUDIT(WS-SUB1) = 'X'
               DISPLAY '**** XLT04660 PARM01 has duplicate T '
                       'records  ' WS-SUB1
               MOVE +0800                     TO WS-RETURN-CODE.

      *---------------------------------------
      *    in the parm file for this program, records are specified
      *    as:   type    group
      *          ----    -----
      *          S       A
      *          S       A
      *          S       B
      *          T       A
      *          T       B
      *
      *    for logic in 1200-ROLLUP-MATCHES-IN-TABLE,
      *    we want them sorted by group and then by type:
      *          S       A
      *          S       A
      *          T       A
      *          S       B
      *          T       B
      *---------------------------------------
       0900-SORT-PARM-TABLE.
           MOVE SPACE                         TO WS-SORT-FLIP-SW.
           PERFORM 0900-FLIP-SORT
               VARYING WS-SUB1 FROM 1 BY 1
               UNTIL WS-SUB1 > WS-PARM01-MAX - 1.

       0900-FLIP-SORT.
           IF WS-GROUP(WS-SUB1) > WS-GROUP(WS-SUB1 + 1)
               PERFORM 0900-FLIP
           ELSE
           IF WS-GROUP(WS-SUB1) = WS-GROUP(WS-SUB1 + 1)
             IF WS-TYPE(WS-SUB1) > WS-TYPE(WS-SUB1 + 1)
                 PERFORM 0900-FLIP.

       0900-FLIP.
           MOVE WS-TYPE(WS-SUB1 + 1)        TO WS-TMP-TYPE.
           MOVE WS-GROUP(WS-SUB1 + 1)       TO WS-TMP-GROUP.
           MOVE WS-LINE(WS-SUB1 + 1)        TO WS-TMP-LINE.
           MOVE WS-END-LINE(WS-SUB1 + 1)    TO WS-TMP-END-LINE.
           MOVE WS-COLUMN(WS-SUB1 + 1)      TO WS-TMP-COLUMN.
           MOVE WS-HEADER(WS-SUB1 + 1)      TO WS-TMP-HEADER.
           MOVE WS-GAP(WS-SUB1 + 1)         TO WS-TMP-GAP.
           MOVE WS-VALUE(WS-SUB1 + 1)       TO WS-TMP-VALUE.
           MOVE WS-ALL-LAST(WS-SUB1 + 1)    TO WS-TMP-ALL-LAST.
           MOVE WS-SUPP-I-G(WS-SUB1 + 1)    TO WS-TMP-SUPP-I-G.

           MOVE WS-TYPE(WS-SUB1)            TO WS-TYPE(WS-SUB1 + 1).
           MOVE WS-GROUP(WS-SUB1)           TO WS-GROUP(WS-SUB1 + 1).
           MOVE WS-LINE(WS-SUB1)            TO WS-LINE(WS-SUB1 + 1).
           MOVE WS-END-LINE(WS-SUB1)        TO WS-END-LINE(WS-SUB1 + 1).
           MOVE WS-COLUMN(WS-SUB1)          TO WS-COLUMN(WS-SUB1 + 1).
           MOVE WS-HEADER(WS-SUB1)          TO WS-HEADER(WS-SUB1 + 1).
           MOVE WS-GAP(WS-SUB1)             TO WS-GAP(WS-SUB1 + 1).
           MOVE WS-VALUE(WS-SUB1)           TO WS-VALUE(WS-SUB1 + 1).
           MOVE WS-ALL-LAST(WS-SUB1)        TO WS-ALL-LAST(WS-SUB1 + 1).
           MOVE WS-SUPP-I-G(WS-SUB1)        TO WS-SUPP-I-G(WS-SUB1 + 1).

           MOVE WS-TMP-TYPE                 TO WS-TYPE(WS-SUB1).
           MOVE WS-TMP-GROUP                TO WS-GROUP(WS-SUB1).
           MOVE WS-TMP-LINE                 TO WS-LINE(WS-SUB1).
           MOVE WS-TMP-END-LINE             TO WS-END-LINE(WS-SUB1).
           MOVE WS-TMP-COLUMN               TO WS-COLUMN(WS-SUB1).
           MOVE WS-TMP-HEADER               TO WS-HEADER(WS-SUB1).
           MOVE WS-TMP-GAP                  TO WS-GAP(WS-SUB1).
           MOVE WS-TMP-VALUE                TO WS-VALUE(WS-SUB1).
           MOVE WS-TMP-ALL-LAST             TO WS-ALL-LAST(WS-SUB1).
           MOVE WS-TMP-SUPP-I-G             TO WS-SUPP-I-G(WS-SUB1).

           MOVE 'Y'                         TO WS-SORT-FLIP-SW.

      *---------------------------------------
      *    first loop through input report file
      *
      *    find header fields and values from PARM01
      *---------------------------------------
       1000-SORT-IN.
           IF WS-RETURN-CODE = ZERO
               PERFORM 1000-REPORTI-FIRST-LOOP
                   UNTIL END-OF-REPORTI
               MOVE ZERO                      TO WS-RPT-LINE
               MOVE 'Y'                       TO WS-GROUP-SW
               PERFORM 1200-ROLLUP-MATCHES-IN-TABLE
                   VARYING WS-SUB1 FROM 1 BY 1
                   UNTIL WS-SUB1 > WS-PARM01-MAX.

           IF WS-LS-TEST NUMERIC
               DISPLAY '                '
               PERFORM 1400-SHOW-TABLE
                   VARYING WS-SUB1 FROM 1 BY 1
                   UNTIL WS-SUB1 > WS-PARM01-MAX.

      *---------------------------------------
      *    second loop through input report file
      *
      *    for pages found above, determine if totals are zeroes
      *    or blanks
      *---------------------------------------
           IF WS-RETURN-CODE = ZERO
               MOVE ZERO                      TO WS-READ-REPORTI-CNT
               MOVE 'N'                       TO WS-END-REPORTI-SW
               MOVE 'Y'                       TO WS-FIRST-RCD-SW
               MOVE ZERO                      TO WS-PAGE
               PERFORM 0300-CLOSE-REPORTI
               PERFORM 0200-OPEN-INPUT-REPORTI
               IF WS-RETURN-CODE = ZERO
                   PERFORM 1600-REPORTI-SECOND-LOOP
                       UNTIL END-OF-REPORTI
                   MOVE ZERO                  TO WS-RPT-LINE
                   MOVE ZERO                  TO WS-T-LN
                   PERFORM 1900-ROLLUP-TOTALS-IN-TABLE
                       VARYING WS-SUB1 FROM 1 BY 1
                       UNTIL WS-SUB1 > WS-PARM01-MAX
                   DISPLAY '                '.

      *---------------------------------------
      *    first loop through input report file
      *---------------------------------------
       1000-REPORTI-FIRST-LOOP.
           PERFORM 1100-READ-REPORTI.
           IF MORE-REPORTI-RCDS
               PERFORM 1200-SELECT-FIRST THRU
                       1200-SELECT-FIRST-EXIT.

       1100-READ-REPORTI.
           READ REPORTI.
           IF WS-STAT = ZERO
               ADD 1                          TO WS-READ-REPORTI-CNT
           ELSE
           IF WS-STAT = 10
               MOVE 'Y'                       TO WS-END-REPORTI-SW
           ELSE
               DISPLAY '**** XLT04660 read error on REPORTI '
               DISPLAY '**** File stat           ' WS-STAT
               MOVE +1100                     TO WS-RETURN-CODE.

       1200-SELECT-FIRST.
           IF REPORTI-RCD(1: 1) = '1'
             IF FIRST-RECORD
                 MOVE 'N'                     TO WS-FIRST-RCD-SW
                 MOVE ZERO                    TO WS-RPT-LINE
                 ADD 1                        TO WS-PAGE
             ELSE
                 MOVE ZERO                    TO WS-RPT-LINE
                 MOVE 'Y'                     TO WS-GROUP-SW
                 PERFORM 1200-ROLLUP-MATCHES-IN-TABLE
                     VARYING WS-SUB1 FROM 1 BY 1
                     UNTIL WS-SUB1 > WS-PARM01-MAX
                 ADD 1                        TO WS-PAGE.

           ADD 1                              TO WS-RPT-LINE.
           PERFORM 1200-SEARCH-FOR-HEADERS
               VARYING WS-SUB1 FROM 1 BY 1
               UNTIL WS-SUB1 > WS-PARM01-MAX.

       1200-SELECT-FIRST-EXIT. EXIT.

      *---------------------------------------
      *    in table, if all "S" records were found then store
      *    that fact in the "T" record along with the first and
      *    last page where the "S" records were found
      *---------------------------------------
       1200-ROLLUP-MATCHES-IN-TABLE.
           IF WS-TYPE(WS-SUB1) = 'S'
             IF WS-MATCH(WS-SUB1) = 'Y'
                 MOVE SPACE                   TO WS-MATCH(WS-SUB1)
             ELSE
                 MOVE SPACE                   TO WS-MATCH(WS-SUB1)
                 MOVE 'N'                     TO WS-GROUP-SW
           ELSE
           IF WS-TYPE(WS-SUB1) = 'T'
             IF WS-GROUP-SW = 'Y'
                 MOVE 'Y'                     TO WS-MATCH(WS-SUB1)
                 MOVE WS-SUB(WS-SUB1)         TO WS-STR2
                 IF WS-STR2 = ZERO
                     ADD 1                    TO WS-STR2
                     MOVE WS-PAGE      TO WS-FIRST-PG(WS-SUB1, WS-STR2)
                     MOVE WS-PAGE      TO WS-LAST-PG(WS-SUB1, WS-STR2)
                     MOVE WS-STR2      TO WS-SUB(WS-SUB1)
                 ELSE
                 IF WS-PAGE = WS-LAST-PG(WS-SUB1, WS-STR2) + 1
                     MOVE WS-PAGE      TO WS-LAST-PG(WS-SUB1, WS-STR2)
                 ELSE
                 IF WS-STR2 < 100
                     ADD 1                    TO WS-STR2
                     MOVE WS-PAGE      TO WS-FIRST-PG(WS-SUB1, WS-STR2)
                     MOVE WS-PAGE      TO WS-LAST-PG(WS-SUB1, WS-STR2)
                     MOVE WS-STR2      TO WS-SUB(WS-SUB1)
                 ELSE
                     DISPLAY '**** XLT04660 internal table of 100 '
                     DISPLAY 'search groups exceeded.  treating last '
                     DISPLAY 'group as global which will encompass all'
                     DISPLAY 'remaining groups.                       '
                     MOVE WS-PAGE      TO WS-LAST-PG(WS-SUB1, WS-STR2)
             ELSE
                 MOVE 'Y'                     TO WS-GROUP-SW.

       1200-SEARCH-FOR-HEADERS.
           IF WS-TYPE(WS-SUB1) = 'S'
               PERFORM 1200-INIT-HEADER-WORK-FIELDS
               PERFORM 1200-HEADER-SEARCH.

       1200-INIT-HEADER-WORK-FIELDS.
           MOVE ZERO                          TO WS-END-HDR.
           MOVE ZERO                          TO WS-END-VAL.
           MOVE ZERO                          TO WS-HDR-LEN.
           MOVE ZERO                          TO WS-VAL-LEN.
           MOVE ZERO                          TO WS-VAL-OFF.

           IF WS-HEADER(WS-SUB1) = SPACE
               MOVE ZERO                      TO WS-HDR-LEN
           ELSE
               MOVE WS-HEADER(WS-SUB1)        TO WS-HOLD-FIELD
               PERFORM 1900-DETERMINE-FIELD-LEN
               MOVE WS-HOLD-LEN               TO WS-HDR-LEN.
           IF WS-VALUE(WS-SUB1) = SPACE
               MOVE ZERO                      TO WS-VAL-LEN
           ELSE
               MOVE WS-VALUE(WS-SUB1)         TO WS-HOLD-FIELD
               PERFORM 1900-DETERMINE-FIELD-LEN
               MOVE WS-HOLD-LEN               TO WS-VAL-LEN.
           COMPUTE WS-VAL-OFF = WS-HDR-LEN + WS-GAP(WS-SUB1).
           COMPUTE WS-END-HDR = WS-RECORD-MAX - WS-HDR-LEN.
           COMPUTE WS-END-VAL = WS-RECORD-MAX - WS-VAL-LEN.

       1200-HEADER-SEARCH.
           IF WS-RPT-LINE = WS-LINE(WS-SUB1)
             IF WS-COLUMN(WS-SUB1) = ZERO
               IF WS-HEADER(WS-SUB1) = SPACE
                   MOVE ZERO                  TO WS-VAL-POS
                   MOVE 'Value search; header blank' TO WS-TITLE
                   MOVE '**'                  TO WS-STARS
                   PERFORM 1300-FIND-VALUE
                       VARYING WS-SUB2 FROM 1 BY 1
                       UNTIL WS-SUB2 > WS-END-VAL
                   IF WS-VAL-POS = ZERO
                       CONTINUE
                   ELSE
                       MOVE 'Y'               TO WS-MATCH(WS-SUB1)
               ELSE
                   MOVE ZERO                  TO WS-HDR-POS
                   MOVE 'Header search'       TO WS-TITLE
                   MOVE '**'                  TO WS-STARS
                   PERFORM 1300-FIND-HEADER
                       VARYING WS-SUB2 FROM 1 BY 1
                       UNTIL WS-SUB2 > WS-END-HDR
                   IF WS-HDR-POS = ZERO
                       CONTINUE
                   ELSE
                       MOVE WS-HDR-POS        TO WS-SUB2
                       ADD WS-VAL-OFF         TO WS-SUB2
                       MOVE ZERO              TO WS-VAL-POS
                       MOVE 'Value'           TO WS-TITLE
                       MOVE SPACE             TO WS-STARS
                       PERFORM 1300-FIND-VALUE
                       IF WS-VAL-POS = ZERO
                           CONTINUE
                       ELSE
                           MOVE 'Y'           TO WS-MATCH(WS-SUB1)
             ELSE
             IF WS-HEADER(WS-SUB1) = SPACE
                 MOVE WS-COLUMN(WS-SUB1)      TO WS-SUB2
                 MOVE ZERO                    TO WS-VAL-POS
                 MOVE SPACE                   TO WS-TITLE
                 MOVE '**'                    TO WS-STARS
                 STRING 'Value '              DELIMITED BY SIZE
                        WS-COLUMN(WS-SUB1)    DELIMITED BY SIZE
                        '; header blank'      DELIMITED BY SIZE
                        INTO WS-TITLE
                 PERFORM 1300-FIND-VALUE
                 IF WS-VAL-POS = ZERO
                     CONTINUE
                 ELSE
                     MOVE 'Y'                 TO WS-MATCH(WS-SUB1)
             ELSE
                 MOVE WS-COLUMN(WS-SUB1)      TO WS-SUB2
                 MOVE ZERO                    TO WS-HDR-POS
                 MOVE '**'                    TO WS-STARS
                 MOVE SPACE                   TO WS-TITLE
                 STRING 'Header '             DELIMITED BY SIZE
                        WS-COLUMN(WS-SUB1)    DELIMITED BY SIZE
                        INTO WS-TITLE
                 PERFORM 1300-FIND-HEADER
                 IF WS-HDR-POS = ZERO
                     CONTINUE
                 ELSE
                     MOVE WS-HDR-POS          TO WS-SUB2
                     ADD WS-VAL-OFF           TO WS-SUB2
                     MOVE ZERO                TO WS-VAL-POS
                     MOVE 'Value'             TO WS-TITLE
                     MOVE SPACE               TO WS-STARS
                     PERFORM 1300-FIND-VALUE
                     IF WS-VAL-POS = ZERO
                         CONTINUE
                     ELSE
                         MOVE 'Y'             TO WS-MATCH(WS-SUB1).

       1300-FIND-HEADER.
           IF REPORTI-RCD(WS-SUB2: WS-HDR-LEN)
               = WS-HEADER(WS-SUB1)(1: WS-HDR-LEN)
               MOVE WS-SUB2                   TO WS-HDR-POS
               PERFORM 1400-SHOW-HDR
               MOVE WS-END-HDR                TO WS-SUB2.

       1300-FIND-VALUE.
           IF REPORTI-RCD(WS-SUB2: WS-VAL-LEN)
               = WS-VALUE(WS-SUB1)(1: WS-VAL-LEN)
               MOVE WS-SUB2                   TO WS-VAL-POS
               PERFORM 1400-SHOW-VAL
               MOVE WS-END-VAL                TO WS-SUB2.


       1400-SHOW-HDR.
           IF WS-LS-TEST = '3'
               DISPLAY WS-STARS ' Record  ' WS-READ-REPORTI-CNT
                       '  ' WS-GROUP(WS-SUB1)
                       '  ' WS-TITLE ' ' WS-HEADER(WS-SUB1)
               DISPLAY '   Page    ' WS-PAGE
                       '            Length     ' WS-HDR-LEN
               DISPLAY '   Line    ' WS-LINE(WS-SUB1)
                       '                Position   ' WS-HDR-POS.

       1400-SHOW-VAL.
           IF WS-LS-TEST = '3'
               DISPLAY WS-STARS ' Record  ' WS-READ-REPORTI-CNT
                       '  ' WS-GROUP(WS-SUB1)
                       '  ' WS-TITLE ' ' WS-VALUE(WS-SUB1)
               DISPLAY '   Page    ' WS-PAGE
                       '            Length     ' WS-VAL-LEN
               DISPLAY '   Line    ' WS-LINE(WS-SUB1)
                       '                Position   ' WS-VAL-POS.

       1400-SHOW-TABLE.
           DISPLAY '** Type         ' WS-TYPE(WS-SUB1).
           DISPLAY '**  Group       ' WS-GROUP(WS-SUB1).
           DISPLAY '**   Line       ' WS-LINE(WS-SUB1).
           DISPLAY '**   Column     ' WS-COLUMN(WS-SUB1).
           DISPLAY '**   Header     ' WS-HEADER(WS-SUB1).
           IF WS-TYPE(WS-SUB1) = 'T'
               DISPLAY '**   Length     ' WS-GAP(WS-SUB1)
           ELSE
               DISPLAY '**   Gap        ' WS-GAP(WS-SUB1).
           IF WS-LS-TEST = '3'
               DISPLAY '**   Audit      ' WS-AUDIT(WS-SUB1).
           DISPLAY '**   Value      ' WS-VALUE(WS-SUB1).
           IF WS-TYPE(WS-SUB1) = 'T'
             IF WS-LS-TEST = '1'
                 DISPLAY '**   Sub groups ' WS-SUB(WS-SUB1).
           IF WS-TYPE(WS-SUB1) = 'T'
             IF WS-LS-TEST = '2' OR '3'
                 DISPLAY '**     Page groups: '
                 PERFORM 1400-SHOW-PAGE-GROUPS
                     VARYING WS-STR2 FROM 1 BY 1
                     UNTIL WS-STR2 > WS-SUB(WS-SUB1).
           IF WS-MATCH(WS-SUB1) NOT = SPACE
               DISPLAY '**   Match      ' WS-MATCH(WS-SUB1).
           DISPLAY '                '.

       1400-SHOW-PAGE-GROUPS.
           DISPLAY '**          ' WS-STR2 '   First-pg  '
                             WS-FIRST-PG(WS-SUB1, WS-STR2)
                   '   Last-pg  '
                             WS-LAST-PG(WS-SUB1, WS-STR2).

      *---------------------------------------

      *---------------------------------------
      *    second loop through input report file
      *---------------------------------------
       1600-REPORTI-SECOND-LOOP.
           PERFORM 1100-READ-REPORTI.
           IF MORE-REPORTI-RCDS
               PERFORM 1700-SELECT-SECOND THRU
                       1700-SELECT-SECOND-EXIT
               MOVE ZERO                      TO WS-HIGH-SUB
               PERFORM 1900-FIND-HIGHEST-GROUP
                   VARYING WS-SUB1 FROM 1 BY 1
                   UNTIL WS-SUB1 > WS-PARM01-MAX.

      *---------------------------------------
      *
      *    for all pages where headers/values were found (above),
      *    process "totals" entries
      *
      *    - - --- --- --- -------------------- -- - -
      *    T x 018 022 125    0.00              07 A I
      *
      *---------------------------------------
       1700-SELECT-SECOND.
           IF REPORTI-RCD(1: 1) = '1'
             IF FIRST-RECORD
                 MOVE 'N'                     TO WS-FIRST-RCD-SW
                 MOVE ZERO                    TO WS-RPT-LINE
                 MOVE ZERO                    TO WS-T-LN
                 ADD 1                        TO WS-PAGE
             ELSE
                 MOVE ZERO                    TO WS-RPT-LINE
                 MOVE ZERO                    TO WS-T-LN
                 PERFORM 1900-ROLLUP-TOTALS-IN-TABLE
                     VARYING WS-SUB1 FROM 1 BY 1
                     UNTIL WS-SUB1 > WS-PARM01-MAX
                 ADD 1                        TO WS-PAGE.

           ADD 1                              TO WS-RPT-LINE.
           PERFORM 1800-TOTALS-PAGE-MATCH
               VARYING WS-SUB1 FROM 1 BY 1
               UNTIL WS-SUB1 > WS-PARM01-MAX.

       1700-SELECT-SECOND-EXIT. EXIT.

       1800-TOTALS-PAGE-MATCH.
           IF WS-TYPE(WS-SUB1) = 'T'
             IF WS-MATCH(WS-SUB1) = 'Y'
               IF WS-ALL-LAST(WS-SUB1) = 'L'
                   PERFORM 1800-ROLLUP-L-GROUPS
                       VARYING WS-STR2 FROM 1 BY 1
                       UNTIL WS-STR2 > WS-SUB(WS-SUB1)
               ELSE
                   PERFORM 1800-ROLLUP-A-GROUPS
                       VARYING WS-STR2 FROM 1 BY 1
                       UNTIL WS-STR2 > WS-SUB(WS-SUB1).

       1800-ROLLUP-L-GROUPS.
           IF WS-PAGE = WS-LAST-PG(WS-SUB1, WS-STR2)
               PERFORM 1800-TOTALS-LINE-MATCH.

       1800-ROLLUP-A-GROUPS.
           IF WS-PAGE < WS-FIRST-PG(WS-SUB1, WS-STR2)
               CONTINUE
           ELSE
           IF WS-PAGE > WS-LAST-PG(WS-SUB1, WS-STR2)
               CONTINUE
           ELSE
               PERFORM 1800-TOTALS-LINE-MATCH.

       1800-TOTALS-LINE-MATCH.
           IF WS-END-LINE(WS-SUB1) = ZERO
             IF WS-RPT-LINE = WS-LINE(WS-SUB1)
                 PERFORM 1800-TOTALS-WITHIN-LINES
             ELSE
                 CONTINUE
           ELSE
           IF WS-RPT-LINE < WS-LINE(WS-SUB1)
               CONTINUE
           ELSE
           IF WS-RPT-LINE > WS-END-LINE(WS-SUB1)
               CONTINUE
           ELSE
               PERFORM 1800-TOTALS-WITHIN-LINES.

      *---------------------------------------
      *    for all lines where totals are expected,
      *    load WS-T-LINES with 'y' or 'n' and then inspect.
      *    if any 'n' then non-zero totals were found on the page.
      *---------------------------------------
       1800-TOTALS-WITHIN-LINES.
           ADD 1                              TO WS-T-LN.
           IF WS-T-LN < 41
               PERFORM 1800-INIT-TOTALS-WORK-FIELDS
               MOVE WS-COLUMN(WS-SUB1)        TO WS-SUB2
               MOVE ZERO                      TO WS-HDR-POS
               MOVE 'Totals '                 TO WS-TITLE
               MOVE '**'                      TO WS-STARS
               IF WS-SUB2 > WS-END-HDR
                   DISPLAY '**** XLT04660 skipping total search '
                           'for line ' WS-LINE(WS-SUB1)
                   DISPLAY '     column ' WS-SUB2 ' plus length '
                           WS-HDR-LEN ' exceeds record length'
               ELSE
               IF WS-HEADER(WS-SUB1) = SPACE
                 IF REPORTI-RCD(WS-SUB2: WS-HDR-LEN) = SPACE
                     MOVE 'Y'   TO WS-T-LINES(WS-SUB1)(WS-T-LN: 1)
                 ELSE
                     MOVE 'N'   TO WS-T-LINES(WS-SUB1)(WS-T-LN: 1)
               ELSE
               IF REPORTI-RCD(WS-SUB2: WS-HDR-LEN) = SPACE
                   MOVE SPACE   TO WS-T-LINES(WS-SUB1)(WS-T-LN: 1)
               ELSE
               IF REPORTI-RCD(WS-SUB2: WS-HDR-LEN)
                   = WS-HEADER(WS-SUB1)(1: WS-HDR-LEN)
                   MOVE WS-SUB2               TO WS-HDR-POS
                   PERFORM 1800-SHOW-TOT
                   MOVE 'Y'     TO WS-T-LINES(WS-SUB1)(WS-T-LN: 1)
               ELSE
                   MOVE 'N'     TO WS-T-LINES(WS-SUB1)(WS-T-LN: 1).

       1800-INIT-TOTALS-WORK-FIELDS.
           MOVE ZERO                          TO WS-END-HDR.
           MOVE ZERO                          TO WS-HDR-LEN.

           IF WS-HEADER(WS-SUB1) = SPACE
               MOVE ZERO                      TO WS-HDR-LEN
           ELSE
               MOVE WS-HEADER(WS-SUB1)        TO WS-HOLD-FIELD
               PERFORM 1900-DETERMINE-FIELD-LEN
               MOVE WS-HOLD-LEN               TO WS-HDR-LEN.
           IF WS-GAP(WS-SUB1) > ZERO
               MOVE WS-GAP(WS-SUB1)           TO WS-HDR-LEN.
           COMPUTE WS-END-HDR = WS-RECORD-MAX - WS-HDR-LEN.

       1800-SHOW-TOT.
           IF WS-LS-TEST = '3'
               DISPLAY WS-STARS ' Record  ' WS-READ-REPORTI-CNT
                       '  ' WS-GROUP(WS-SUB1)
                       '  ' WS-TITLE ' ' WS-HEADER(WS-SUB1)
               DISPLAY '   Page    ' WS-PAGE
                       '            Length     ' WS-HDR-LEN
               DISPLAY '   Line    ' WS-RPT-LINE
                       '                Position   ' WS-HDR-POS.

       1900-DETERMINE-FIELD-LEN.
           PERFORM VARYING WS-STR1 FROM 50 BY -1
               UNTIL WS-STR1 < 1
               IF WS-HOLD-FIELD(WS-STR1: 1) = SPACE
                   CONTINUE
               ELSE
                   MOVE WS-STR1               TO WS-HOLD-LEN
                   MOVE ZERO                  TO WS-STR1
               END-IF
           END-PERFORM.

       1900-ROLLUP-TOTALS-IN-TABLE.
           IF WS-TYPE(WS-SUB1) = 'T'
             IF WS-MATCH(WS-SUB1) = 'Y'
               IF WS-ALL-LAST(WS-SUB1) = 'L'
                   PERFORM 1900-ROLLUP-L-GROUPS
                       VARYING WS-STR2 FROM 1 BY 1
                       UNTIL WS-STR2 > WS-SUB(WS-SUB1)
               ELSE
                   PERFORM 1900-ROLLUP-A-GROUPS
                       VARYING WS-STR2 FROM 1 BY 1
                       UNTIL WS-STR2 > WS-SUB(WS-SUB1).

       1900-ROLLUP-L-GROUPS.
           IF WS-PAGE = WS-LAST-PG(WS-SUB1, WS-STR2)
               PERFORM 1900-INSPECT-T-LINES.

       1900-ROLLUP-A-GROUPS.
           IF WS-PAGE < WS-FIRST-PG(WS-SUB1, WS-STR2)
               CONTINUE
           ELSE
           IF WS-PAGE > WS-LAST-PG(WS-SUB1, WS-STR2)
               CONTINUE
           ELSE
               PERFORM 1900-INSPECT-T-LINES.


      *---------------------------------------
      *    records submitted to sort reflect pages to skip, either
      *    individual pages or the whole group.  however, we need to
      *    let the return-sort section know when the combination
      *    "all pages" and "group" is specified, since the first few
      *    pages in a group might have zero totals but a later page
      *    might not.
      *
      *    in the return-sort section, we need to know BEFORE processing
      *    the first page of a group as to whether the whole group
      *    should be supressed.  we do this by sending records with
      *    SR-PAGE = zero.  these will sort above the other records.
      *---------------------------------------
       1900-INSPECT-T-LINES.
           MOVE ZERO                          TO WS-TALLY.
           INSPECT WS-T-LINES(WS-SUB1) TALLYING WS-TALLY
                FOR ALL 'N'.

           IF WS-LS-TEST = '2' OR '3'
               DISPLAY '   T array:         ' WS-GROUP(WS-SUB1)
                       ' |' WS-T-LINES(WS-SUB1) '|'
                       '  ' WS-PAGE.
           MOVE SPACE                         TO WS-T-LINES(WS-SUB1).

      *    tally=zero means all found totals on page were blank/zero
           IF WS-TALLY = ZERO
               MOVE WS-GROUP(WS-SUB1)         TO SR-GROUP
               MOVE WS-FIRST-PG(WS-SUB1, WS-STR2) TO SR-FIRST-PAGE
               MOVE WS-LAST-PG(WS-SUB1, WS-STR2)  TO SR-LAST-PAGE
               MOVE WS-PAGE                   TO SR-PAGE
               MOVE WS-ALL-LAST(WS-SUB1)      TO SR-ALL-LAST
               MOVE WS-SUPP-I-G(WS-SUB1)      TO SR-SUPP-I-G
               PERFORM 1900-SEND-TO-SORT
           ELSE
      *    tally not zero means some total on page was non-zero
           IF WS-ALL-LAST(WS-SUB1) = 'A'
             IF WS-SUPP-I-G(WS-SUB1) = 'G'
                 MOVE WS-GROUP(WS-SUB1)       TO SR-GROUP
                 MOVE WS-FIRST-PG(WS-SUB1, WS-STR2)  TO SR-FIRST-PAGE
                 MOVE WS-LAST-PG(WS-SUB1, WS-STR2)   TO SR-LAST-PAGE
                 MOVE ZERO                    TO SR-PAGE
                 MOVE WS-ALL-LAST(WS-SUB1)    TO SR-ALL-LAST
                 MOVE WS-SUPP-I-G(WS-SUB1)    TO SR-SUPP-I-G
                 PERFORM 1900-SEND-TO-SORT.

      *---------------------------------------
      *    track highest repeat search group for informational purposes
      *---------------------------------------
       1900-FIND-HIGHEST-GROUP.
           IF WS-SUB(WS-SUB1) > WS-HIGH-SUB
               MOVE WS-SUB(WS-SUB1)           TO WS-HIGH-SUB.

       1900-SEND-TO-SORT.
           MOVE SPACE                         TO SR-FILL1 SR-FILL2.
           MOVE SPACE                         TO SR-FILL3 SR-FILL4.
           IF WS-LS-TEST = '3'
               DISPLAY '   Pre sort:        ' SORT-RECORD.
           RELEASE SORT-RECORD.

      ****************************************
      ****************************************
      ****************************************

      *---------------------------------------
      *    third loop through input report file
      *
      *    based on return-sort records, determine if we should
      *    skip all pages for a group, or individual pages.
      *---------------------------------------
       2000-SORT-OUT.
           MOVE ZERO                          TO WS-READ-REPORTI-CNT.
           MOVE 'N'                           TO WS-END-REPORTI-SW.
           MOVE 'Y'                           TO WS-READ-REPORTI-SW.
           MOVE 'Y'                           TO WS-RETURN-SORT-SW.
           MOVE ZERO                          TO WS-PAGE.
           IF WS-RETURN-CODE = ZERO
               PERFORM 0300-CLOSE-REPORTI
               PERFORM 0200-OPEN-INPUT-REPORTI
               IF WS-RETURN-CODE = ZERO
                   PERFORM 2000-REPORTI-THIRD-LOOP THRU
                           2000-REPORTI-THIRD-LOOP-EXIT
                   DISPLAY '                '.

       2000-REPORTI-THIRD-LOOP.
           IF WS-READ-REPORTI-SW = 'Y'
               PERFORM 1100-READ-REPORTI.
           IF WS-RETURN-SORT-SW = 'Y'
             IF MORE-SORT-RCDS
                 PERFORM 2200-RETURN-SORT.

           IF WS-READ-REPORTI-SW = 'Y'
             IF REPORTI-RCD(1: 1) = '1'
                 ADD 1                        TO WS-PAGE.

           MOVE 'N'                           TO WS-READ-REPORTI-SW.
           MOVE 'N'                           TO WS-RETURN-SORT-SW.
           MOVE SPACE                         TO WS-WRITE-OR-SKIP-SW.

           IF END-OF-REPORTI
               GO TO 2000-REPORTI-THIRD-LOOP-EXIT.

           IF REPORTI-RCD(1: 1) = '1'
             IF WS-PAGE > WS-HOLD-LAST-PG
               IF MORE-SORT-RCDS
                   MOVE 'Y'                   TO WS-RETURN-SORT-SW
                   MOVE SPACE                 TO WS-KEEP-GROUP-SW
                   GO TO 2000-REPORTI-THIRD-LOOP.

           IF WS-PAGE < WS-HOLD-FIRST-PG
               MOVE 'W'                       TO WS-WRITE-OR-SKIP-SW
           ELSE
           IF WS-PAGE > WS-HOLD-LAST-PG
               MOVE 'W'                       TO WS-WRITE-OR-SKIP-SW
           ELSE
           IF WS-SR-ALL-LAST = 'L'
               CONTINUE
           ELSE
           IF WS-HOLD-PG = ZERO
             IF MORE-SORT-RCDS
                 MOVE 'Y'                     TO WS-KEEP-GROUP-SW
                 MOVE 'Y'                     TO WS-RETURN-SORT-SW
                 GO TO 2000-REPORTI-THIRD-LOOP
             ELSE
                 MOVE 'W'                     TO WS-WRITE-OR-SKIP-SW
           ELSE
           IF WS-KEEP-GROUP-SW = 'Y'
               MOVE 'W'                       TO WS-WRITE-OR-SKIP-SW
           ELSE
           IF WS-SR-SUPP-I-G = 'I'
             IF WS-PAGE < WS-HOLD-PG
                 MOVE 'W'                     TO WS-WRITE-OR-SKIP-SW
             ELSE
             IF WS-PAGE > WS-HOLD-PG
               IF MORE-SORT-RCDS
                   MOVE 'Y'                   TO WS-RETURN-SORT-SW
                   GO TO 2000-REPORTI-THIRD-LOOP
               ELSE
                   MOVE 'W'                   TO WS-WRITE-OR-SKIP-SW.

           IF WS-WRITE-OR-SKIP-SW = 'W'
               MOVE REPORTI-RCD               TO REPORTO-RCD
               PERFORM 2400-WRITE-REPORTO
           ELSE
               MOVE REPORTI-RCD               TO REPORTD-RCD
               PERFORM 2400-WRITE-REPORTD
               IF REPORTI-RCD(1: 1) = '1'
                   ADD 1                      TO WS-SKIP-PAGE-CNT.

           MOVE 'Y'                           TO WS-READ-REPORTI-SW.
           GO TO 2000-REPORTI-THIRD-LOOP.

       2000-REPORTI-THIRD-LOOP-EXIT. EXIT.

       2200-RETURN-SORT.
           RETURN SORT-REPORTI
               AT END
                   MOVE 'Y'                   TO WS-END-SORT-SW.
           IF MORE-SORT-RCDS
               ADD 1                          TO WS-SORT-RCD-CNT
               MOVE SR-GROUP                  TO WS-SR-GROUP
               MOVE SR-FIRST-PAGE             TO WS-HOLD-FIRST-PG
               MOVE SR-LAST-PAGE              TO WS-HOLD-LAST-PG
               MOVE SR-PAGE                   TO WS-HOLD-PG
               MOVE SR-ALL-LAST               TO WS-SR-ALL-LAST
               MOVE SR-SUPP-I-G               TO WS-SR-SUPP-I-G
               IF WS-LS-TEST NUMERIC
                   DISPLAY '   Post sort:       ' SORT-RECORD.

       2400-WRITE-REPORTO.
           WRITE REPORTO-RECORD.
           IF WS-STAT = ZERO
               ADD 1                          TO WS-WRITE-REPORTO-CNT
           ELSE
               DISPLAY '**** XLT04660 write error on REPORTO'
               DISPLAY '**** File stat           ' WS-STAT
               MOVE +2400                     TO WS-RETURN-CODE.

       2400-WRITE-REPORTD.
           WRITE REPORTD-RECORD.
           IF WS-STAT = ZERO
               ADD 1                          TO WS-SKIP-LINE-CNT
           ELSE
               DISPLAY '**** XLT04660 write error on REPORTD'
               DISPLAY '**** File stat           ' WS-STAT
               MOVE +2400                     TO WS-RETURN-CODE.

      ************************************ END XLT04660
