
       TITLE '  MIS0400B: validate Cobol compiles '.
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    MIS0400B.
      ******************************************************************
      *@@@ II edit Cobol programs for invalid commands
      ******************************************************************
      *
      *  I am interested in knowing if/where these programs
      *  are in use.     Email:  jiannon@me.com
      *
      ******************************************************************
      * Date written: 10/11/94
      * Author      : Jim Iannone
      *               Loop through Cobol program source searching for
      *               Cobol II commands such as 'inspect' and 'string'.
      *               Notify the user that such commands are present
      *               in what should be OS/VS Cobol source.
      *               Either the source should be changed or the
      *               wrong compiler was accidently used.
      *               Also check program for called programs compiled
      *               using older versions of cobol, or vice versa,
      *               based on manual entries in the input parm.
      ******************************************************************

       ENVIRONMENT DIVISION.

       CONFIGURATION SECTION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.

           SELECT INPROG               ASSIGN TO INPROG
                                       ORGANIZATION IS SEQUENTIAL
                                       ACCESS MODE IS SEQUENTIAL
                                       FILE STATUS IS WS-STAT.

           SELECT PARM01               ASSIGN TO PARM01
                                       ORGANIZATION IS SEQUENTIAL
                                       ACCESS MODE IS SEQUENTIAL
                                       FILE STATUS IS WS-STAT.

       DATA DIVISION.
       FILE SECTION.

       FD  INPROG
           RECORDING MODE F
           BLOCK CONTAINS 0.
       01  INPROG-RECORD.
           05  INPROG-AREA             PIC  X(80).
           05  FILLER REDEFINES INPROG-AREA.
               10  FILLER              PIC  X(06).
               10  INPROG-COMMENT      PIC  X.
               10  INPROG-LINE         PIC  X(65).
               10  FILLER              PIC  X(08).
           05  FILLER REDEFINES INPROG-AREA.
               10  FILLER              PIC  X(07).
               10  INPROG-LINKAGE      PIC  X(07).
               10  FILLER REDEFINES INPROG-LINKAGE.
                   15  INPROG-TITLE    PIC  X(05).
                   15  FILLER          PIC  XX.
               10  FILLER              PIC  X(66).

       FD  PARM01
           RECORDING MODE F
           BLOCK CONTAINS 0.
       01  PARM01-RECORD.
           05  PARM01-FLAG             PIC  X.
           05  PARM01-LEVEL            PIC  X(08).
           05  FILLER                  PIC  X.
           05  PARM01-SW1              PIC  X.
           05  PARM01-SW2              PIC  X.
           05  PARM01-SW3              PIC  X.
           05  PARM01-SW4              PIC  X.
           05  FILLER                  PIC  X.
           05  PARM01-LEN              PIC  XX.
           05  FILLER                  PIC  X.
           05  PARM01-POS              PIC  XX.
           05  FILLER                  PIC  X.
           05  PARM01-DATA             PIC  X(20).
           05  FILLER                  PIC  X.
           05  PARM01-MSG              PIC  X(30).
           05  FILLER                  PIC  X(08).

       WORKING-STORAGE SECTION.

       01  WS-START.
           05  FILLER                  PIC  X(32)    VALUE
               ' Working storage MIS0400B start '.

       01  WS-WORK-FIELDS.
           05  WS-STAT                 PIC  99       VALUE ZERO.
           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.
           05  WS-LENGTH               PIC  99       VALUE ZERO.
           05  WS-POSITION             PIC  99       VALUE ZERO.

       01  WS-COUNT-FIELDS             COMP-3.
           05  WS-READ-RCD-CNT         PIC S9(07)    VALUE ZERO.

       01  WS-SUBSCRIPTS               COMP.
           05  WS-SUB1                 PIC S9(05)    VALUE ZERO.
           05  WS-SUB2                 PIC S9(05)    VALUE ZERO.
           05  WS-PARM01-MAX           PIC S9(05)    VALUE ZERO.

       01  WS-SWITCHES.
           05  WS-END-INPROG-SW        PIC  X        VALUE 'N'.
               88  END-OF-INPROG                     VALUE 'Y'.
               88  MORE-INPROG-RCDS                  VALUE 'N'.
           05  WS-ENVIRON-SW           PIC  X        VALUE SPACE.
           05  WS-WORKING-SW           PIC  X        VALUE SPACE.
           05  WS-LINKAGE-SW           PIC  X        VALUE SPACE.
           05  WS-PROCEDURE-SW         PIC  X        VALUE SPACE.

       01  WS-TABLES.
           05  WS-PARM-TABLE.
               10  WS-PARM             OCCURS 120 TIMES.
                   15  WS-LEVEL        PIC  X(08).
                   15  WS-SW1          PIC  X.
                   15  WS-SW2          PIC  X.
                   15  WS-SW3          PIC  X.
                   15  WS-SW4          PIC  X.
                   15  WS-LEN          PIC  XX.
                   15  WS-POS          PIC  XX.
                   15  WS-DATA         PIC  X(20).
                   15  WS-MSG          PIC  X(30).

       01  WS-END.
           05  FILLER                  PIC  X(16)    VALUE
               '  MIS0400B END  '.


       LINKAGE SECTION.

       01  PARM-FIELD.
           05  PARM-LENGTH             PIC S9(04)    COMP.
           05  PARM-LEVEL              PIC  X(08).
           05  PARM-PROG               PIC  X(08).

      /
       PROCEDURE DIVISION USING PARM-FIELD.

       0100-PROGRAM-ENTRY.
           DISPLAY '     '.
           DISPLAY '**** MIS0400B inspect for cobol program issues'.
           IF PARM-LEVEL = 'SKIP    '
               STOP RUN.
           PERFORM 0200-OPEN-FILES.

           IF WS-RETURN-CODE = ZERO
               PERFORM 0400-PROCESS-INPROG.

           DISPLAY '**** Lines in ' PARM-PROG '  ' WS-READ-RCD-CNT.
           DISPLAY '**** Compile type is ' PARM-LEVEL.

           IF WS-RETURN-CODE = ZERO OR 0200
               PERFORM 0300-CLOSE-FILES.
           IF WS-RETURN-CODE NOT = ZERO
               DISPLAY '**** MIS0400B cond code ' WS-RETURN-CODE
                       ' sent by program'
               MOVE WS-RETURN-CODE            TO RETURN-CODE.

           DISPLAY '**** MIS0400B EOJ encountered '.
           DISPLAY '     '.

           STOP RUN.

       0200-OPEN-FILES.
           OPEN INPUT  INPROG.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** MIS0400B open error on INPROG'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0100                     TO WS-RETURN-CODE.
           OPEN INPUT  PARM01.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** MIS0400B open error on PARM01'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0100                     TO WS-RETURN-CODE.

       0300-CLOSE-FILES.
           CLOSE PARM01.
           CLOSE INPROG.

       0400-PROCESS-INPROG.
           PERFORM
               VARYING WS-SUB2 FROM 1 BY 1
               UNTIL WS-SUB2 > 120
               MOVE SPACE                     TO WS-PARM(WS-SUB2)
           END-PERFORM.
           PERFORM 0500-GET-PARM01 THRU
                   0500-GET-PARM01-EXIT.

           IF WS-RETURN-CODE = ZERO
               PERFORM 0600-READ-INPROG
                   UNTIL END-OF-INPROG.
           IF WS-RETURN-CODE = ZERO
               PERFORM 1100-FIND-NOT-FOUND
                   VARYING WS-SUB2 FROM 1 BY 1
                   UNTIL WS-SUB2 > WS-PARM01-MAX.

       0500-GET-PARM01.
           READ PARM01.
           IF WS-STAT = 10
               GO TO 0500-GET-PARM01-EXIT
           ELSE
           IF WS-STAT > ZERO
               DISPLAY '**** MIS0400B read error on PARM01'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0500                     TO WS-RETURN-CODE
               GO TO 0500-GET-PARM01-EXIT.

           IF PARM01-FLAG = '*'
               GO TO 0500-GET-PARM01.
           IF PARM01-LEVEL = SPACE
               DISPLAY '**** MIS0400B parm Cobol type not found'
               GO TO 0500-GET-PARM01-EXIT.
           IF PARM01-LEN NOT NUMERIC
               DISPLAY '**** MIS0400B parm length not numeric'
               GO TO 0500-GET-PARM01-EXIT.
           IF PARM01-POS NOT NUMERIC
               DISPLAY '**** MIS0400B parm position not numeric'
               GO TO 0500-GET-PARM01-EXIT.
           IF WS-PARM01-MAX < 120
               ADD 1                      TO WS-PARM01-MAX
               MOVE PARM01-LEVEL          TO WS-LEVEL (WS-PARM01-MAX)
               MOVE PARM01-SW1            TO WS-SW1 (WS-PARM01-MAX)
               MOVE PARM01-SW2            TO WS-SW2 (WS-PARM01-MAX)
               MOVE PARM01-SW3            TO WS-SW3 (WS-PARM01-MAX)
               MOVE PARM01-SW4            TO WS-SW4 (WS-PARM01-MAX)
               MOVE PARM01-DATA           TO WS-DATA (WS-PARM01-MAX)
               MOVE PARM01-MSG            TO WS-MSG (WS-PARM01-MAX)
               MOVE PARM01-POS            TO WS-POS (WS-PARM01-MAX)
               MOVE PARM01-LEN            TO WS-LEN (WS-PARM01-MAX).

           GO TO 0500-GET-PARM01.

       0500-GET-PARM01-EXIT. EXIT.

       0600-READ-INPROG.
           READ INPROG.
           IF WS-STAT = ZERO
               ADD 1                          TO WS-READ-RCD-CNT
               PERFORM 0700-SELECT THRU
                       0700-SELECT-EXIT
           ELSE
           IF WS-STAT = 10
               MOVE 'Y'                       TO WS-END-INPROG-SW
           ELSE
               DISPLAY '**** MIS0400B read error on INPROG '
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0100                     TO WS-RETURN-CODE.

       0700-SELECT.
           IF INPROG-LINE = SPACE
               GO TO 0700-SELECT-EXIT.
           IF INPROG-LINKAGE = 'ENVIRON'
               MOVE 'Y'                       TO WS-ENVIRON-SW
           ELSE IF INPROG-LINKAGE = 'WORKING'
               MOVE 'Y'                       TO WS-WORKING-SW
           ELSE IF INPROG-LINKAGE = 'LINKAGE'
               MOVE 'Y'                       TO WS-LINKAGE-SW
           ELSE IF INPROG-LINKAGE = 'PROCEDU'
               MOVE 'Y'                       TO WS-PROCEDURE-SW
               MOVE 'Y'                       TO WS-LINKAGE-SW.

           PERFORM 0900-LOOP-THRU-PARM THRU
                   0900-LOOP-THRU-PARM-EXIT
                   VARYING WS-SUB2 FROM 1 BY 1
                   UNTIL WS-SUB2 > WS-PARM01-MAX.

       0700-SELECT-EXIT. EXIT.

      ****************************************
      *    It is important that 'C' records  (PARM01-SW1 = C)
      *    be at the top of the parm.  Having this skip for
      *    the commented records will reduce total I/O.
      *    The 'C' allows for searches through commented lines.
      ****************************************
       0900-LOOP-THRU-PARM.
           IF INPROG-COMMENT = '*' OR '-'
               IF WS-SW1(WS-SUB2) NOT = 'C'
                   MOVE WS-PARM01-MAX         TO WS-SUB2
                   GO TO 0900-LOOP-THRU-PARM-EXIT.
      ****************************************
      *    ENVIRONMENT SW   perform search when 1=ON / 2=OFF
      *    WORKING SW       perform search when 3=ON / 4=OFF
      *    LINKAGE SW       perform search when 5=ON / 6=OFF
      *    PROCEDURE SW     perform search when 7=ON / 8=OFF
      ****************************************
           IF WS-PROCEDURE-SW = 'Y'
               AND WS-SW2(WS-SUB2) = '8'
               GO TO 0900-LOOP-THRU-PARM-EXIT
           ELSE IF WS-PROCEDURE-SW = SPACE
               AND WS-SW2(WS-SUB2) = '7'
               GO TO 0900-LOOP-THRU-PARM-EXIT
           ELSE IF WS-LINKAGE-SW = 'Y'
               AND WS-SW2(WS-SUB2) = '6'
               GO TO 0900-LOOP-THRU-PARM-EXIT
           ELSE IF WS-LINKAGE-SW = SPACE
               AND WS-SW2(WS-SUB2) = '5'
               GO TO 0900-LOOP-THRU-PARM-EXIT
           ELSE IF WS-WORKING-SW = 'Y'
               AND WS-SW2(WS-SUB2) = '4'
               GO TO 0900-LOOP-THRU-PARM-EXIT
           ELSE IF WS-WORKING-SW = SPACE
               AND WS-SW2(WS-SUB2) = '3'
               GO TO 0900-LOOP-THRU-PARM-EXIT
           ELSE IF WS-ENVIRON-SW = 'Y'
               AND WS-SW2(WS-SUB2) = '2'
               GO TO 0900-LOOP-THRU-PARM-EXIT
           ELSE IF WS-ENVIRON-SW = SPACE
               AND WS-SW2(WS-SUB2) = '1'
               GO TO 0900-LOOP-THRU-PARM-EXIT.

           IF WS-LEVEL(WS-SUB2) NOT = 'ALL     '
               IF PARM-LEVEL NOT = WS-LEVEL(WS-SUB2)
                   GO TO 0900-LOOP-THRU-PARM-EXIT.

           MOVE WS-LEN(WS-SUB2)               TO WS-LENGTH.
           IF WS-POS(WS-SUB2) > ZERO
               MOVE WS-POS(WS-SUB2)           TO WS-POSITION
               MOVE WS-POSITION               TO WS-SUB1
               PERFORM 1000-SEARCH-RCD THRU
                       1000-SEARCH-RCD-EXIT
           ELSE
               PERFORM 1000-SEARCH-RCD THRU
                       1000-SEARCH-RCD-EXIT
                       VARYING WS-SUB1 FROM 7 BY 1
                       UNTIL WS-SUB1 > 64.

       0900-LOOP-THRU-PARM-EXIT. EXIT.

      ****************************************
      *    test for the word anywhere in the line
      ****************************************
       1000-SEARCH-RCD.
           IF INPROG-RECORD(WS-SUB1: WS-LENGTH) =
               WS-DATA(WS-SUB2)(1: WS-LENGTH)
               IF WS-SW4(WS-SUB2) = 'Y' OR 'F'
                   MOVE 'F'                   TO WS-SW4(WS-SUB2)
                   IF WS-SW3(WS-SUB2) = 'N'
                       MOVE 64                TO WS-SUB1
                   ELSE
                       MOVE 64                TO WS-SUB1
                       MOVE +0200             TO WS-RETURN-CODE
               ELSE
                   DISPLAY '**** ' Parm-prog ': ' WS-MSG(WS-SUB2)
                           '  Line: ' WS-READ-RCD-CNT
                   IF WS-SW3(WS-SUB2) = 'N'
                       MOVE 64                TO WS-SUB1
                   ELSE
                       MOVE 64                TO WS-SUB1
                       MOVE +0200             TO WS-RETURN-CODE
           ELSE
      ****************************************
      *    test for the word at the front of the line
      ****************************************
           IF WS-SW1(WS-SUB2) = 'F'
               IF INPROG-RECORD(WS-SUB1: 1) > SPACE
                   MOVE 64                    TO WS-SUB1.

       1000-SEARCH-RCD-EXIT. EXIT.

      ****************************************
      *    loop through PARM01 array to determine, after the fact,
      *    if any strings were not found that should have been found.
      ****************************************
       1100-FIND-NOT-FOUND.
           IF WS-SW4(WS-SUB2) = 'Y'
               IF PARM-LEVEL = WS-LEVEL(WS-SUB2)
                   OR WS-LEVEL(WS-SUB2) = 'ALL     '
                   DISPLAY '**** ' PARM-PROG ': ' WS-MSG(WS-SUB2)
                   IF WS-SW3(WS-SUB2) = 'N'
                       CONTINUE
                   ELSE
                       MOVE +0200                 TO WS-RETURN-CODE.

      ************************************ END MIS0400B
