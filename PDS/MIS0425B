
       TITLE '  MIS0425B: UPDATE DATES IN STATIC PARM'.
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    MIS0425B.
      ************************************************************CX003B
      *@@@ C3 update dates and other data in static parm
      ******************************************************************
      *
      *  I am interested in knowing if/where these programs
      *  are in use.     Email:  jiannon@me.com
      *
      ******************************************************************
      * Date written: 08/11/95
      * Author      : Jim Iannone
      *               Given the type of date, position of the date
      *               in the record, and the record number, update
      *               a static parm or other 80 byte record with
      *               the date passed in the linkage section
      *               (which, if desired, may be obtained using
      *               input from MIS0500B).
      *
      *               Non-date data may be placed in the static
      *               parm as well - see examples below.
      *--------------------------------------------------------------
      *
      *    MIS0425B can also calculate the date, in which case a
      *    previous update job is not required.
      *    pass the following MIS0500B values and MIS0425B
      *    will calculate the date:
      *        CMDX   CMF###   CMFE##   CMFEY#
      *               CMD###   CMDE##   CMDEY#
      *
      *    static parm 'offset' will allow an offset to
      *    the current date if processing falls behind.
      *
      *--------------------------------------------------------------
      *
      *    example of symbolic passed in linkage section:
      *
      *    in JCL:   PARMFX='MDC1012001NCMD002'
      *    in JCL:   PARM='&PARMFX/',
      *    result    current date (19981209) minus 2 days:
      *              12/07/1998 in pos 12 of 1st record
      *
      *--------------------------------------------------------------
      *
      *    example of input date passed in linkage section:
      *
      *    in JCL:   PARMFX='YMD0820002N',CMDX='19950811'
      *    in JCL:   PARM='&PARMFX&CMDX/',
      *    result    95/08/11 in pos 20 of 2nd record
      *
      *    in JCL:   PARMFX='MDC1012001N',CMDX='19950811'
      *    in JCL:   PARM='&PARMFX&CMDX/',
      *    result    08/11/1995 in pos 12 of 1st record
      *
      *    in JCL:   PARMFX='DMY0614001N',EOMDATE='08/31/95'
      *    in JCL:   PARM='&PARMFX&EOMDATE/'
      *    result    310895 in pos 14 of 1st record
      *
      *    in JCL:   PARMFX='CMD0415001N',CURREOM='08/31/95'
      *    in JCL:   PARM='&PARMFX&CURREOM/'
      *    result    1995 in pos 15 of 1st record
      *
      *    in JCL:   PARMFX='YMD0206123N',YESTDAY='08/31/95'
      *    in JCL:   PARM='&PARMFX&YESTDAY/'
      *    result    95 in pos 6 of 123rd record
      *
      *    in JCL:   PARMFX='HMS0506123N',HMSX=13213,
      *    in JCL:   PARM='&PARMFX&HMSX/'
      *    result    13:21 in pos 6 of 123rd record
      *
      *    in JCL:   PARMFX='JUL0509004N',CMDX='19951019'
      *    in JCL:   PARM='&PARMFX&CMDX/'
      *    result    95292 in pos 9 of 4th record
      *
      *    in JCL:   PARMFX='JUL0608006N',CMDE02='19950630'
      *    in JCL:   PARM='&PARMFX&CMDE02/'
      *    result    95/181 in pos 8 of 6th record
      *
      *    in JCL:   PARMFX='JUL0708006N',CMDX='19951019'
      *    in JCL:   PARM='&PARMFX&CMDX/'
      *    result    1995292 in pos 8 of 6th record
      *
      *    in JCL:   PARMFX='JUL0811009N',CMDEY1='19941231'
      *    in JCL:   PARM='&PARMFX&CMDEY1/'
      *    result    1994/365 in pos 11 of 9th record
      *
      *    Rules: 1  the date may only be passed in mm/dd/yy
      *              or ccyymmdd format
      *           2  format must be cmd,mdc,dmc,ymd,mdy,dmy,jul
      *           3  ymd,mdy,dmy: length must be 02,04,05,06,08
      *              cmd,mdc,dmc: length must be 04,06,07,08,10
      *              jul: length must be 03,05,06,07,08
      *           4  (position + length - 1) cannot exceed 72
      *           5  if a time: length must be 02,04,05,06,07,08
      *                         must be passed in hhmms format
      *
      *
      *    note: to update multiple dates in a static parm, simply
      *          run this job more than once against the same parm,
      *          using different dates and/or format options,
      *          or use CHNGFILE
      *--------------------------------------------------------------
      *
      *    other types of data may be passed to a 80 byte record
      *    as well:  simply place 'XXX' in the parm-seq field
      *    and place the length of the data being passed in the
      *    the parm-len field.
      *
      *    example of non-date data passed in linkage section:
      *
      *    in JCL:   PARMFX='XXX0420002N',DATA='PRGB'
      *    in JCL:   PARM='&PARMFX&DATA/',
      *    result    PRGB is placed in pos 20 of 2nd record
      *
      *    Rules: 1  format must be 'XXX'
      *           2  (position + length - 1) cannot exceed 72
      *           3  if length is greater than actual string length:
      *              - '/' is included at end of string
      *              - following that, low values are appended until
      *                  stated length is reached
      *--------------------------------------------------------------
      *
      *    condition code logic has been removed.  use MIS0685B.
      *
      ******************************************************************

       ENVIRONMENT DIVISION.

       CONFIGURATION SECTION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.

           SELECT PARMFX               ASSIGN TO PARMFX
                                       ORGANIZATION IS SEQUENTIAL
                                       ACCESS MODE IS SEQUENTIAL
                                       FILE STATUS IS WS-STAT.

           SELECT OFFSET               ASSIGN TO OFFSET
                                       ORGANIZATION IS SEQUENTIAL
                                       ACCESS MODE IS SEQUENTIAL
                                       FILE STATUS IS WS-STAT.

       DATA DIVISION.
       FILE SECTION.

       FD  PARMFX
           RECORDING MODE F.
       01  PARMFX-RECORD.
           05  FILLER                  PIC  X(72).
           05  FILLER                  PIC  X(08).

       FD  OFFSET
           RECORDING MODE F.
       01  OFFSET-RECORD.
           05  OFFSET-DOCU             PIC  X.
           05  OFFSET-AMOUNT.
               10  OFFSET-PAST-FUT     PIC  X.
               10  OFFSET-OFFSET       PIC  X(05).
           05  FILLER                  PIC  X(10).
           05  OFFSET-BATCH-SW         PIC  X.
           05  FILLER                  PIC  X(62).

       WORKING-STORAGE SECTION.

       01  WS-START.
           05  FILLER                  PIC  X(32)    VALUE
               ' Working storage MIS0425B start '.

       01  WS-WORK-FIELDS.
           05  WS-STAT                 PIC  99       VALUE ZERO.
           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.
           05  WS-POS-N                PIC  999      VALUE ZERO.
           05  WS-LEN-N                PIC  999      VALUE ZERO.
           05  WS-SUM-N                PIC  9(04)    VALUE ZERO.
           05  WS-CODE-N               PIC  9(04)    VALUE ZERO.
           05  WS-FLAG-N               PIC  9        VALUE ZERO.
           05  WS-1-CYMD               PIC  X(08)    VALUE SPACE.
           05  FILLER REDEFINES WS-1-CYMD.
               10  WS-1-CYMD-CC        PIC  99.
               10  WS-1-CYMD-YY        PIC  99.
               10  WS-1-CYMD-MM        PIC  99.
               10  WS-1-CYMD-DD        PIC  99.
           05  WS-1-MDY                PIC  X(06)    VALUE SPACE.
           05  FILLER REDEFINES WS-1-MDY.
               10  WS-1-MDY-MM         PIC  99.
               10  WS-1-MDY-DD         PIC  99.
               10  WS-1-MDY-YY         PIC  99.
           05  WS-1-HMS                PIC  X(06)    VALUE SPACE.
           05  WS-2-HMS                PIC  X(06)    VALUE SPACE.
           05  WS-DATA                 PIC  X(72)    VALUE SPACE.
           05  WS-OFFSET               PIC  X(06)    VALUE SPACE.
           05  WS-CALL-STV0400B        PIC  X(08)    VALUE 'STV0400B'.

       01  WS-COUNT-FIELDS             COMP-3.
           05  WS-READ-RCD-CNT         PIC S9(07)    VALUE ZERO.
           05  WS-RCD-N                PIC S9(07)    VALUE ZERO.

       01  WS-SWITCHES.
           05  WS-END-PARMFX-SW        PIC  X        VALUE 'N'.
               88  END-OF-PARMFX                     VALUE 'Y'.
               88  MORE-PARMFX-RCDS                  VALUE 'N'.
           05  WS-REWRITE-SW           PIC  X        VALUE SPACE.
           05  WS-OFFSET-SW            PIC  X        VALUE SPACE.

      *    return the day of the week given a date in ccyymmdd format
       01  WS-STV0400B-FIELDS.
           05  STV0400B-DATA           PIC  X(10)   VALUE SPACE.
           05  FILLER REDEFINES STV0400B-DATA.
               10  STV0400B-1X6        PIC  X(06).
               10  STV0400B-NBR        PIC  X(04).
           05  FILLER REDEFINES STV0400B-DATA.
               10  STV0400B-1X8        PIC  X(08).
               10  FILLER              PIC  XX.
           05  FILLER REDEFINES STV0400B-DATA.
               10  STV0400B-1X9        PIC  X(09).
               10  STV0400B-DAY-NBR    PIC  X.
           05  STV0400B-DATA2          PIC  X(10)   VALUE SPACE.
           05  STV0400B-IN             PIC  X(06)   VALUE SPACE.
           05  STV0400B-OUT            PIC  X(06)   VALUE SPACE.

       01  WS-END.
           05  FILLER                  PIC  X(16)    VALUE
               '  MIS0425B END  '.

       LINKAGE SECTION.

       01  LS-FIELD.
           05  LS-LENGTH               PIC S9(04)    COMP.
           05  LS-INITIAL              PIC  X(10).
           05  LS-PLACEMENT REDEFINES LS-INITIAL.
               10  LS-SEQ              PIC  XXX.
               10  LS-LEN              PIC  XX.
               10  LS-POS              PIC  XX.
               10  LS-RCD              PIC  XXX.
           05  LS-OFFSET-SW            PIC  X.
           05  LS-DATA                 PIC  X(70).
           05  LS-LONG-DATE REDEFINES LS-DATA.
               10  LS-L1               PIC  XX.
               10  LS-SLASH1           PIC  X.
               10  LS-L2               PIC  XX.
               10  LS-SLASH2           PIC  X.
               10  LS-L3               PIC  XX.
               10  FILLER              PIC  X(62).
           05  LS-SHORT-DATE REDEFINES LS-DATA.
               10  LS-S1               PIC  XX.
               10  LS-S2               PIC  XX.
               10  LS-S3               PIC  XX.
               10  LS-S4               PIC  XX.
               10  FILLER              PIC  X(62).
           05  LS-SYMBOLIC-DATA REDEFINES LS-DATA.
               10  LS-SYMBOL           PIC  X(08).
               10  FILLER              PIC  X(62).
           05  FILLER                  PIC  X.

      /
       PROCEDURE DIVISION USING LS-FIELD.

       0100-PROGRAM-ENTRY.
           DISPLAY '    '.
           DISPLAY '**** MIS0425B place dates into files'.
           PERFORM 0200-OPEN-FILES.

      *---------------------------------------
      *    wherever MIS0425B generates a date (rather than
      *    passing along a parm date), alter the date by
      *    ws-offset amount if requested (parm-offset-sw = y).
      *+--------------------------------------
           MOVE '-00000'                      TO WS-OFFSET.
           MOVE SPACE                         TO WS-OFFSET-SW.
           IF WS-RETURN-CODE = ZERO
               PERFORM 0300-LOAD-OFFSET THRU
                       0300-LOAD-OFFSET-EXIT.
           MOVE SPACE                         TO WS-STV0400B-FIELDS.
           MOVE WS-OFFSET                     TO STV0400B-OUT.
           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.
           MOVE STV0400B-1X8                  TO WS-1-CYMD.

           IF WS-RETURN-CODE = ZERO
               PERFORM 0400-EDIT-PARM THRU
                       0400-EDIT-PARM-EXIT.
           IF WS-RETURN-CODE = ZERO
               IF LS-SEQ = 'XXX'
                   MOVE LS-DATA(1: WS-LEN-N)    TO WS-DATA
               ELSE
               IF LS-SEQ = 'HMS'
                   PERFORM 0500-DETERMINE-TIME
               ELSE
                   PERFORM 0500-DETERMINE-DATE.

           IF WS-RETURN-CODE = ZERO
               PERFORM 0600-READ-PARMFX
                   UNTIL END-OF-PARMFX
               IF WS-READ-RCD-CNT < WS-RCD-N
                   DISPLAY '**** MIS0425B eof before parm rcd found'
                   MOVE 0100                  TO WS-RETURN-CODE
               ELSE
                   DISPLAY '**** Parm records read: ' WS-READ-RCD-CNT.

           IF WS-OFFSET NOT = '-00000'
             IF WS-OFFSET-SW = 'Y'
                 DISPLAY '---> Warning - dates offset by '
                          WS-OFFSET ' days '.
           IF WS-RETURN-CODE = ZERO
               PERFORM 0300-CLOSE-FILES
           ELSE
               DISPLAY '**** MIS0425B cond code ' WS-RETURN-CODE
                       ' sent by program'
               MOVE WS-RETURN-CODE            TO RETURN-CODE.

           DISPLAY '**** MIS0425B EOJ encountered '.
           DISPLAY '    '.

           STOP RUN.

       0200-OPEN-FILES.
           OPEN I-O  PARMFX.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** MIS0425B open error on PARMFX'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0200                     TO WS-RETURN-CODE.
           OPEN INPUT OFFSET.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** MIS0425B open error on OFFSET'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0201                     TO WS-RETURN-CODE.

       0300-CLOSE-FILES.
           CLOSE OFFSET.
           CLOSE PARMFX.

      ****************************************
      *    LOAD OFFSET
      ****************************************
       0300-LOAD-OFFSET.
           READ OFFSET.
           IF WS-STAT = 10
               GO TO 0300-LOAD-OFFSET-EXIT
           ELSE
           IF WS-STAT > ZERO
               DISPLAY '**** MIS0425B read error on OFFSET'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0300                     TO WS-RETURN-CODE
               GO TO 0300-LOAD-OFFSET-EXIT.

           IF OFFSET-DOCU = '*'
               GO TO 0300-LOAD-OFFSET.
           IF OFFSET-OFFSET NUMERIC
             IF LS-OFFSET-SW = 'Y'
                 MOVE OFFSET-AMOUNT           TO WS-OFFSET
             ELSE
                 CONTINUE
           ELSE
               DISPLAY '**** OFFSET amount not numeric '
               MOVE +0301                     TO WS-RETURN-CODE
               GO TO 0300-LOAD-OFFSET-EXIT.

       0300-LOAD-OFFSET-EXIT. EXIT.

       0400-EDIT-PARM.
           IF LS-SEQ = 'YMD' OR 'MDY' OR 'DMY' OR 'XXX' OR 'JUL'
                      OR 'CMD' OR 'MDC' OR 'DMC' OR 'QTR'
                      OR 'HMS'
               CONTINUE
           ELSE
               DISPLAY '**** MIS0425B parm seq error'
               MOVE 0400                      TO WS-RETURN-CODE.

           IF LS-LEN NOT NUMERIC
               DISPLAY '**** MIS0425B parm length not numeric'
               MOVE 0400                      TO WS-RETURN-CODE
           ELSE
           IF LS-SEQ = 'XXX'
               MOVE LS-LEN                    TO WS-LEN-N
           ELSE
           IF LS-SEQ = 'JUL'
               IF LS-LEN = '03' OR '05' OR '06' OR '07' OR '08'
                   MOVE LS-LEN                TO WS-LEN-N
               ELSE
                   DISPLAY '**** MIS0425B JUL parm len = 03, 05-08'
                   MOVE 0400                  TO WS-RETURN-CODE
           ELSE
           IF LS-SEQ = 'CMD' OR 'MDC' OR 'DMC'
               IF LS-LEN = '04' OR '06' OR '07' OR '08' OR '10'
                   MOVE LS-LEN                TO WS-LEN-N
               ELSE
                   DISPLAY '**** MIS0425B parm len = 4,6,7,8,10'
                   MOVE 0400                  TO WS-RETURN-CODE
           ELSE
           IF LS-SEQ = 'QTR'
               IF LS-LEN = '01'
                   MOVE LS-LEN                TO WS-LEN-N
               ELSE
                   DISPLAY '**** MIS0425B parm len = 1 for QTR'
                   MOVE 0400                  TO WS-RETURN-CODE
           ELSE
           IF LS-SEQ = 'HMS'
               IF LS-LEN = '02' OR '04' OR '05' OR '06' OR
                             '07' OR '08'
                   MOVE LS-LEN                TO WS-LEN-N
               ELSE
                   DISPLAY '**** MIS0425B HMS parm len = 2,4,5,6,7,8'
                   MOVE 0400                  TO WS-RETURN-CODE
           ELSE
           IF LS-LEN = '02' OR '04' OR '05' OR '06' OR '08'
               MOVE LS-LEN                    TO WS-LEN-N
           ELSE
               DISPLAY '**** MIS0425B parm len = 2,4,5,6,8'
               MOVE 0400                      TO WS-RETURN-CODE.

           IF LS-POS NOT NUMERIC
               DISPLAY '**** MIS0425B parm position error'
               MOVE 0400                      TO WS-RETURN-CODE
           ELSE
               MOVE LS-POS                    TO WS-POS-N.

           IF WS-RETURN-CODE = ZERO
               COMPUTE WS-SUM-N = WS-LEN-N + WS-POS-N - 1
               IF WS-SUM-N > 72
                   DISPLAY '**** MIS0425B parm total length > 72'
                   MOVE 0400                  TO WS-RETURN-CODE.

           IF LS-RCD NOT NUMERIC
               DISPLAY '**** MIS0425B parm record not numeric'
               MOVE 0400                      TO WS-RETURN-CODE
           ELSE
           IF LS-RCD < '001'
               DISPLAY '**** MIS0425B parm record error'
               MOVE 0400                      TO WS-RETURN-CODE
           ELSE
               MOVE LS-RCD                    TO WS-RCD-N.

      *---------------------------------------
      *    do not reference past last byte passed to program
      *+--------------------------------------
           IF LS-SYMBOL(1: 4) = 'CMDX'
               MOVE SPACE                     TO LS-SYMBOL(5: ).
           IF LS-SYMBOL(1: 3) = 'CMD' OR 'CMF'
               MOVE 'Y'                       TO WS-OFFSET-SW
               MOVE SPACE                     TO WS-STV0400B-FIELDS
               MOVE WS-1-CYMD                 TO STV0400B-1X8
               MOVE 'CYMD  '                  TO STV0400B-IN
               MOVE LS-SYMBOL                 TO STV0400B-OUT
               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS
               MOVE STV0400B-1X8              TO LS-SYMBOL.

           IF LS-SEQ = 'HMS'
               MOVE LS-S1                     TO WS-1-HMS(1: 2)
               MOVE LS-S2                     TO WS-1-HMS(3: 2)
               MOVE LS-S3(1: 1)               TO WS-1-HMS(5: 1)
               MOVE '0'                       TO WS-1-HMS(6: 1)
               MOVE WS-1-HMS                  TO WS-2-HMS
               IF WS-LEN-N > 5
                   CALL 'STV0320B' USING WS-2-HMS
                   IF WS-2-HMS = WS-1-HMS
                       DISPLAY '**** MIS0425B parm time is invalid'
                       MOVE 0400              TO WS-RETURN-CODE
                       GO TO 0400-EDIT-PARM-EXIT
                   ELSE
                       GO TO 0400-EDIT-PARM-EXIT
               ELSE
                   GO TO 0400-EDIT-PARM-EXIT.

           IF LS-SEQ = 'XXX'
               GO TO 0400-EDIT-PARM-EXIT.

           MOVE SPACE                         TO WS-STV0400B-FIELDS.
           IF LS-SLASH1 = '/'
               AND LS-SLASH2 = '/'
               MOVE LS-DATA(1: 8)             TO STV0400B-DATA
               MOVE 'M/D/Y'                   TO STV0400B-IN
               MOVE 'CYMD '                   TO STV0400B-OUT
               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS
               MOVE STV0400B-1X8              TO WS-1-CYMD
           ELSE
               MOVE LS-S1                     TO WS-1-CYMD(1: 2)
               MOVE LS-S2                     TO WS-1-CYMD(3: 2)
               MOVE LS-S3                     TO WS-1-CYMD(5: 2)
               MOVE LS-S4                     TO WS-1-CYMD(7: 2).
           IF WS-1-CYMD NOT NUMERIC
               DISPLAY '**** MIS0425B parm date is not numeric'
               DISPLAY '**** MIS0425B parm date ' LS-SYMBOL
               MOVE 0400                      TO WS-RETURN-CODE
           ELSE
               CALL 'STV0405B' USING WS-1-CYMD
               IF WS-1-CYMD NOT NUMERIC
                   DISPLAY '**** MIS0425B parm date is invalid'
                   DISPLAY '**** MIS0425B parm date ' WS-1-CYMD
                   MOVE 0400                  TO WS-RETURN-CODE.

       0400-EDIT-PARM-EXIT. EXIT.

       0500-DETERMINE-TIME.
           IF LS-LEN = '02'
               MOVE WS-1-HMS(1: 2)            TO WS-DATA(1: 2)
           ELSE
           IF LS-LEN = '04'
               MOVE WS-1-HMS(1: 4)            TO WS-DATA(1: 4)
           ELSE
           IF LS-LEN = '05'
               MOVE WS-1-HMS(1: 2)            TO WS-DATA(1: 2)
               MOVE ':'                       TO WS-DATA(3: 1)
               MOVE WS-1-HMS(3: 2)            TO WS-DATA(4: 2)
           ELSE
           IF LS-LEN = '06'
               MOVE WS-1-HMS                  TO WS-DATA
           ELSE
           IF LS-LEN = '07'
               MOVE WS-2-HMS(1: 2)            TO WS-DATA(1: 2)
               MOVE ':'                       TO WS-DATA(3: 1)
               MOVE WS-2-HMS(3: 2)            TO WS-DATA(4: 2)
               MOVE WS-2-HMS(5: 2)            TO WS-DATA(6: 2)
           ELSE
           IF LS-LEN = '08'
               MOVE WS-1-HMS(1: 2)            TO WS-DATA(1: 2)
               MOVE ':'                       TO WS-DATA(3: 1)
               MOVE WS-1-HMS(3: 2)            TO WS-DATA(4: 2)
               MOVE ':'                       TO WS-DATA(6: 1)
               MOVE WS-1-HMS(5: 2)            TO WS-DATA(7: 2).

       0500-DETERMINE-DATE.
           IF LS-SEQ = 'MDY'
               IF LS-LEN = '02'
                   MOVE WS-1-CYMD-MM          TO WS-DATA(1: 2)
               ELSE
               IF LS-LEN = '04'
                   MOVE WS-1-CYMD(5: 4)       TO WS-DATA(1: 4)
               ELSE
               IF LS-LEN = '05'
                   MOVE WS-1-CYMD-MM          TO WS-DATA(1: 2)
                   MOVE '/'                   TO WS-DATA(3: 1)
                   MOVE WS-1-CYMD-DD          TO WS-DATA(5: 2)
               ELSE
               IF LS-LEN = '06'
                   MOVE WS-1-CYMD-MM          TO WS-DATA(1: 2)
                   MOVE WS-1-CYMD-DD          TO WS-DATA(3: 2)
                   MOVE WS-1-CYMD-YY          TO WS-DATA(5: 2)
               ELSE
               IF LS-LEN = '08'
                   MOVE WS-1-CYMD-MM          TO WS-DATA(1: 2)
                   MOVE '/'                   TO WS-DATA(3: 1)
                   MOVE WS-1-CYMD-DD          TO WS-DATA(4: 2)
                   MOVE '/'                   TO WS-DATA(6: 1)
                   MOVE WS-1-CYMD-YY          TO WS-DATA(7: 2).

           IF LS-SEQ = 'MDC'
               IF LS-LEN = '04'
                   MOVE WS-1-CYMD(5: 4)       TO WS-DATA(1: 4)
               ELSE
               IF LS-LEN = '06'
                   MOVE WS-1-CYMD-MM          TO WS-DATA(1: 2)
                   MOVE WS-1-CYMD(1: 4)       TO WS-DATA(3: 4)
               ELSE
               IF LS-LEN = '07'
                   MOVE WS-1-CYMD-MM          TO WS-DATA(1: 2)
                   MOVE '/'                   TO WS-DATA(3: 1)
                   MOVE WS-1-CYMD(1: 4)       TO WS-DATA(4: 4)
               ELSE
               IF LS-LEN = '08'
                   MOVE WS-1-CYMD-MM          TO WS-DATA(1: 2)
                   MOVE WS-1-CYMD-DD          TO WS-DATA(3: 2)
                   MOVE WS-1-CYMD(1: 4)       TO WS-DATA(5: 4)
               ELSE
               IF LS-LEN = '10'
                   MOVE WS-1-CYMD-MM          TO WS-DATA(1: 2)
                   MOVE '/'                   TO WS-DATA(3: 1)
                   MOVE WS-1-CYMD-DD          TO WS-DATA(4: 2)
                   MOVE '/'                   TO WS-DATA(6: 1)
                   MOVE WS-1-CYMD-CC          TO WS-DATA(7: 2)
                   MOVE WS-1-CYMD-YY          TO WS-DATA(9: 2).

           IF LS-SEQ = 'DMY'
               IF LS-LEN = '02'
                   MOVE WS-1-CYMD-DD          TO WS-DATA(1: 2)
               ELSE
               IF LS-LEN = '04'
                   MOVE WS-1-CYMD-DD          TO WS-DATA(1: 2)
                   MOVE WS-1-CYMD-MM          TO WS-DATA(3: 2)
               ELSE
               IF LS-LEN = '05'
                   MOVE WS-1-CYMD-DD          TO WS-DATA(1: 2)
                   MOVE '/'                   TO WS-DATA(3: 1)
                   MOVE WS-1-CYMD-MM          TO WS-DATA(4: 2)
               ELSE
               IF LS-LEN = '06'
                   MOVE WS-1-CYMD-DD          TO WS-DATA(1: 2)
                   MOVE WS-1-CYMD-MM          TO WS-DATA(3: 2)
                   MOVE WS-1-CYMD-YY          TO WS-DATA(5: 2)
               ELSE
               IF LS-LEN = '08'
                   MOVE WS-1-CYMD-DD          TO WS-DATA(1: 2)
                   MOVE '/'                   TO WS-DATA(3: 1)
                   MOVE WS-1-CYMD-MM          TO WS-DATA(4: 2)
                   MOVE '/'                   TO WS-DATA(6: 1)
                   MOVE WS-1-CYMD-YY          TO WS-DATA(7: 2).

           IF LS-SEQ = 'DMC'
               IF LS-LEN = '04'
                   MOVE WS-1-CYMD-DD          TO WS-DATA(1: 2)
                   MOVE WS-1-CYMD-MM          TO WS-DATA(3: 2)
               ELSE
               IF LS-LEN = '06'
                   MOVE WS-1-CYMD-DD          TO WS-DATA(1: 2)
                   MOVE WS-1-CYMD(1: 4)       TO WS-DATA(3: 4)
               ELSE
               IF LS-LEN = '07'
                   MOVE WS-1-CYMD-DD          TO WS-DATA(1: 2)
                   MOVE '/'                   TO WS-DATA(3: 1)
                   MOVE WS-1-CYMD(1: 4)       TO WS-DATA(4: 4)
               ELSE
               IF LS-LEN = '08'
                   MOVE WS-1-CYMD-DD          TO WS-DATA(1: 2)
                   MOVE WS-1-CYMD-MM          TO WS-DATA(3: 2)
                   MOVE WS-1-CYMD(1: 4)       TO WS-DATA(5: 4)
               ELSE
               IF LS-LEN = '10'
                   MOVE WS-1-CYMD-DD          TO WS-DATA(1: 2)
                   MOVE '/'                   TO WS-DATA(3: 1)
                   MOVE WS-1-CYMD-MM          TO WS-DATA(4: 2)
                   MOVE '/'                   TO WS-DATA(6: 1)
                   MOVE WS-1-CYMD-CC          TO WS-DATA(7: 2)
                   MOVE WS-1-CYMD-YY          TO WS-DATA(9: 2).

           IF LS-SEQ = 'YMD'
               IF LS-LEN = '02'
                   MOVE WS-1-CYMD-YY          TO WS-DATA(1: 2)
               ELSE
               IF LS-LEN = '04'
                   MOVE WS-1-CYMD-YY          TO WS-DATA(1: 2)
                   MOVE WS-1-CYMD-MM          TO WS-DATA(3: 2)
               ELSE
               IF LS-LEN = '05'
                   MOVE WS-1-CYMD-YY          TO WS-DATA(1: 2)
                   MOVE '/'                   TO WS-DATA(3: 1)
                   MOVE WS-1-CYMD-MM          TO WS-DATA(4: 2)
               ELSE
               IF LS-LEN = '06'
                   MOVE WS-1-CYMD-YY          TO WS-DATA(1: 2)
                   MOVE WS-1-CYMD-MM          TO WS-DATA(3: 2)
                   MOVE WS-1-CYMD-DD          TO WS-DATA(5: 2)
               ELSE
               IF LS-LEN = '08'
                   MOVE WS-1-CYMD-YY          TO WS-DATA(1: 2)
                   MOVE '/'                   TO WS-DATA(3: 1)
                   MOVE WS-1-CYMD-MM          TO WS-DATA(4: 2)
                   MOVE '/'                   TO WS-DATA(6: 1)
                   MOVE WS-1-CYMD-DD          TO WS-DATA(7: 2).

           IF LS-SEQ = 'CMD'
               IF LS-LEN = '04'
                   MOVE WS-1-CYMD(1: 4)       TO WS-DATA(1: 4)
               ELSE
               IF LS-LEN = '06'
                   MOVE WS-1-CYMD(1: 4)       TO WS-DATA(1: 4)
                   MOVE WS-1-CYMD-MM          TO WS-DATA(5: 2)
               ELSE
               IF LS-LEN = '07'
                   MOVE WS-1-CYMD(1: 4)       TO WS-DATA(1: 4)
                   MOVE '/'                   TO WS-DATA(5: 1)
                   MOVE WS-1-CYMD-MM          TO WS-DATA(6: 2)
               ELSE
               IF LS-LEN = '08'
                   MOVE WS-1-CYMD             TO WS-DATA
               ELSE
               IF LS-LEN = '10'
                   MOVE WS-1-CYMD-CC          TO WS-DATA(1: 2)
                   MOVE WS-1-CYMD-YY          TO WS-DATA(3: 2)
                   MOVE '/'                   TO WS-DATA(5: 1)
                   MOVE WS-1-CYMD-MM          TO WS-DATA(6: 2)
                   MOVE '/'                   TO WS-DATA(8: 1)
                   MOVE WS-1-CYMD-DD          TO WS-DATA(9: 2).

           IF LS-SEQ = 'JUL'
               MOVE SPACE                     TO WS-STV0400B-FIELDS
               MOVE WS-1-CYMD                 TO STV0400B-1X8
               MOVE 'CYMD  '                  TO STV0400B-IN
               IF LS-LEN = '03'
                   MOVE 'DDD   '              TO STV0400B-OUT
                   CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS
                   IF STV0400B-1X6 = 'ERROR'
                       DISPLAY '**** MIS0425B error calc julian date'
                       MOVE 0500              TO WS-RETURN-CODE
                   ELSE
                       MOVE STV0400B-DATA     TO WS-DATA
               ELSE
               IF LS-LEN = '05'
                   MOVE 'YDDD  '              TO STV0400B-OUT
                   CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS
                   IF STV0400B-1X6 = 'ERROR'
                       DISPLAY '**** MIS0425B error calc julian date'
                       MOVE 0500              TO WS-RETURN-CODE
                   ELSE
                       MOVE STV0400B-DATA     TO WS-DATA
               ELSE
               IF LS-LEN = '06'
                   MOVE 'Y/DDD '              TO STV0400B-OUT
                   CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS
                   IF STV0400B-1X6 = 'ERROR'
                       DISPLAY '**** MIS0425B error calc julian date'
                       MOVE 0500              TO WS-RETURN-CODE
                   ELSE
                       MOVE STV0400B-DATA     TO WS-DATA
               ELSE
               IF LS-LEN = '07'
                   MOVE 'CYDDD '              TO STV0400B-OUT
                   CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS
                   IF STV0400B-1X6 = 'ERROR'
                       DISPLAY '**** MIS0425B error calc julian date'
                       MOVE 0500              TO WS-RETURN-CODE
                   ELSE
                       MOVE STV0400B-DATA     TO WS-DATA
               ELSE
                   MOVE 'CY/DDD'              TO STV0400B-OUT
                   CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS
                   IF STV0400B-1X6 = 'ERROR'
                       DISPLAY '**** MIS0425B error calc julian date'
                       MOVE 0500              TO WS-RETURN-CODE
                   ELSE
                       MOVE STV0400B-DATA     TO WS-DATA.

           IF LS-SEQ = 'QTR'
               IF LS-LEN = '01'
                   MOVE SPACE                 TO WS-STV0400B-FIELDS
                   MOVE WS-1-CYMD             TO STV0400B-1X8
                   MOVE 'CYMD  '              TO STV0400B-IN
                   MOVE 'QTR   '              TO STV0400B-OUT
                   CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS
                   IF STV0400B-1X6 = 'ERROR'
                       DISPLAY '**** MIS0425B error calc quarter'
                       MOVE 0500              TO WS-RETURN-CODE
                   ELSE
                       MOVE STV0400B-DATA     TO WS-DATA.

       0600-READ-PARMFX.
           READ PARMFX.
           IF WS-STAT = ZERO
               ADD 1                          TO WS-READ-RCD-CNT
               PERFORM 0700-MAKE-UPDATE
           ELSE
           IF WS-STAT = 10
               MOVE 'Y'                       TO WS-END-PARMFX-SW
           ELSE
               DISPLAY '**** MIS0425B read error on PARMFX '
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0600                     TO WS-RETURN-CODE.

       0700-MAKE-UPDATE.
           IF WS-READ-RCD-CNT = WS-RCD-N
               MOVE WS-DATA(1: WS-LEN-N)
                          TO PARMFX-RECORD(WS-POS-N: WS-LEN-N)
               MOVE 'Y'                       TO WS-END-PARMFX-SW
               PERFORM 0800-REWRITE-PARMFX
               DISPLAY '**** Parm update:       RCD ' LS-RCD
                       '  POS ' LS-POS '  LEN ' LS-LEN
               DISPLAY '**** Data:              ' WS-DATA.

       0800-REWRITE-PARMFX.
           REWRITE PARMFX-RECORD.
           IF WS-STAT > ZERO
               DISPLAY '**** MIS0425B rewrite error on PARMFX'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0800                     TO WS-RETURN-CODE.

      ************************************ END MIS0425B
