
       TITLE '  PULLFILE: pull selected records for output'.
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    PULLFILE.
      ******************************************************************
      *@@@ C3 pull selected records for output processing
      ******************************************************************
      *
      *  I am interested in knowing if/where these programs
      *  are in use.     Email:  jiannon@me.com
      *
      ****************************************************************
      *
      * Date written: 02/12/97
      * Author      : Jim Iannone      Toledo, Ohio
      *
      * Loop through an input file and search for a specified string
      * in a specified position, or anywhere in the file.
      * When found, write that (full or partial) record, or a group of
      * records (including or not including the original search record)
      * to an output file.  Enter up to 100 strings.
      *
      * see PULLDOCU
      ******************************************************************

       ENVIRONMENT DIVISION.

       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           C01 IS PAGE-TOP.

       INPUT-OUTPUT SECTION.
       FILE-CONTROL.

           COPY PULLCPY1.

           SELECT OUTFILE              ASSIGN TO OUTFILE
                                       ORGANIZATION IS SEQUENTIAL
                                       ACCESS MODE IS SEQUENTIAL
                                       FILE STATUS IS WS-STAT.

           SELECT OUTPRNT              ASSIGN TO OUTPRNT
                                       FILE STATUS IS WS-STAT.

           SELECT PARM01               ASSIGN TO PARM01
                                       ORGANIZATION IS SEQUENTIAL
                                       ACCESS MODE IS SEQUENTIAL
                                       FILE STATUS IS WS-STAT.

           SELECT SORT-PARM            ASSIGN TO S-SORTWK01.

       DATA DIVISION.
       FILE SECTION.

       COPY PULLCPY2.

       FD  PARM01
           RECORDING MODE IS F
           BLOCK CONTAINS 0.
       01  PARM01-RECORD.
           05  PARM01-RCD1             PIC  X(80).
           05  FILLER REDEFINES PARM01-RCD1.
               10  PARM01-DOCU         PIC  X(04).
               10  FILLER              PIC  X(76).
           05  FILLER REDEFINES PARM01-RCD1.
               10  PARM01-A            PIC  X(24).
               10  PARM01-XSI          PIC  X.
               10  PARM01-B            PIC  XX.
               10  FILLER              PIC  X.
               10  PARM01-C            PIC  X(04).
               10  PARM01-DASH         PIC  X.
               10  PARM01-D            PIC  XX.
               10  PARM01-E            PIC  XXX.
               10  FILLER              PIC  X.
               10  PARM01-F            PIC  X.
               10  PARM01-DOT1         PIC  X.
               10  PARM01-G            PIC  X(05).
               10  PARM01-NBR1         PIC  X.
               10  FILLER              PIC  X.
               10  PARM01-H            PIC  X.
               10  PARM01-DOT2         PIC  X.
               10  PARM01-I            PIC  X(05).
               10  PARM01-NBR2         PIC  X.
               10  FILLER              PIC  X.
               10  PARM01-J            PIC  X(15).
               10  FILLER              PIC  X(08).

       SD  SORT-PARM.
       01  SORT-RECORD.
           05  SR-LINE1                PIC  9(08).
           05  SR-LINE2                PIC  9(08).
           05  SR-SUB                  PIC  9(05).
           05  SR-SEL1                 PIC  9(04).
           05  SR-SEL2                 PIC  9(04).
           05  SR-REL                  PIC  X.
           05  SR-TITLE                PIC  X(15).

       COPY PULLCPY3.

       WORKING-STORAGE SECTION.

       01  WS-START.
           05  FILLER                  PIC  X(32)    VALUE
               ' Working storage PULLFILE start '.

       01  WS-WORK-FIELDS.
           05  WS-STAT                 PIC  99       VALUE ZERO.
           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.
           05  WS-PARM01-MAX           PIC  999      VALUE ZERO.
           05  WS-INPUT-RCD-LENGTH     PIC S9(04)    VALUE ZERO.
           05  WS-X                    PIC S9(04)    VALUE ZERO.
           05  WS-Y                    PIC S9(04)    VALUE ZERO.
           05  WS-Z                    PIC S9(04)    VALUE ZERO.
           05  WS-WORK1                PIC S9(08)    VALUE ZERO.
           05  WS-WORK2                PIC  9(05)    VALUE ZERO.
           05  WS-WORK3                PIC S9(05)    VALUE ZERO.
           05  WS-LINE                 PIC  9(05)    VALUE ZERO.
           05  WS-MAX-POS              PIC S9(05)    VALUE ZERO.
           05  WS-MAX-LINE             PIC  9(05)    VALUE ZERO.
           05  WS-DUPL-CNT             PIC  9(04)    VALUE ZERO.
           05  WS-IN                   PIC  9(05)    VALUE ZERO.
           05  WS-OUT                  PIC  9(05)    VALUE ZERO.
           05  WS-IN-CNT-X             PIC  X(08)    VALUE SPACE.
           05  WS-A2                   PIC  X(24)    VALUE SPACE.
           05  FILLER REDEFINES WS-A2.
               10  WS-A2-1             PIC  X.
               10  FILLER              PIC  X(23).
           05  WS-XSI2                 PIC  X        VALUE SPACE.
           05  WS-XSI-MAX              PIC  99       VALUE ZERO.
           05  WS-XSI-CNT              PIC S9(05)    VALUE ZERO.
           05  WS-B2                   PIC  99       VALUE ZERO.
           05  WS-C2                   PIC  9(04)    VALUE ZERO.
           05  WS-C2-M                 PIC  X        VALUE SPACE.
           05  WS-D2                   PIC  99       VALUE ZERO.
           05  WS-D2-DASH              PIC  X        VALUE SPACE.
           05  WS-E2                   PIC  999      VALUE ZERO.
           05  WS-F2                   PIC  X        VALUE SPACE.
           05  WS-F2-N REDEFINES WS-F2 PIC  9.
           05  WS-G2                   PIC  X(05)    VALUE '00000'.
           05  WS-G2-N REDEFINES WS-G2 PIC  9(05).
           05  WS-H2                   PIC  X        VALUE SPACE.
           05  WS-H2-N REDEFINES WS-H2 PIC  9.
           05  WS-I2                   PIC  X(05)    VALUE '0000'.
           05  WS-I2-N REDEFINES WS-I2 PIC  9(05).
           05  WS-J2                   PIC  X(15)    VALUE SPACE.
           05  WS-DT1                  PIC  X        VALUE SPACE.
           05  WS-DT2                  PIC  X        VALUE SPACE.
           05  WS-NB1                  PIC  9        VALUE ZERO.
           05  WS-NB2                  PIC  9        VALUE ZERO.
           05  WS-TTL                  PIC  X(15)    VALUE SPACE.
           05  FILLER REDEFINES WS-TTL.
               10  WS-TTL-1            PIC  X.
               10  WS-TTL-2X3          PIC  XX.
               10  WS-TTL-4            PIC  X.
               10  WS-TTL-5            PIC  X.
               10  FILLER              PIC  X(04).
               10  WS-TTL-10X13        PIC  X(04).
               10  FILLER              PIC  XX.
           05  FILLER REDEFINES WS-TTL.
               10  FILLER              PIC  X.
               10  WS-TTL-2X5          PIC  X(04).
               10  WS-TTL-6X9          PIC  X(04).
               10  FILLER              PIC  X(06).
           05  FILLER REDEFINES WS-TTL.
               10  FILLER              PIC  X(04).
               10  WS-TTL-5X15         PIC  X(11).

       01  WS-COUNT-FIELDS             COMP-3.
           05  WS-IN-CNT               PIC S9(08)    VALUE ZERO.
           05  WS-PREV-IN-CNT          PIC S9(08)    VALUE ZERO.
           05  WS-LINE-PRINT-CNT       PIC  9(05)    VALUE ZERO.
           05  WS-LINE-PRINT-MAX       PIC  9(05)    VALUE ZERO.
           05  WS-WRITE-RCD-CNT        PIC S9(08)    VALUE ZERO.
           05  WS-SORT-RCD-CNT         PIC S9(08)    VALUE ZERO.
           05  WS-LOOP-CNT             PIC S999      VALUE ZERO.

       01  WS-SUBSCRIPTS.
           05  WS-SUB1                 PIC  9(05)    VALUE ZERO.
           05  WS-SUB2                 PIC S9(05)    VALUE ZERO.
           05  WS-SUB3                 PIC S9(05)    VALUE ZERO.

       01  WS-TABLES.
           05  WS-STRING-TABLE         PIC  X(6900) VALUE SPACE.
           05  WS-STRING-DATA REDEFINES WS-STRING-TABLE.
               10  WS-STRING-VALUES    OCCURS 100 TIMES.
                   15  WS-A            PIC  X(24).
                   15  WS-XSI          PIC  X.
                   15  WS-B            PIC  99.
                   15  WS-C-M          PIC  X.
                   15  WS-C            PIC  9(04).
                   15  WS-D            PIC  99.
                   15  WS-D-DASH       PIC  X.
                   15  WS-E            PIC  999.
                   15  WS-F            PIC  X.
                   15  WS-F-N REDEFINES WS-F PIC 9.
                   15  WS-DOT1         PIC  X.
                   15  WS-G            PIC  X(05).
                   15  WS-G-N REDEFINES WS-G PIC 9(05).
                   15  WS-NBR1         PIC  9.
                   15  WS-H            PIC  X.
                   15  WS-H-N REDEFINES WS-H PIC 9.
                   15  WS-DOT2         PIC  X.
                   15  WS-I            PIC  X(05).
                   15  WS-I-N REDEFINES WS-I PIC 9(05).
                   15  WS-NBR2         PIC  9.
                   15  WS-J            PIC  X(15).
           05  WS-LINE-TABLE           PIC  X(13500) VALUE SPACE.
           05  WS-LINE-DATA REDEFINES WS-LINE-TABLE.
               10  WS-LINE-VALUES      OCCURS 300 TIMES.
                   15  WS-LINE1        PIC  9(08).
                   15  WS-LINE2        PIC  9(08).
                   15  WS-SUB          PIC  9(05).
                   15  WS-SEL1         PIC  9(04).
                   15  WS-SEL2         PIC  9(04).
                   15  WS-REL          PIC  X.
                   15  WS-TITLE        PIC  X(15).

       01  WS-SWITCHES.
           05  WS-END-INFILE-SW        PIC  X        VALUE 'N'.
               88  END-OF-INFILE                     VALUE 'Y'.
               88  MORE-INFILE-RCDS                  VALUE 'N'.
           05  WS-END-SORT-SW          PIC  X        VALUE 'N'.
               88  END-OF-SORT                       VALUE 'Y'.
               88  MORE-SORT-RCDS                    VALUE 'N'.
           05  WS-END-PARM01-SW        PIC  X        VALUE 'N'.
               88  END-OF-PARM01                     VALUE 'Y'.
               88  MORE-PARM01-RCDS                  VALUE 'N'.
           05  WS-FOUND-SW             PIC  X        VALUE SPACE.
           05  WS-DUPL-MAX-SW          PIC  X        VALUE SPACE.
           05  WS-DUPL-C-SW            PIC  X        VALUE SPACE.
           05  WS-DUPL-E-SW            PIC  X        VALUE SPACE.
           05  WS-EXCLUDE-SW           PIC  X        VALUE SPACE.
           05  WS-OVERRIDE-I-SW        PIC  X        VALUE SPACE.
           05  WS-CONDENSE-SW          PIC  X        VALUE SPACE.
           05  WS-SORT-SW              PIC  X        VALUE 'N'.
           05  WS-SKIP-RCD-SW          PIC  X        VALUE SPACE.

       01  WS-PRINT-CONTROL            COMP.
           05  WS-PRINT-SUM            PIC S99       VALUE +90.
           05  WS-PRINT-MAX            PIC S99       VALUE +44.
           05  WS-SPACE-CONTROL        PIC S99       VALUE 1.

       01  WS-HOLD-VALUES.
           05  WS-HLD-LINE1            PIC  9(08).
           05  WS-HLD-LINE2            PIC  9(08).
           05  WS-HLD-SUB              PIC  9(05).
           05  WS-HLD-SEL1             PIC  9(04).
           05  WS-HLD-SEL2             PIC  9(04).
           05  WS-HLD-REL              PIC  X.
           05  WS-HLD-TITLE            PIC  X(15).

       01  WS-OUT-AREA.
           05  WS-HOLD1                PIC  X(10000).
           05  WS-HOLD2                PIC  X(10000).

       01  WS-END.
           05  FILLER                  PIC  X(16)    VALUE
               '  PULLFILE END  '.

       LINKAGE SECTION.

       01  LS-FIELD.
           05  LS-LENGTH               PIC S9(04)    COMP.
           05  LS-DATA                 PIC  X(10).
           05  FILLER REDEFINES LS-DATA.
               10  LS-INPUT-RCD-LENGTH PIC  X(04).
               10  LS-NUMBERING-SW     PIC  X.
               10  LS-SWITCH           PIC  X.
               10  LS-PAGE-LEN         PIC  XX.
               10  LS-TEST-SW          PIC  X.
               10  LS-FILLER           PIC  X.

      /
       PROCEDURE DIVISION USING LS-FIELD.

       0100-PROGRAM-ENTRY.

           MOVE +0000                         TO WS-RETURN-CODE.
           DISPLAY '                              '.
           DISPLAY '**** PULLFILE pull strings and print files'.

           PERFORM 0200-OPEN-INFILE.
           PERFORM 0200-OPEN-FILES.

           IF WS-RETURN-CODE = ZERO
               SORT SORT-PARM
                   ON ASCENDING KEY SR-LINE1
                                    SR-LINE2
                                    SR-SUB
                   INPUT PROCEDURE IS 0400-SORT-IN
                   OUTPUT PROCEDURE IS 1400-SORT-OUT.

           IF LS-PAGE-LEN NUMERIC
               DISPLAY '**** Page breaks set on  '
               DISPLAY '**** Page length         ' WS-PRINT-MAX.
           IF WS-DUPL-C-SW = 'Y'
               DISPLAY '**** Single rcd duplicates suppressed'.
           IF WS-DUPL-E-SW = 'Y'
               DISPLAY '**** Multi-rcd duplicates suppressed'.
           DISPLAY '**** Sort required       ' WS-SORT-SW.
           DISPLAY '**** Records in INFILE   ' WS-IN-CNT.
           DISPLAY '**** Records sorted      ' WS-SORT-RCD-CNT.
           DISPLAY '**** Records written     ' WS-WRITE-RCD-CNT.
           DISPLAY '**** Parm table max      ' WS-PARM01-MAX.
           DISPLAY '**** Line table max      ' WS-MAX-LINE.
           DISPLAY '**** PULLFILE EOJ encountered '.
           DISPLAY '                              '.

           IF WS-RETURN-CODE = ZERO
               PERFORM 0300-CLOSE-INFILE
               PERFORM 0300-CLOSE-FILES
           ELSE
               DISPLAY '**** PULLFILE cond code ' WS-RETURN-CODE
                       ' set by program'
               MOVE WS-RETURN-CODE            TO RETURN-CODE.

           STOP RUN.

       0200-OPEN-INFILE.
           OPEN INPUT  INFILE.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** PULLFILE open error on INFILE'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0200                     TO WS-RETURN-CODE.

       0200-OPEN-FILES.
           OPEN INPUT  PARM01.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** PULLFILE open error on PARM01'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0201                     TO WS-RETURN-CODE.
           OPEN OUTPUT OUTFILE.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** PULLFILE open error on OUTFILE'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0202                     TO WS-RETURN-CODE.
           OPEN OUTPUT OUTPRNT.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** PULLFILE open error on OUTPRNT'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0203                     TO WS-RETURN-CODE.

       0300-CLOSE-INFILE.
           CLOSE INFILE.

       0300-CLOSE-FILES.
           CLOSE OUTPRNT.
           CLOSE OUTFILE.
           CLOSE PARM01.

       0400-SORT-IN.
           PERFORM 0400-PROCESS-INFILE.

       0400-PROCESS-INFILE.
           IF LS-PAGE-LEN NUMERIC
             IF LS-PAGE-LEN > ZERO
                 MOVE LS-PAGE-LEN             TO WS-PRINT-MAX.
           IF LS-INPUT-RCD-LENGTH NUMERIC
               MOVE LS-INPUT-RCD-LENGTH TO WS-INPUT-RCD-LENGTH.
           IF WS-INPUT-RCD-LENGTH < 30
               DISPLAY '**** input record length < 30 '
                        WS-INPUT-RCD-LENGTH
               MOVE +0400                   TO WS-RETURN-CODE.
           IF WS-RETURN-CODE = ZERO
               PERFORM VARYING WS-SUB1 FROM 1 BY 1
                   UNTIL WS-SUB1 > 100
                   MOVE SPACE                 TO WS-A(WS-SUB1)
                   MOVE SPACE                 TO WS-XSI(WS-SUB1)
                   MOVE ZERO                  TO WS-B(WS-SUB1)
                   MOVE ZERO                  TO WS-C(WS-SUB1)
                   MOVE ZERO                  TO WS-D(WS-SUB1)
                   MOVE ZERO                  TO WS-E(WS-SUB1)
                   MOVE ZERO                  TO WS-NBR1(WS-SUB1)
                   MOVE ZERO                  TO WS-NBR2(WS-SUB1)
                   MOVE SPACE                 TO WS-C-M(WS-SUB1)
                   MOVE SPACE                 TO WS-D-DASH(WS-SUB1)
                   MOVE SPACE                 TO WS-F(WS-SUB1)
                   MOVE SPACE                 TO WS-G(WS-SUB1)
                   MOVE SPACE                 TO WS-H(WS-SUB1)
                   MOVE SPACE                 TO WS-I(WS-SUB1)
                   MOVE SPACE                 TO WS-J(WS-SUB1)
                   MOVE SPACE                 TO WS-DOT1(WS-SUB1)
                   MOVE SPACE                 TO WS-DOT2(WS-SUB1)
               END-PERFORM
               PERFORM VARYING WS-SUB1 FROM 1 BY 1
                   UNTIL WS-SUB1 > 300
                   MOVE ZERO                  TO WS-SUB(WS-SUB1)
                   MOVE ZERO                  TO WS-LINE1(WS-SUB1)
                   MOVE ZERO                  TO WS-LINE2(WS-SUB1)
                   MOVE ZERO                  TO WS-SEL1(WS-SUB1)
                   MOVE ZERO                  TO WS-SEL2(WS-SUB1)
                   MOVE SPACE                 TO WS-TITLE(WS-SUB1)
                   MOVE SPACE                 TO WS-REL(WS-SUB1)
               END-PERFORM
               MOVE ZERO                      TO WS-SUB1
               PERFORM 0500-LOAD-PARM01 THRU
                       0500-LOAD-PARM01-EXIT.
           IF WS-PARM01-MAX = ZERO
               DISPLAY '**** No parm records accepted '
               MOVE +0400                   TO WS-RETURN-CODE.

           IF WS-RETURN-CODE = ZERO
               MOVE ZERO                      TO WS-LINE
               PERFORM 0600-READ-INFILE THRU
                       0600-READ-INFILE-EXIT
                       UNTIL END-OF-INFILE.

      ****************************************
      *    load the working storage table of strings
      ****************************************
       0500-LOAD-PARM01.
           READ PARM01.
           IF WS-STAT = 10
               MOVE WS-SUB1                   TO WS-PARM01-MAX
               GO TO 0500-LOAD-PARM01-EXIT
           ELSE
           IF WS-STAT > ZERO
               DISPLAY '**** PULLFILE read error on PARM01'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0500                     TO WS-RETURN-CODE
               GO TO 0500-LOAD-PARM01-EXIT.

           IF PARM01-DOCU = '**  '
               GO TO 0500-LOAD-PARM01.
           IF PARM01-DOCU(1: 1) = '*'
               DISPLAY '**** NOTE:  Use -->**  <-- for comments'.
           IF WS-SUB1 < 100
               PERFORM 0550-VALIDATE-PARM THRU
                       0550-VALIDATE-PARM-EXIT.
           GO TO 0500-LOAD-PARM01.

       0500-LOAD-PARM01-EXIT. EXIT.

       0550-VALIDATE-PARM.
           ADD 1                              TO WS-SUB1.
      ****************************************
      *    edit string
      ****************************************
           IF PARM01-A = SPACE
             IF PARM01-XSI NOT = 'I'
                 DISPLAY '**** Parm A ' WS-SUB1 '  all spaces '
                 DISPLAY '**** Use #SPACE# to pull spaces'
                 GO TO 0550-VALIDATE-ERROR.
           IF PARM01-A(1: 5) = '#MAX#'
               IF PARM01-E NUMERIC
                   MOVE PARM01-E              TO WS-LINE-PRINT-MAX
                   SUBTRACT 1 FROM WS-SUB1
                   DISPLAY '**** Line print count limited to '
                                                 WS-LINE-PRINT-MAX
                   GO TO 0550-VALIDATE-PARM-EXIT
               ELSE
                   DISPLAY '**** Parm E ' WS-SUB1
                           '  #MAX# requires numeric parm E '
                   GO TO 0550-VALIDATE-ERROR.
           MOVE PARM01-A                      TO WS-A(WS-SUB1).
           IF WS-EXCLUDE-SW = 'X'
             IF WS-XSI(WS-SUB1) = 'X'
                 DISPLAY '**** Parm XSI ' WS-SUB1
                         '  X must be 1st parm rcd'
                 GO TO 0550-VALIDATE-ERROR.
           IF PARM01-XSI = 'X'
               MOVE PARM01-XSI                TO WS-XSI(WS-SUB1)
           ELSE
           IF PARM01-XSI = 'I'
               MOVE 'X'                       TO WS-EXCLUDE-SW
               MOVE PARM01-XSI                TO WS-XSI(WS-SUB1)
               MOVE '01'                      TO PARM01-B
               DISPLAY '**** Parm I ' WS-SUB1
                       '  string length set to 01 '
           ELSE
           IF PARM01-XSI = SPACE
               MOVE PARM01-XSI                TO WS-XSI(WS-SUB1)
               MOVE 'X'                       TO WS-EXCLUDE-SW
           ELSE
           IF PARM01-XSI NUMERIC
             IF PARM01-XSI < '2'
                 DISPLAY '**** Parm XSI ' WS-SUB1
                         '  numeric and < 2 '
                 GO TO 0550-VALIDATE-ERROR
             ELSE
                 MOVE PARM01-XSI              TO WS-XSI(WS-SUB1)
                 MOVE 'X'                     TO WS-EXCLUDE-SW
           ELSE
           IF PARM01-XSI = 'S'
             IF WS-EXCLUDE-SW = 'X'
                 MOVE PARM01-XSI              TO WS-XSI(WS-SUB1)
             ELSE
                 DISPLAY '**** Parm XSI ' WS-SUB1
                         '  S requires prev SPACE/I/# '
                 GO TO 0550-VALIDATE-ERROR
           ELSE
               DISPLAY '**** Parm XSI ' WS-SUB1
                       '  valid values SPACE/X/S/I/2-9 '
               GO TO 0550-VALIDATE-ERROR.

      ****************************************
      *    edit string length
      *+**************************************
           IF PARM01-B = 'CC'
               PERFORM VARYING WS-SUB2 FROM 24 BY -1
                   UNTIL WS-SUB2 < 1
                   IF WS-A(WS-SUB1)(WS-SUB2: 1) NOT = SPACE
                       MOVE WS-SUB2           TO WS-B(WS-SUB1)
                       MOVE ZERO              TO WS-SUB2
                   END-IF
               END-PERFORM
           ELSE
           IF PARM01-B NUMERIC
               MOVE PARM01-B                  TO WS-B(WS-SUB1)
           ELSE
               DISPLAY '**** Parm B ' WS-SUB1 '  not numeric  '
               GO TO 0550-VALIDATE-ERROR.
           IF (WS-B(WS-SUB1) > 24)
               OR (WS-B(WS-SUB1) < 1)
               DISPLAY '**** Parm B ' WS-SUB1
                       '  valid values 01-24,CC '
               GO TO 0550-VALIDATE-ERROR.

      ****************************************
      *    edit find position
      *+**************************************
           IF PARM01-C(1: 1) = 'M'
               MOVE 'M'                       TO WS-C-M(WS-SUB1)
               IF PARM01-C(2: 3) NOT NUMERIC
                   DISPLAY '**** Parm C ' WS-SUB1 '  not numeric  '
                   GO TO 0550-VALIDATE-ERROR
               ELSE
                   MOVE PARM01-C(2: 3)        TO WS-C(WS-SUB1)
                   IF WS-C(WS-SUB1) < 001
                       DISPLAY '**** Parm C ' WS-SUB1 '  < 1 '
                       GO TO 0550-VALIDATE-ERROR
                   ELSE
                       CONTINUE
           ELSE
           IF PARM01-C NOT NUMERIC
               DISPLAY '**** Parm C ' WS-SUB1 '  not numeric  '
               GO TO 0550-VALIDATE-ERROR
           ELSE
               MOVE PARM01-C                  TO WS-C(WS-SUB1)
               COMPUTE WS-MAX-POS = (WS-INPUT-RCD-LENGTH -
                                      WS-B(WS-SUB1))
               IF (WS-C(WS-SUB1) > WS-MAX-POS)
                   DISPLAY '**** Parm C ' WS-SUB1 '  excessive '
                   GO TO 0550-VALIDATE-ERROR.

      ****************************************
      *    edit record inclusion pointer and counter
      *+**************************************
           IF PARM01-DASH = SPACE OR '-'
               MOVE PARM01-DASH               TO WS-D-DASH(WS-SUB1)
           ELSE
               DISPLAY '**** Parm - ' WS-SUB1 '  dash or space '
               GO TO 0550-VALIDATE-ERROR.
           IF PARM01-D NOT NUMERIC
               DISPLAY '**** Parm D ' WS-SUB1 '  not numeric '
               GO TO 0550-VALIDATE-ERROR.
           MOVE PARM01-D                      TO WS-D(WS-SUB1).
           IF PARM01-E NOT NUMERIC
               DISPLAY '**** Parm E ' WS-SUB1 '  not numeric '
               GO TO 0550-VALIDATE-ERROR.
           MOVE PARM01-E                      TO WS-E(WS-SUB1).

      ****************************************
      *    edit marker for beginning and ending pull values
      *+**************************************
           IF PARM01-F = ' ' OR 'P' OR '+' OR '-'
                          OR '1' OR '2' OR '3' OR '4' OR '5'
               MOVE PARM01-F                  TO WS-F(WS-SUB1)
           ELSE
               DISPLAY '**** Parm F ' WS-SUB1 '  not a valid value '
               GO TO 0550-VALIDATE-ERROR.
           IF PARM01-H = ' ' OR 'P' OR '+' OR '-'
                          OR '1' OR '2' OR '3' OR '4' OR '5'
               MOVE PARM01-H                  TO WS-H(WS-SUB1)
           ELSE
               DISPLAY '**** Parm H ' WS-SUB1 '  not a valid value '
               GO TO 0550-VALIDATE-ERROR.

           IF PARM01-F = SPACE
               MOVE '00000'                   TO WS-G(WS-SUB1)
           ELSE
               MOVE PARM01-G                  TO WS-G(WS-SUB1).
           IF PARM01-H = SPACE
               MOVE '00000'                   TO WS-I(WS-SUB1)
           ELSE
               MOVE PARM01-I                  TO WS-I(WS-SUB1).

      ****************************************
      *    edit for obvious numeric value errors
      *+**************************************
           IF PARM01-F = '+' OR '-' OR 'P'
             IF PARM01-G NOT NUMERIC
                 DISPLAY '**** Parm G ' WS-SUB1 '  not numeric '
                 GO TO 0550-VALIDATE-ERROR.
           IF PARM01-H = '+' OR '-' OR 'P'
             IF PARM01-I NOT NUMERIC
                 DISPLAY '**** Parm I ' WS-SUB1 '  not numeric '
                 GO TO 0550-VALIDATE-ERROR.

           IF PARM01-F = 'P'
             IF WS-G-N(WS-SUB1) > WS-INPUT-RCD-LENGTH
                 DISPLAY '**** Parm G ' WS-SUB1 '  excessive '
                 GO TO 0550-VALIDATE-ERROR.
           IF PARM01-H = 'P'
             IF WS-I-N(WS-SUB1) > WS-INPUT-RCD-LENGTH
                 DISPLAY '**** Parm I ' WS-SUB1 '  excessive '
                 GO TO 0550-VALIDATE-ERROR.
           IF PARM01-F = 'P'
               AND PARM01-H = 'P'
               IF WS-G-N(WS-SUB1) > WS-I-N(WS-SUB1)
                   DISPLAY '**** Parm G ' WS-SUB1 '  > I '
                   GO TO 0550-VALIDATE-ERROR.
           IF PARM01-F = '+' OR '-'
             IF WS-G-N(WS-SUB1) > WS-INPUT-RCD-LENGTH
                 DISPLAY '**** Parm G ' WS-SUB1
                         '  > record length '
                 GO TO 0550-VALIDATE-ERROR.
           IF PARM01-H = '+' OR '-'
             IF WS-I-N(WS-SUB1) > WS-INPUT-RCD-LENGTH
                 DISPLAY '**** Parm I ' WS-SUB1 '  > record length '
                 GO TO 0550-VALIDATE-ERROR.

           MOVE PARM01-DOT1                   TO WS-DOT1(WS-SUB1).
           MOVE PARM01-DOT2                   TO WS-DOT2(WS-SUB1).
           IF PARM01-DOT1 = 'E'
             IF PARM01-F = '1' OR '2' OR '3' OR '4' OR '5'
                 CONTINUE
             ELSE
                 DISPLAY '**** Parm . ' WS-SUB1
                         '  E requires 1/2/3/4/5 '
                 GO TO 0550-VALIDATE-ERROR
           ELSE
           IF PARM01-DOT1 = 'F' OR 'H'
             IF PARM01-F = '+' OR '-'
                 CONTINUE
             ELSE
                 DISPLAY '**** Parm . ' WS-SUB1 '  F/H requires +/- '
                 GO TO 0550-VALIDATE-ERROR
           ELSE
           IF PARM01-DOT1 = SPACE
               CONTINUE
           ELSE
               DISPLAY '**** Parm . ' WS-SUB1 '  not a valid value '
               GO TO 0550-VALIDATE-ERROR.

           IF PARM01-DOT2 = 'E'
             IF PARM01-H = '1' or '2' or '3' or '4' or '5'
                 CONTINUE
             ELSE
                 DISPLAY '**** Parm . ' WS-SUB1
                         '  E requires 1/2/3/4/5 '
                 GO TO 0550-VALIDATE-ERROR
           ELSE
           IF PARM01-DOT2 = 'F' OR 'H'
             IF PARM01-H = '+' OR '-'
                 CONTINUE
             ELSE
                 DISPLAY '**** Parm . ' WS-SUB1
                         '  F/H requires +/- '
                 GO TO 0550-VALIDATE-ERROR
           ELSE
           IF PARM01-DOT2 = SPACE
               CONTINUE
           ELSE
               DISPLAY '**** Parm . ' WS-SUB1
                       '  not a valid value '
               GO TO 0550-VALIDATE-ERROR.

           IF PARM01-NBR1 = SPACE
               MOVE 1                         TO WS-NBR1(WS-SUB1)
           ELSE
           IF PARM01-NBR1 NOT NUMERIC
               DISPLAY '**** Parm # ' WS-SUB1
                       '  not numeric  '
               GO TO 0550-VALIDATE-ERROR
           ELSE
               MOVE PARM01-NBR1               TO WS-NBR1(WS-SUB1).
           IF PARM01-NBR2 = SPACE
               MOVE 1                         TO WS-NBR2(WS-SUB1)
           ELSE
           IF PARM01-NBR2 NOT NUMERIC
               DISPLAY '**** Parm # ' WS-SUB1 '  not numeric '
               GO TO 0550-VALIDATE-ERROR
           ELSE
               MOVE PARM01-NBR2               TO WS-NBR2(WS-SUB1).
           IF WS-NBR1(WS-SUB1) = ZERO
               MOVE 1                         TO WS-NBR1(WS-SUB1).
           IF WS-NBR2(WS-SUB1) = ZERO
               MOVE 1                         TO WS-NBR2(WS-SUB1).

           MOVE PARM01-J                      TO WS-TTL.
           IF WS-TTL-1 = 'I'
               AND WS-TTL-2X3 NUMERIC
               AND WS-TTL-4 = SPACE
               MOVE WS-TTL-2X3                TO WS-WORK2
               COMPUTE WS-WORK3 = WS-INPUT-RCD-LENGTH - WS-WORK2
               IF LS-NUMBERING-SW = 'Y'
                 IF WS-WORK3 < 12
                     DISPLAY '**** Parm J ' WS-SUB1 '  is too long '
                     GO TO 0550-VALIDATE-ERROR
                 ELSE
                 IF WS-TTL-5 = 'L' OR 'U'
                     AND WS-TTL-6X9 NUMERIC
                     AND WS-TTL-10X13 NUMERIC
                     MOVE PARM01-J(5: )       TO WS-TTL
                 ELSE
                     CONTINUE
               ELSE
               IF WS-WORK3 < 2
                   DISPLAY '**** Parm J ' WS-SUB1 '  > record length  '
                   GO TO 0550-VALIDATE-ERROR
               ELSE
               IF WS-TTL-5 = 'L' OR 'U'
                   AND WS-TTL-6X9 NUMERIC
                   AND WS-TTL-10X13 NUMERIC
                   MOVE PARM01-J(5: )         TO WS-TTL.

           IF WS-TTL-1 = 'L'
               AND WS-TTL-2X5 NUMERIC
               AND WS-TTL-6X9 NUMERIC
               MOVE WS-TTL-2X5                TO WS-WORK1
               MOVE WS-TTL-6X9                TO WS-WORK3
               IF WS-WORK1 > ZERO
                   AND WS-WORK1 > WS-INPUT-RCD-LENGTH
                   DISPLAY '**** Parm J ' WS-SUB1 '  L #1 > rec len '
                   GO TO 0550-VALIDATE-ERROR
               ELSE
               IF WS-WORK3 > ZERO
                   AND WS-WORK3 > WS-INPUT-RCD-LENGTH
                   DISPLAY '**** Parm J ' WS-SUB1 '  L #2 > rec len '
                   GO TO 0550-VALIDATE-ERROR
               ELSE
               IF WS-WORK3 > ZERO
                 IF WS-WORK1 > WS-WORK3
                   DISPLAY '**** Parm J ' WS-SUB1 '  L #1 > #2 '
                   GO TO 0550-VALIDATE-ERROR.

           IF WS-TTL-1 = 'U'
               AND WS-TTL-2X5 NUMERIC
               AND WS-TTL-6X9 NUMERIC
               MOVE WS-TTL-2X5                TO WS-WORK1
               MOVE WS-TTL-6X9                TO WS-WORK3
               IF WS-WORK1 > ZERO
                   AND WS-WORK1 > WS-INPUT-RCD-LENGTH
                   DISPLAY '**** Parm J ' WS-SUB1 '  U #1 > rec len '
                   GO TO 0550-VALIDATE-ERROR
               ELSE
               IF WS-WORK3 > ZERO
                   AND WS-WORK3 > WS-INPUT-RCD-LENGTH
                   DISPLAY '**** Parm J ' WS-SUB1 '  U #2 > rec len '
                   GO TO 0550-VALIDATE-ERROR
               ELSE
               IF WS-WORK3 > ZERO
                 IF WS-WORK1 > WS-WORK3
                     DISPLAY '**** Parm J ' WS-SUB1 '  U #1 > #2 '
                     GO TO 0550-VALIDATE-ERROR.

           MOVE PARM01-J                      TO WS-J(WS-SUB1).

           IF WS-D-DASH(WS-SUB1) = '-'
             IF WS-D(WS-SUB1) > ZERO
                 MOVE 'Y'                     TO WS-SORT-SW.

           IF LS-TEST-SW = '1' OR '9'
               DISPLAY '**PARM ' WS-STRING-VALUES(WS-SUB1).

           GO TO 0550-VALIDATE-PARM-EXIT.

       0550-VALIDATE-ERROR.
           MOVE +0550                         TO WS-RETURN-CODE.
           INITIALIZE WS-STRING-VALUES(WS-SUB1).
           SUBTRACT 1 FROM WS-SUB1.

       0550-VALIDATE-PARM-EXIT. EXIT.

       0600-READ-INFILE.
           READ INFILE.
           IF WS-STAT = ZERO
               ADD 1                          TO WS-IN-CNT
               PERFORM 0700-SELECT THRU
                       0700-SELECT-EXIT
           ELSE
           IF WS-STAT = 10
               MOVE 'Y'                       TO WS-END-INFILE-SW
           ELSE
               DISPLAY '**** PULLFILE read error on INFILE '
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0600                     TO WS-RETURN-CODE.
           IF LS-TEST-SW = '3' OR '9'
             IF MORE-INFILE-RCDS
                 DISPLAY '**INFILE rcd ' INFILE-RECORD.

       0600-READ-INFILE-EXIT. EXIT.

      ****************************************
      *    after data found, and ws-line table values set,
      *    write out selected records that match line table.
      *    - or -
      *    if possibility exists that line table includes
      *    a record that has already been read, release line
      *    table values to sort for later processing.
      ****************************************
       0700-SELECT.
           MOVE 'N'                           TO WS-CONDENSE-SW.
           PERFORM 2300-CONDENSE-LINE-TABLE
               UNTIL WS-CONDENSE-SW = 'Y'.
           PERFORM 0900-CHECK-DATA
               VARYING WS-SUB1 FROM 1 BY 1
               UNTIL WS-SUB1 > WS-PARM01-MAX.
           IF WS-LINE > ZERO
             IF WS-SORT-SW = 'N'
                 PERFORM 0800-TEST-OUTPUT
                     VARYING WS-SUB3 FROM 1 BY 1
                     UNTIL WS-SUB3 > WS-LINE
             ELSE
                 PERFORM 0800-RELEASE-SORT
                     VARYING WS-SUB3 FROM 1 BY 1
                     UNTIL WS-SUB3 > WS-LINE.
           IF WS-LINE > ZERO
             IF LS-TEST-SW = '0' OR '9'
                 DISPLAY '**WS-LINE ' WS-LINE
                 DISPLAY '**WS-MAX-LINE ' WS-MAX-LINE.

       0700-SELECT-EXIT. EXIT.

       0800-TEST-OUTPUT.
           IF WS-IN-CNT < WS-LINE1(WS-SUB3)
               OR WS-IN-CNT > WS-LINE2(WS-SUB3)
               CONTINUE
           ELSE
               PERFORM 1900-POST-SORT THRU
                       1900-CHECK-RCD-NBR-EXIT
               IF LS-TEST-SW = '1' OR '9'
                   DISPLAY '**LINE TABLE ' WS-LINE-VALUES(WS-SUB3).

       0800-RELEASE-SORT.
           IF WS-LINE1(WS-SUB3) > ZERO
             IF WS-REL(WS-SUB3) = SPACE OR 'S'
                 MOVE WS-LINE1(WS-SUB3)       TO SR-LINE1
                 MOVE WS-LINE2(WS-SUB3)       TO SR-LINE2
                 MOVE WS-SUB(WS-SUB3)         TO SR-SUB
                 MOVE WS-SEL1(WS-SUB3)        TO SR-SEL1
                 MOVE WS-SEL2(WS-SUB3)        TO SR-SEL2
                 MOVE WS-TITLE(WS-SUB3)       TO SR-TITLE
                 MOVE 'Y'                     TO WS-REL(WS-SUB3)
                 RELEASE SORT-RECORD
                 IF LS-TEST-SW = '2' OR '9'
                     DISPLAY '**RELEASED ' SORT-RECORD.

      ****************************************
      *    loop through record searching for a string at
      *    a particular position or anywhere in the record.
      *+**************************************
       0900-CHECK-DATA.
           MOVE WS-A(WS-SUB1)                 TO WS-A2.
           MOVE WS-XSI(WS-SUB1)               TO WS-XSI2.
           MOVE WS-B(WS-SUB1)                 TO WS-B2.
           MOVE WS-C-M(WS-SUB1)               TO WS-C2-M.
           MOVE WS-C(WS-SUB1)                 TO WS-C2.
           MOVE WS-D(WS-SUB1)                 TO WS-D2.
           MOVE WS-D-DASH(WS-SUB1)            TO WS-D2-DASH.
           MOVE WS-E(WS-SUB1)                 TO WS-E2.
           MOVE WS-F(WS-SUB1)                 TO WS-F2.
           MOVE WS-G(WS-SUB1)                 TO WS-G2.
           MOVE WS-H(WS-SUB1)                 TO WS-H2.
           MOVE WS-I(WS-SUB1)                 TO WS-I2.
           MOVE WS-J(WS-SUB1)                 TO WS-J2.
           MOVE WS-DOT1(WS-SUB1)              TO WS-DT1.
           MOVE WS-DOT2(WS-SUB1)              TO WS-DT2.
           MOVE WS-NBR1(WS-SUB1)              TO WS-NB1.
           MOVE WS-NBR2(WS-SUB1)              TO WS-NB2.
           COMPUTE WS-MAX-POS = WS-INPUT-RCD-LENGTH - WS-B2 + 1.
           IF WS-XSI2 NUMERIC
               MOVE WS-XSI2                   TO WS-XSI-MAX
           ELSE
           IF WS-E2 > ZERO
               MOVE 1                         TO WS-XSI-MAX
           ELSE
               MOVE ZERO                      TO WS-XSI-MAX.
           IF LS-TEST-SW = '0' OR '9'
               DISPLAY '**WS-XSI-MAX ' WS-XSI-MAX.
           MOVE ZERO                          TO WS-DUPL-CNT.
      ****************************************
      *    'I' means include all records
      *        'S' can turn off 'I' using ws-override-i-sw
      *    'X' means exclude records when string found
      *    'S' means stop prev inclusive pull at this found line
      *     #  means allow number of duplicate pulls for that parm
      ****************************************
           IF WS-XSI2 = 'I'
             IF WS-OVERRIDE-I-SW = 'Y'
                 CONTINUE
             ELSE
             IF WS-C2-M = SPACE
                 AND WS-C2 > ZERO
                 MOVE WS-C2                   TO WS-X
                 PERFORM 1100-MATCH-MADE THRU
                         1100-MATCH-MADE-EXIT
             ELSE
                 MOVE 1                       TO WS-X
                 PERFORM 1100-MATCH-MADE THRU
                         1100-MATCH-MADE-EXIT
           ELSE
           IF WS-C2-M = SPACE
               AND WS-C2 > ZERO
               MOVE WS-C2                     TO WS-SUB2
               PERFORM 1000-LOOP-THRU-RCD
           ELSE
               PERFORM 1000-LOOP-THRU-RCD
                   VARYING WS-SUB2 FROM 1 BY 1
                   UNTIL WS-SUB2 > WS-MAX-POS.

      *
      *                 \\|//
      *                 (. .)
      *-------------oOOo-(_)-oOOo-------------

       1000-LOOP-THRU-RCD.
           IF WS-A2 = '#NBR#'
             IF INFILE-RCD(WS-SUB2: WS-B2) NUMERIC
               IF WS-XSI2 = 'X'
                   MOVE WS-PARM01-MAX         TO WS-SUB1
               ELSE
                   MOVE WS-SUB2               TO WS-X
                   PERFORM 1100-MATCH-MADE THRU
                           1100-MATCH-MADE-EXIT
             ELSE
                 CONTINUE
           ELSE
           IF WS-A2 = '#SPACE#'
             IF INFILE-RCD(WS-SUB2: WS-B2) = SPACE
               IF WS-XSI2 = 'X'
                   MOVE WS-PARM01-MAX         TO WS-SUB1
               ELSE
                   MOVE WS-SUB2               TO WS-X
                   PERFORM 1100-MATCH-MADE THRU
                           1100-MATCH-MADE-EXIT
             ELSE
                 CONTINUE
           ELSE
           IF INFILE-RCD(WS-SUB2: WS-B2) = WS-A2(1: WS-B2)
             IF WS-XSI2 = 'X'
                 MOVE WS-PARM01-MAX           TO WS-SUB1
             ELSE
                 MOVE WS-SUB2                 TO WS-X
                 PERFORM 1100-MATCH-MADE THRU
                         1100-MATCH-MADE-EXIT.

      ****************************************
      *    now that string is found, search for the beginning
      *    and ending values which will be used to pull the
      *    output data.
      *+**************************************
       1100-MATCH-MADE.
           IF WS-C2-M = 'M'
               ADD 1                          TO WS-DUPL-CNT
               IF WS-DUPL-CNT > WS-C2
                   MOVE WS-MAX-POS            TO WS-SUB2
                   MOVE 'Y'                   TO WS-DUPL-C-SW
                   GO TO 1100-MATCH-MADE-EXIT.

           MOVE WS-LINE                       TO WS-WORK2.
           MOVE ZERO                          TO WS-LINE WS-XSI-CNT.
           MOVE SPACE                         TO WS-FOUND-SW.
           MOVE SPACE                         TO WS-DUPL-MAX-SW.
           MOVE WS-X                          TO WS-Y WS-Z.
           PERFORM 1300-FIND-AVAIL-OUT-PLACE
               VARYING WS-SUB3 FROM 1 BY 1
               UNTIL WS-FOUND-SW = 'Y'
               OR WS-DUPL-MAX-SW = 'Y'.
           IF WS-LINE > 300
               DISPLAY '**** Skipping ' WS-SUB1 ' for rcd '
                        WS-IN-CNT ' : line table full'
               GO TO 1100-MATCH-ERROR.
           IF WS-DUPL-MAX-SW = 'Y'
               MOVE 'Y'                       TO WS-DUPL-E-SW
               GO TO 1100-MATCH-MADE-EXIT.
           IF WS-LINE < 1
               DISPLAY '**** Skipping ' WS-SUB1 ' for rcd '
                        WS-IN-CNT ' : line load error '
               GO TO 1100-MATCH-ERROR.
           IF WS-F2 = 'P'
               MOVE WS-G2-N                   TO WS-SEL1(WS-LINE)
           ELSE
           IF WS-F2 = ' '
               MOVE ZERO                      TO WS-SEL1(WS-LINE).
           IF WS-H2 = 'P'
               MOVE WS-I2-N                   TO WS-SEL2(WS-LINE)
           ELSE
           IF WS-H2 = ' '
               MOVE ZERO                      TO WS-SEL2(WS-LINE).
      ****************************************
      *    if using a delimiter to determine the beginning
      *    or ending pull value, search through the record:
      *    if delimiter found, save position and continue, else exit.
      *+**************************************
           IF (WS-F2 = '1' OR '2' OR '3' OR '4' OR '5')
               AND WS-DT1 = 'H'
               PERFORM 1150-DELIMIT-H
               PERFORM 1150-DELIMIT-F
           ELSE
               PERFORM 1150-DELIMIT-F
               PERFORM 1150-DELIMIT-H.

           IF WS-FOUND-SW = 'E'
               GO TO 1100-MATCH-ERROR.

           IF WS-F2 = '+' OR '-'
             IF WS-DT1 = 'H'
                 MOVE WS-Z                    TO WS-X.
           IF WS-F2 = '-'
               COMPUTE WS-WORK1 = WS-X - WS-G2-N
               IF WS-WORK1 < 1
                   DISPLAY '**** Skipping ' WS-SUB1 ' for rcd '
                            WS-IN-CNT ' : PARM G < 1'
                   GO TO 1100-MATCH-ERROR
               ELSE
                   MOVE WS-WORK1              TO WS-SEL1(WS-LINE)
                                                 WS-Y.
           IF WS-F2 = '+'
               COMPUTE WS-WORK1 = WS-X + WS-G2-N
               IF WS-WORK1 > WS-INPUT-RCD-LENGTH
                   DISPLAY '**** Skipping ' WS-SUB1 ' for rcd '
                            WS-IN-CNT ' : PARM G > rcd len'
                   GO TO 1100-MATCH-ERROR
               ELSE
                   MOVE WS-WORK1              TO WS-SEL1(WS-LINE)
                                                 WS-Y.
           IF WS-H2 = '+' OR '-'
             IF WS-DT2 = 'F'
                 MOVE WS-Y                    TO WS-X.
           IF WS-H2 = '-'
               COMPUTE WS-WORK1 = WS-X - WS-I2-N
               IF WS-WORK1 < 1
                   DISPLAY '**** Skipping ' WS-SUB1 ' for rcd '
                            WS-IN-CNT ' : PARM I < 1'
                   GO TO 1100-MATCH-ERROR
               ELSE
                   MOVE WS-WORK1              TO WS-SEL2(WS-LINE).
           IF WS-H2 = '+'
               COMPUTE WS-WORK1 = WS-X + WS-I2-N
               IF WS-WORK1 > WS-INPUT-RCD-LENGTH
                   DISPLAY '**** Skipping ' WS-SUB1 ' for rcd '
                            WS-IN-CNT ' : PARM I > rcd len'
                   GO TO 1100-MATCH-ERROR
               ELSE
                   MOVE WS-WORK1              TO WS-SEL2(WS-LINE).
      ****************************************
      *    beginning/ending pull positions have been determined.
      *    validate values again and determine output record
      *    number for pulling.
      *+**************************************
           IF WS-SEL2(WS-LINE) > ZERO
             IF WS-SEL1(WS-LINE) > WS-SEL2(WS-LINE)
               IF LS-SWITCH = 'Y'
                   DISPLAY '**** Switching ' WS-SUB1 ' for rcd '
                            WS-IN-CNT ' : PARM G > I'
                   MOVE WS-SEL1(WS-LINE)      TO WS-WORK2
                   MOVE WS-SEL2(WS-LINE)      TO WS-SEL1(WS-LINE)
                   MOVE WS-WORK2              TO WS-SEL2(WS-LINE)
               ELSE
                   DISPLAY '**** Skipping ' WS-SUB1 ' for rcd '
                            WS-IN-CNT ' : PARM G > I'
                   GO TO 1100-MATCH-ERROR.

           IF WS-J2 NOT = SPACE
               MOVE WS-J2                     TO WS-TITLE(WS-LINE)
           ELSE
               MOVE SPACE                     TO WS-TITLE(WS-LINE).
           MOVE SPACE                         TO WS-REL(WS-LINE).
      ****************************************
      *    D2 = ZERO  :  select current line
      *    D2 > ZERO  :  exclude current or more lines
      *    D2 -       :  include D2 lines before curr line
      *    E2 > 001   :  include E2 lines after D2 line
      *    E2 = 999   :  include all lines after D2 line
      *    XSI = 'S'  :  mark previous line to stop pulling as
      *                    of this line
      *                    D2 = ZERO: exclude current line
      *                    D2 > ZERO: include current or more lines
      *                    D2 -     : exclude dd lines before curr line
      *+**************************************
           IF WS-XSI2 = 'S'
               GO TO 1100-STOP-PREV-LINE.
           IF WS-D2-DASH = '-'
               COMPUTE WS-WORK1 = WS-IN-CNT - WS-D2
               IF WS-WORK1 > ZERO
                   MOVE WS-WORK1              TO WS-LINE1(WS-LINE)
               ELSE
                   DISPLAY '**** Skipping ' WS-SUB1 ' for rcd '
                            WS-IN-CNT ' : PARM - caused line 1 < 1 '
                   GO TO 1100-MATCH-ERROR
           ELSE
           IF WS-D2 > ZERO
               COMPUTE WS-LINE1(WS-LINE) = WS-IN-CNT + WS-D2
           ELSE
               MOVE WS-IN-CNT                 TO WS-LINE1(WS-LINE).
           IF WS-E2 = ZERO
               MOVE WS-LINE1(WS-LINE)         TO WS-LINE2(WS-LINE)
           ELSE
           IF WS-E2 = 999
               MOVE 99999990                  TO WS-LINE2(WS-LINE)
           ELSE
               COMPUTE WS-LINE2(WS-LINE) =
                       WS-LINE1(WS-LINE) + WS-E2.
           GO TO 1100-MATCH-MADE-EXIT.

       1100-STOP-PREV-LINE.
           IF WS-LINE > 1
               COMPUTE WS-WORK3 = WS-LINE - 1
               PERFORM 1200-SET-STOP
                   VARYING WS-SUB3 FROM WS-WORK3 BY -1
                   UNTIL WS-SUB3 < 1.
           IF WS-SUB1 > 1
             IF WS-XSI(WS-SUB1 - 1) = 'I'
               IF WS-OVERRIDE-I-SW = SPACE
                   MOVE 'Y'                   TO WS-OVERRIDE-I-SW
                   DISPLAY '**** Parm I ' WS-SUB1 ' for rcd '
                           WS-IN-CNT ' : overridden by parm S '.

       1100-MATCH-ERROR.
           MOVE ZERO                          TO WS-LINE1(WS-LINE).
           MOVE ZERO                          TO WS-LINE2(WS-LINE).
           MOVE ZERO                          TO WS-SUB(WS-LINE).
           MOVE ZERO                          TO WS-SEL1(WS-LINE).
           MOVE ZERO                          TO WS-SEL2(WS-LINE).
           MOVE SPACE                         TO WS-TITLE(WS-LINE).
           MOVE SPACE                         TO WS-REL(WS-LINE).

       1100-MATCH-MADE-EXIT. EXIT.

       1200-SET-STOP.
           IF WS-SUB(WS-SUB3) = WS-SUB1 - 1
             IF WS-D2-DASH = '-'
                 COMPUTE WS-WORK1 = WS-IN-CNT - WS-D2
                 IF WS-LINE1(WS-SUB3) > WS-WORK1
                     DISPLAY '**** Skipping ' WS-SUB1 ' for rcd '
                              WS-IN-CNT ' : parm - caused line 1'
                              ' > line 2'
                     MOVE ZERO                TO WS-SUB3
                 ELSE
                     MOVE WS-WORK1            TO WS-LINE2(WS-SUB3)
                     MOVE 'S'                 TO WS-REL(WS-SUB3)
                     MOVE ZERO                TO WS-SUB3
             ELSE
                 COMPUTE WS-LINE2(WS-SUB3) = WS-IN-CNT + WS-D2
                 MOVE 'S'                     TO WS-REL(WS-SUB3)
                 MOVE ZERO                    TO WS-SUB3.

       1150-DELIMIT-F.
           MOVE SPACE                         TO WS-FOUND-SW.
           IF WS-F2 = '1' OR '2' OR '3' OR '4' OR '5'
               MOVE 1                         TO WS-LOOP-CNT
               PERFORM 1200-LOOP-FOR-DELIMIT-F
                   VARYING WS-SUB3 FROM 1 BY 1
                   UNTIL WS-SUB3 > (WS-INPUT-RCD-LENGTH - 3)
               IF WS-FOUND-SW = SPACE
                   DISPLAY '**** Skipping ' WS-SUB1 ' for rcd '
                            WS-IN-CNT ' : delimit F (' WS-G2
                            ') not found'
                   MOVE 'E'                   TO WS-FOUND-SW
               ELSE
                   MOVE WS-SEL1(WS-LINE)      TO WS-Y.

       1150-DELIMIT-H.
           MOVE SPACE                         TO WS-FOUND-SW.
           IF WS-H2 = '1' OR '2' OR '3' OR '4' OR '5'
               MOVE 1                         TO WS-LOOP-CNT
               PERFORM 1200-LOOP-FOR-DELIMIT-H
                   VARYING WS-SUB3 FROM 1 BY 1
                   UNTIL WS-SUB3 > (WS-INPUT-RCD-LENGTH - 3)
               IF WS-FOUND-SW = SPACE
                   DISPLAY '**** Skipping ' WS-SUB1 ' for rcd '
                            WS-IN-CNT ' : delimit H (' WS-I2
                            ') not found'
                   MOVE 'E'                   TO WS-FOUND-SW
               ELSE
                   MOVE WS-SEL2(WS-LINE)      TO WS-Z.

      ****************************************
      *    find delimiter.  include or exclude after found.
      *    since this is the beginning delimiter, if exclude:
      *    add length of delimiter to find position.
      *+**************************************
       1200-LOOP-FOR-DELIMIT-F.
           IF INFILE-RCD(WS-SUB3: WS-F2-N) = WS-G2(1: WS-F2-N)
             IF WS-LOOP-CNT = WS-NB1
                 MOVE 'Y'                     TO WS-FOUND-SW
                 MOVE WS-SUB3                 TO WS-SEL1(WS-LINE)
                 MOVE WS-INPUT-RCD-LENGTH     TO WS-SUB3
                 IF WS-DT1 = 'E'
                     ADD WS-F2-N              TO WS-SEL1(WS-LINE)
                 ELSE
                     CONTINUE
             ELSE
                 ADD 1                        TO WS-LOOP-CNT.

      ****************************************
      *    find delimiter.  include or exclude after found.
      *    since this is the ending delimiter, if include:
      *    add length of delimiter then subtract 1.  if exclude:
      *    subtract 1 from find position.
      *+**************************************
       1200-LOOP-FOR-DELIMIT-H.
           IF INFILE-RCD(WS-SUB3: WS-H2-N) = WS-I2(1: WS-H2-N)
             IF WS-LOOP-CNT = WS-NB2
                 MOVE 'Y'                     TO WS-FOUND-SW
                 MOVE WS-SUB3                 TO WS-SEL2(WS-LINE)
                 MOVE WS-INPUT-RCD-LENGTH     TO WS-SUB3
                 IF WS-DT2 = 'E'
                     SUBTRACT 1 FROM WS-SEL2(WS-LINE)
                 ELSE
                     ADD WS-H2-N              TO WS-SEL2(WS-LINE)
                     SUBTRACT 1 FROM WS-SEL2(WS-LINE)
             ELSE
                 ADD 1                        TO WS-LOOP-CNT.

      ****************************************
      *    load table that holds record numbers and position
      *    placements of records to pull.
      *    unless a nbr of duplicate pulls is requested
      *    in parm xsi when parm e > zero, skip adding pull
      *    lines to the line table for this parm.
      *+**************************************
       1300-FIND-AVAIL-OUT-PLACE.
           IF WS-SUB3 > 299
               MOVE 888                       TO WS-LINE
               MOVE 'Y'                       TO WS-FOUND-SW
           ELSE
           IF (WS-LINE2(WS-SUB3) < WS-IN-CNT)
               AND (WS-REL(WS-SUB3) NOT = 'S')
               MOVE WS-SUB3                   TO WS-LINE
               MOVE WS-SUB1                   TO WS-SUB(WS-LINE)
               MOVE 'Y'                       TO WS-FOUND-SW
               IF WS-LINE > WS-MAX-LINE
                   MOVE WS-LINE               TO WS-MAX-LINE
               ELSE
                   CONTINUE
           ELSE
           IF WS-XSI-MAX > ZERO
               AND WS-SUB(WS-SUB3) = WS-SUB1
               ADD 1                          TO WS-XSI-CNT
               IF WS-XSI-CNT NOT < WS-XSI-MAX
                   MOVE WS-WORK2              TO WS-LINE
                   MOVE 'Y'                   TO WS-DUPL-MAX-SW.

      ****************************************
      ****************************************
      *   SORT SKIPPED
      *    loop through the 'line' table and determine if the
      *    current record is eligible for pulling to the
      *    output file.  when sort is skipped then 1900-POST-SORT
      *    is accessed from above during the first pass of INFILE.
      *   SORT NOT SKIPPED
      *    all the following logic pertains to the second
      *    pass of INFILE, where sorted records from the line table
      *    are used for record selection instead of the line table
      *    itself, in order to include records not accessible
      *    when line table was loaded.
      *+**************************************
      *+**************************************
       1400-SORT-OUT.
           IF WS-SORT-SW = 'Y'
               PERFORM 1400-PREPARE-RETURN-SORT.

       1400-PREPARE-RETURN-SORT.
           IF LS-TEST-SW = '2' OR '9'
               DISPLAY '**SORT SECTION '.
           PERFORM 0300-CLOSE-INFILE.
           PERFORM 0200-OPEN-INFILE.
           PERFORM VARYING WS-SUB1 FROM 1 BY 1
               UNTIL WS-SUB1 > WS-MAX-LINE
               MOVE ZERO                      TO WS-SUB(WS-SUB1)
               MOVE ZERO                      TO WS-LINE1(WS-SUB1)
               MOVE ZERO                      TO WS-LINE2(WS-SUB1)
               MOVE ZERO                      TO WS-SEL1(WS-SUB1)
               MOVE ZERO                      TO WS-SEL2(WS-SUB1)
               MOVE SPACE                     TO WS-TITLE(WS-SUB1)
               MOVE SPACE                     TO WS-REL(WS-SUB1)
           END-PERFORM.
           MOVE ZERO                          TO WS-LINE.
           MOVE ZERO                          TO WS-MAX-LINE.
           MOVE ZERO                          TO WS-IN-CNT.
           INITIALIZE WS-HOLD-VALUES.
           MOVE 'N'                           TO WS-END-INFILE-SW.
           IF WS-RETURN-CODE = ZERO
               PERFORM 1400-RETURN-RECORDS THRU
                       1400-RETURN-RECORDS-EXIT
                       UNTIL END-OF-INFILE.

       1400-RETURN-RECORDS.
           PERFORM 1800-READ-INFILE.
           IF END-OF-INFILE
               GO TO 1400-RETURN-RECORDS-EXIT.
           IF MORE-SORT-RCDS
               MOVE 'N'                       TO WS-CONDENSE-SW
               MOVE 'N'                       TO WS-SKIP-RCD-SW
               PERFORM 2300-CONDENSE-LINE-TABLE
                   UNTIL WS-CONDENSE-SW = 'Y'
               PERFORM 1600-CHECK-LINE-AVAIL THRU
                       1600-CHECK-LINE-EXIT
               IF WS-SKIP-RCD-SW = 'N'
                   PERFORM 1600-LOAD-SORT THRU
                           1600-LOAD-SORT-EXIT.
           PERFORM 1500-TEST-OUTPUT
               VARYING WS-SUB3 FROM 1 BY 1
               UNTIL WS-SUB3 > WS-LINE.

       1400-RETURN-RECORDS-EXIT. EXIT.

       1500-TEST-OUTPUT.
           IF WS-IN-CNT < WS-LINE1(WS-SUB3)
               OR WS-IN-CNT > WS-LINE2(WS-SUB3)
               CONTINUE
           ELSE
               PERFORM 1900-POST-SORT THRU
                       1900-CHECK-RCD-NBR-EXIT.

       1600-LOAD-SORT.
           IF WS-LINE > 299
               GO TO 1600-LOAD-SORT-EXIT.
      ****************************************
      *    if last sort record was for a different line, it was
      *    not loaded into line table.  use here before reading next
      *    sort record.
      ****************************************
           PERFORM 1800-RETURN-SORT.
           IF END-OF-SORT
               GO TO 1600-LOAD-SORT-EXIT.
           IF LS-TEST-SW = '2' OR '9'
               DISPLAY '**SORT RCD ' SORT-RECORD.
      ****************************************
      *    skip sort records that were overridden by testing
      *    against previous record.
      *+**************************************
           MOVE 'N'                           TO WS-SKIP-RCD-SW.
           IF WS-LINE > ZERO
               PERFORM 1700-SKIP-OVERRIDE
                   VARYING WS-SUB1 FROM WS-LINE BY -1
                   UNTIL WS-SUB1 < 1
               IF WS-SKIP-RCD-SW = 'Y'
                   GO TO 1600-LOAD-SORT.
           MOVE 'N'                           TO WS-SKIP-RCD-SW.
           PERFORM 1600-CHECK-LINE-AVAIL THRU
                   1600-CHECK-LINE-EXIT.
      ****************************************
      *    load line table from sort records
      *+**************************************
           IF WS-SKIP-RCD-SW = 'Y'
               GO TO 1600-LOAD-SORT-EXIT.
           MOVE SORT-RECORD               TO WS-LINE-VALUES(WS-LINE).
           GO TO 1600-LOAD-SORT.

       1600-LOAD-SORT-EXIT. EXIT.

       1600-CHECK-LINE-AVAIL.
           MOVE ZERO                          TO WS-LINE.
           MOVE SPACE                         TO WS-FOUND-SW.
           PERFORM 2300-FIND-AVAIL-OUT-PLACE
               VARYING WS-SUB3 FROM 1 BY 1
               UNTIL WS-FOUND-SW = 'Y'.
           IF WS-LINE > 300
               MOVE 'Y'                       TO WS-SKIP-RCD-SW
               DISPLAY '**** Skipping ' WS-LINE ' for rcd '
                        WS-IN-CNT ' : line table full'.
           IF WS-LINE < 1
               MOVE 'Y'                       TO WS-SKIP-RCD-SW
               DISPLAY '**** Skipping ' WS-LINE ' for rcd '
                        WS-IN-CNT ' : line load error '.

       1600-CHECK-LINE-EXIT. EXIT.

       1700-SKIP-OVERRIDE.
           IF SR-LINE1 = WS-LINE1(WS-SUB1)
               AND SR-SUB = WS-SUB(WS-SUB1)
               IF SR-LINE2 > WS-LINE2(WS-SUB1)
                   MOVE 'Y'                   TO WS-SKIP-RCD-SW.

       1800-RETURN-SORT.
           RETURN SORT-PARM
               AT END
                   MOVE 99999999              TO SR-LINE1
                   MOVE 'Y'                   TO WS-END-SORT-SW.
           IF MORE-SORT-RCDS
               ADD 1                          TO WS-SORT-RCD-CNT.

       1800-READ-INFILE.
           READ INFILE.
           IF WS-STAT = ZERO
               ADD 1                          TO WS-IN-CNT
           ELSE
           IF WS-STAT = 10
               MOVE 'Y'                       TO WS-END-INFILE-SW
           ELSE
               DISPLAY '**** PULLFILE read error on INFILE '
               DISPLAY '**** FILE STAT = ' WS-STAT
               MOVE +1800                     TO WS-RETURN-CODE.
           IF LS-TEST-SW = '3' OR '9'
             IF MORE-INFILE-RCDS
                 DISPLAY '**INFILE RCD ' INFILE-RECORD.

      ****************************************
      *    determine length of output to pull
      *+**************************************
       1900-POST-SORT.
           MOVE SPACE                         TO WS-HOLD1.
           MOVE SPACE                         TO WS-HOLD2.
           MOVE ZERO                          TO WS-IN WS-OUT.
           MOVE SPACE                         TO WS-REL(WS-SUB3).
           MOVE WS-SEL1(WS-SUB3)              TO WS-IN.
           IF WS-SEL2(WS-SUB3) NOT = ZERO
             IF WS-IN = ZERO
                 MOVE WS-SEL2(WS-SUB3)        TO WS-OUT
             ELSE
                 COMPUTE WS-OUT = WS-SEL2(WS-SUB3) - WS-IN + 1.
           IF WS-IN = ZERO
             IF WS-OUT = ZERO
                 MOVE INFILE-RCD              TO WS-HOLD1
             ELSE
                 MOVE INFILE-RCD(1: WS-OUT) TO WS-HOLD1
           ELSE
           IF WS-OUT = ZERO
               MOVE INFILE-RCD(WS-IN: )       TO WS-HOLD1
           ELSE
               MOVE INFILE-RCD(WS-IN: WS-OUT) TO WS-HOLD1.

      ****************************************
      *    add a line number and/or title in front of the output
      *    record if requested.  or insert a specified number of
      *    spaces as a title.
      *+**************************************
           MOVE SPACE                         TO WS-HOLD2.
           MOVE WS-IN-CNT                     TO WS-IN-CNT-X.
           MOVE WS-TITLE(WS-SUB3)             TO WS-TTL.
           MOVE ZERO                          TO WS-WORK2.
           MOVE ZERO                          TO WS-WORK3.
           IF (WS-TTL-5 = 'L' OR 'U')
               AND WS-TTL-6X9 NUMERIC
               AND WS-TTL-10X13 NUMERIC
               MOVE WS-TTL-6X9                TO WS-WORK1
               MOVE WS-TTL-10X13              TO WS-WORK3
               PERFORM 2000-CONVERT-CASE
               MOVE SPACE                     TO WS-TTL(5: ).
           IF WS-TTL-1 = 'I'
               AND WS-TTL-2X3 NUMERIC
               AND WS-TTL-4 = SPACE
               MOVE WS-TTL-2X3                TO WS-WORK2
               COMPUTE WS-WORK3 = WS-WORK2 + 1
           ELSE
           IF (WS-TTL-1 = 'L' OR 'U')
               AND WS-TTL-2X5 NUMERIC
               AND WS-TTL-6X9 NUMERIC
               MOVE WS-TTL-2X5                TO WS-WORK1
               MOVE WS-TTL-6X9                TO WS-WORK3
               PERFORM 2000-CONVERT-CASE
               MOVE SPACE                     TO WS-TTL.

           IF LS-NUMBERING-SW = 'Y'
             IF WS-TTL = SPACE
                 MOVE WS-IN-CNT-X             TO WS-HOLD2
                 MOVE WS-HOLD1                TO WS-HOLD2(10: )
             ELSE
             IF WS-WORK2 > ZERO
                 MOVE WS-IN-CNT-X        TO WS-HOLD2
                 MOVE WS-TTL-5X15        TO WS-HOLD2(10: WS-WORK2)
                 MOVE WS-HOLD1           TO WS-HOLD2(WS-WORK3: )
             ELSE
                 MOVE WS-IN-CNT-X             TO WS-HOLD2
                 MOVE WS-TTL                  TO WS-HOLD2(10: 15)
                 MOVE WS-HOLD1                TO WS-HOLD2(26: )
           ELSE
           IF WS-TTL = SPACE
               MOVE WS-HOLD1                  TO WS-HOLD2
           ELSE
           IF WS-WORK2 > ZERO
               MOVE WS-TTL-5X15          TO WS-HOLD2(1: WS-WORK2)
               MOVE WS-HOLD1             TO WS-HOLD2(WS-WORK3: )
           ELSE
               MOVE WS-TTL                    TO WS-HOLD2
               MOVE WS-HOLD1                  TO WS-HOLD2(17: ).
           PERFORM 2100-DETERMINE-LINES THRU
                   2100-DETERMINE-EXIT.

       1900-CHECK-RCD-NBR-EXIT. EXIT.

       2000-CONVERT-CASE.
           IF WS-WORK1 = ZERO
               MOVE 1                         TO WS-WORK1.
           IF WS-WORK3 = ZERO
               MOVE WS-INPUT-RCD-LENGTH       TO WS-WORK3
           ELSE
               COMPUTE WS-WORK3 = WS-WORK3 - WS-WORK1 + 1.
           IF WS-TTL-1 = 'L'
               OR WS-TTL-5 = 'L'
               INSPECT WS-HOLD1(WS-WORK1: WS-WORK3) CONVERTING
                                 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' TO
                                 'abcdefghijklmnopqrstuvwxyz'.
           IF WS-TTL-1 = 'U'
               OR WS-TTL-5 = 'U'
               INSPECT WS-HOLD1(WS-WORK1: WS-WORK3) CONVERTING
                                 'abcdefghijklmnopqrstuvwxyz' TO
                                 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.
           MOVE ZERO                          TO WS-WORK1.
           MOVE ZERO                          TO WS-WORK3.

      ****************************************
      *    if '*MAX' parm was used to limit the number of
      *    times a record may print, enforce that here.
      *+**************************************
       2100-DETERMINE-LINES.
           IF WS-LINE-PRINT-MAX > ZERO
             IF WS-IN-CNT = WS-PREV-IN-CNT
                 ADD 1                        TO WS-LINE-PRINT-CNT
                 IF WS-LINE-PRINT-CNT < WS-LINE-PRINT-MAX
                     CONTINUE
                 ELSE
                     GO TO 2100-DETERMINE-EXIT
             ELSE
                 MOVE ZERO                    TO WS-LINE-PRINT-CNT
                 MOVE WS-IN-CNT               TO WS-PREV-IN-CNT.
           IF LS-PAGE-LEN NUMERIC
             IF WS-PRINT-SUM > WS-PRINT-MAX
                 PERFORM 2200-WRITE-OUTPRNT-TOP
             ELSE
                 PERFORM 2200-WRITE-OUTPRNT
           ELSE
               PERFORM 2100-WRITE-OUTFILE.

       2100-DETERMINE-EXIT. EXIT.

       2100-WRITE-OUTFILE.
           WRITE OUTFILE-RECORD FROM WS-HOLD2.
           IF WS-STAT > ZERO
               DISPLAY '**** PULLFILE write error on OUTFILE'
               DISPLAY '**** FILE STAT = ' WS-STAT
               MOVE +2100                     TO WS-RETURN-CODE.
           ADD 1                              TO WS-WRITE-RCD-CNT.

       2200-WRITE-OUTPRNT.
           WRITE OUTPRNT-RECORD FROM WS-HOLD2
               AFTER ADVANCING WS-SPACE-CONTROL LINES.
           IF WS-STAT > ZERO
               DISPLAY '**** PULLFILE write error on OUTPRNT'
               DISPLAY '**** FILE STAT = ' WS-STAT
               MOVE +2200                     TO WS-RETURN-CODE.
           ADD WS-SPACE-CONTROL               TO WS-PRINT-SUM.
           ADD 1                              TO WS-WRITE-RCD-CNT.

       2200-WRITE-OUTPRNT-TOP.
           WRITE OUTPRNT-RECORD FROM WS-HOLD2
               AFTER ADVANCING PAGE-TOP.
           IF WS-STAT > ZERO
               DISPLAY '**** PULLFILE write error on OUTPRNT'
               DISPLAY '**** FILE STAT = ' WS-STAT
               MOVE +2201                     TO WS-RETURN-CODE.
           MOVE 1                             TO WS-PRINT-SUM.
           ADD 1                              TO WS-WRITE-RCD-CNT.

      ****************************************
      *    condense line table entries to keep all valid
      *    entries at top, so additions to not accidently
      *    exclude valid entries further down in the table.
      *+**************************************
       2300-CONDENSE-LINE-TABLE.
           MOVE 'Y'                           TO WS-CONDENSE-SW.
           PERFORM 2300-CONDENSE-OUT-PLACE
               VARYING WS-SUB3 FROM 1 BY 1
               UNTIL WS-SUB3 > WS-MAX-LINE.

       2300-CONDENSE-OUT-PLACE.
           IF WS-SUB3 < 300
             IF WS-LINE2(WS-SUB3) < WS-LINE2(WS-SUB3 + 1)
                 MOVE WS-LINE-VALUES(WS-SUB3) TO WS-HOLD-VALUES
                 MOVE WS-LINE-VALUES(WS-SUB3 + 1) TO
                      WS-LINE-VALUES(WS-SUB3)
                 MOVE WS-HOLD-VALUES TO WS-LINE-VALUES(WS-SUB3 + 1)
                 MOVE 'N'                     TO WS-CONDENSE-SW.

      ****************************************
      *    load table that holds record numbers and position
      *    placements of records to pull, same as in
      *    1300-FIND-AVAIL-OUT-PLACE.
      *+**************************************
       2300-FIND-AVAIL-OUT-PLACE.
           IF WS-SUB3 > 300
               MOVE 'Y'                       TO WS-FOUND-SW
           ELSE
           IF WS-LINE1(WS-SUB3) = ZERO
               OR WS-LINE2(WS-SUB3) < WS-IN-CNT
               MOVE WS-SUB3                   TO WS-LINE
               MOVE 'Y'                       TO WS-FOUND-SW
               IF WS-LINE > WS-MAX-LINE
                   MOVE WS-LINE               TO WS-MAX-LINE.

      ************************************ END PULLFILE
