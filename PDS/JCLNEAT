
       TITLE '  JCLNEAT: align JCL statements    '.
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    JCLNEAT.
      **********************************************************CX003B
      *@@@ C3 align JCL statements
      ****************************************************************
      *
      *  I am interested in knowing if/where these programs
      *  are in use.     Email:  jiannon@me.com
      *
      ****************************************************************
      * Date written: 12/14/2018
      * Author      : Jim Iannone
      *               loop through JCL and make it pretty
      *
      *               Inspired by Carl Hafner who has "NEATJCL"
      *               on CBT tape #357
      *
      * note:  find "--+--" to locate major logic steps in program
      *
      ****************************************************************
      * Date changed: mm/dd/yyyy username
      *               comments...
      ****************************************************************

       ENVIRONMENT DIVISION.

       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           C01 IS PAGE-TOP.

       INPUT-OUTPUT SECTION.
       FILE-CONTROL.

           SELECT JCL01                ASSIGN TO JCL01
                                       ORGANIZATION IS SEQUENTIAL
                                       ACCESS MODE IS SEQUENTIAL
                                       FILE STATUS IS WS-STAT.

           SELECT PARM01               ASSIGN TO PARM01
                                       ORGANIZATION IS SEQUENTIAL
                                       ACCESS MODE IS SEQUENTIAL
                                       FILE STATUS IS WS-STAT.

       DATA DIVISION.
       FILE SECTION.

       FD  JCL01
           RECORDING MODE F.
       01  JCL01-RECORD.
           05  JCL01-RCD               PIC  X(80).

       FD  PARM01
           RECORDING MODE F.
       01  PARM01-RECORD.
           05  PARM01-RCD              PIC  X(80).
           05  PARM01-RCD1             REDEFINES PARM01-RCD.
               10  PARM01-DOCU         PIC  X.
               10  FILLER              PIC  X.
               10  PARM01-FLAG         PIC  X.
               10  FILLER              PIC  X.
               10  PARM01-ITEM         PIC  X(12).
               10  FILLER              PIC  X.
               10  PARM01-LEN          PIC  XXX.
               10  FILLER              PIC  X.
               10  PARM01-POS          PIC  XXX.
               10  FILLER              PIC  X.
               10  PARM01-ST-COL       PIC  XXX.
               10  FILLER              PIC  X.
               10  PARM01-END-COL      PIC  XXX.
               10  FILLER              PIC  X.
               10  PARM01-OPTION       PIC  X(08).
               10  FILLER              PIC  X.
               10  PARM01-EXCLUDE      PIC  X.
               10  FILLER              PIC  X.
               10  PARM01-OPTION2      PIC  X(06).
               10  FILLER              PIC  X(22).
               10  FILLER              PIC  X(08).
           05  PARM01-RCD2             REDEFINES PARM01-RCD.
               10  FILLER              PIC  X(04).
               10  PARM01-ST-END       PIC  X(05).
               10  FILLER              PIC  X.
               10  PARM01-LINE         PIC  X(09).
               10  FILLER              PIC  X(61).

       WORKING-STORAGE SECTION.

       01  WS-START.
           05  FILLER                  PIC  X(32)    VALUE
               ' Working storage JCLNEAT start '.

       01  WS-WORK-FIELDS.
           05  WS-STAT                 PIC  99       VALUE ZERO.
           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.
           05  WS-TALLY                PIC S9(04)    VALUE ZERO COMP.
           05  WS-LS-DATA              PIC  X(10)    VALUE SPACE.
           05  FILLER REDEFINES WS-LS-DATA.
               10  WS-LS-TEST          PIC  X.
               10  WS-LS-EXTRA         PIC  X(09).
           05  WS-1-CYMD               PIC  X(08)    VALUE SPACE.
           05  WS-QUOTE                PIC  X        VALUE X'7D'.
           05  WS-ITEM                 PIC  X(20)    VALUE SPACE.
           05  WS-ITEM-LC              PIC  X(20)    VALUE SPACE.
           05  WS-OPTION               PIC  X(06)    VALUE SPACE.
           05  WS-HOLD-RCD             PIC  X(80)    VALUE SPACE.
           05  WS-HOLD-RCD2            PIC  X(80)    VALUE SPACE.
           05  WS-HOLD-ORIG            PIC  X(80)    VALUE SPACE.
           05  WS-UNSTR-FIELDS.
               10  WS-DSN1             PIC  X(50)    VALUE SPACE.
               10  WS-DSN2             PIC  X(50)    VALUE SPACE.
               10  WS-DSN3             PIC  X(80)    VALUE SPACE.
               10  WS-UNSTR1           PIC  X(20)    VALUE SPACE.
               10  WS-UNSTR2           PIC  X(20)    VALUE SPACE.
               10  WS-UNSTR3           PIC  X(20)    VALUE SPACE.
               10  WS-UNSTR4           PIC  X(20)    VALUE SPACE.
           05  WS-DELIM                PIC  X(10)    VALUE SPACE.
           05  WS-HOLD-06              PIC  X(06)    VALUE SPACE.
           05  WS-HOLD-20              PIC  X(20)    VALUE SPACE.
           05  FILLER REDEFINES WS-HOLD-20.
               10  WS-HOLD-10.
                   15  WS-HOLD-04      PIC  X(04).
                   15  WS-HOLD-5X10    PIC  X(06).
               10  FILLER              PIC  X(10).
           05  WS-HOLD-20-TEMP         PIC  X(20)    VALUE SPACE.
           05  WS-HOLD-PROC            PIC  X(10)    VALUE SPACE.
           05  WS-HOLD-JOB             PIC  X(10)    VALUE SPACE.
           05  WS-HOLD-STEP            PIC  X(10)    VALUE SPACE.
           05  WS-PROC                 PIC  X(10)    VALUE SPACE.
           05  WS-PREV-PROC            PIC  X(10)    VALUE SPACE.
           05  WS-PROGRAM              PIC  X(10)    VALUE SPACE.
           05  WS-JOB                  PIC  X(10)    VALUE SPACE.
           05  WS-STEP                 PIC  X(10)    VALUE SPACE.
           05  WS-BEF                  PIC  X(10)    VALUE SPACE.
           05  WS-AFT                  PIC  X(10)    VALUE SPACE.
           05  WS-OLD-NEW              PIC  X(06)    VALUE SPACE.
           05  WS-EXEC-PREFIX          PIC  X(06)    VALUE SPACE.
           05  WS-PROG-PREFIX          PIC  X(06)    VALUE SPACE.
           05  WS-JOB-PREFIX           PIC  X(06)    VALUE SPACE.
           05  WS-I1-MAX               PIC  9(05)    VALUE ZERO.
           05  WS-W1-MAX               PIC  9(05)    VALUE ZERO.
           05  WS-D1-MAX               PIC  9(05)    VALUE ZERO.
           05  WS-P1-MAX               PIC  9(05)    VALUE ZERO.
           05  WS-J1-MAX               PIC  9(05)    VALUE ZERO.
           05  WS-T1-MAX               PIC  9(05)    VALUE ZERO.
           05  WS-EXEC-INCREMENT       PIC  9(04)    VALUE ZERO.
           05  WS-EXEC-DIGITS          PIC  9(04)    VALUE ZERO.
           05  WS-EXEC-NBR             PIC  9(04)    VALUE ZERO.
           05  WS-JOB-INCREMENT        PIC  9(04)    VALUE ZERO.
           05  WS-JOB-DIGITS           PIC  9(04)    VALUE ZERO.
           05  WS-JOB-NBR              PIC  9(04)    VALUE ZERO.
           05  WS-MAX-THRESH           PIC  9(05)    VALUE ZERO.
           05  WS-MAX-DIGITS           PIC  9(07)    VALUE ZERO.
           05  WS-BEF-LEN              PIC  99       VALUE ZERO.
           05  WS-AFT-LEN              PIC  99       VALUE ZERO.
           05  WS-HOLD-LEN             PIC  99       VALUE ZERO.
           05  WS-IF-CNT               PIC  99       VALUE ZERO.
           05  WS-PROG-CNT             PIC  99       VALUE ZERO.
           05  WS-LEN                  PIC  999      VALUE ZERO.
           05  WS-POS                  PIC  999      VALUE ZERO.
           05  WS-SCOL                 PIC  999      VALUE ZERO.
           05  WS-ECOL                 PIC  999      VALUE ZERO.
           05  WS-FND-POS              PIC  999      VALUE ZERO.
           05  WS-START-POS            PIC  999      VALUE ZERO.
           05  WS-BLANK                PIC  999      VALUE ZERO.
           05  WS-CHECK                PIC  999      VALUE ZERO.
           05  WS-MOVE                 PIC  999      VALUE ZERO.
           05  WS-DIFF                 PIC  999      VALUE ZERO.
           05  WS-SPACE-LEN            PIC  999      VALUE ZERO.
           05  WS-SPACE-LOC            PIC  999      VALUE ZERO.
           05  WS-MAX-LOOK             PIC  999      VALUE ZERO.
           05  WS-COMMENT-POS          PIC  999      VALUE ZERO.
           05  WS-FLAG-D1-POS          PIC  999      VALUE ZERO.
           05  WS-TEMP-SUB             PIC  9(05)    VALUE ZERO.
           05  WS-JOB-CNT              PIC  9(05)    VALUE ZERO.
           05  WS-PROC-CNT             PIC  9(05)    VALUE ZERO.
           05  WS-HOLD-LINE            PIC  9(09)    VALUE ZERO.
           05  WS-S-START-RCD          PIC  9(09)    VALUE ZERO.
           05  WS-S-END-RCD            PIC  9(09)    VALUE ZERO.

       01  WS-COUNT-FIELDS             COMP-3.
           05  WS-READ-JCL01-CNT       PIC S9(09)    VALUE ZERO.
           05  WS-HOLD-FILE-CNT        PIC S9(09)    VALUE ZERO.
           05  WS-REWRITE-JCL01-CNT    PIC S9(09)    VALUE ZERO.
           05  WS-REWRITE-JCL02-CNT    PIC S9(09)    VALUE ZERO.
           05  WS-REWRITE-JCL03-CNT    PIC S9(09)    VALUE ZERO.
           05  WS-REWRITE-JCL04-CNT    PIC S9(09)    VALUE ZERO.

       01  WS-SUBSCRIPTS               COMP.
           05  WS-SUB1                 PIC S9(04)    VALUE ZERO.
           05  WS-SUB2                 PIC S9(04)    VALUE ZERO.
           05  WS-SUB3                 PIC S9(04)    VALUE ZERO.
           05  WS-STR1                 PIC S9(04)    VALUE ZERO.
           05  WS-STR2                 PIC S9(04)    VALUE ZERO.
           05  WS-P1-SUB               PIC S9(04)    VALUE ZERO.
           05  WS-J1-SUB               PIC S9(04)    VALUE ZERO.
           05  WS-T1-SUB               PIC S9(04)    VALUE ZERO.
           05  WS-HOLD-SUB2            PIC S9(04)    VALUE ZERO.

       01  WS-TABLES.
           05  WS-ITEM-TABLE           PIC  X(6200)  VALUE SPACE.
           05  WS-PARM-ITEM REDEFINES WS-ITEM-TABLE
                                       OCCURS 200 TIMES.
               10  WS-I1-ITEM          PIC  X(12).
               10  WS-I1-LEN           PIC  999.
               10  WS-I1-POS           PIC  999.
               10  WS-I1-SCOL          PIC  999.
               10  WS-I1-ECOL          PIC  999.
               10  WS-I1-OPT           PIC  X(06).
               10  WS-I1-EXCL          PIC  X.
           05  WS-WORDS-TABLE          PIC  X(3200)  VALUE SPACE.
           05  WS-WORDS-ITEM REDEFINES WS-WORDS-TABLE
                                       OCCURS 200 TIMES.
               10  WS-W1-ITEM          PIC  X(12).
               10  WS-W1-LEN           PIC  999.
               10  WS-W1-HANDLE        PIC  X.
           05  WS-ENDIF-TABLE          PIC  X(1188)  VALUE SPACE.
           05  WS-ENDIF-ITEM REDEFINES WS-ENDIF-TABLE
                                       OCCURS 99 TIMES.
               10  WS-E1-IF            PIC  XX.
               10  WS-E1-ENDIF         PIC  X.
               10  WS-E1-RCD           PIC  9(09).
           05  WS-PROC-TABLE           PIC  X(8925)  VALUE SPACE.
           05  WS-PROC-ITEM REDEFINES WS-PROC-TABLE
                                       OCCURS 255 TIMES.
               10  WS-P1-PROC          PIC  X(10).
               10  WS-P1-BEF           PIC  X(10).
               10  WS-P1-AFT           PIC  X(10).
               10  WS-P1-BLEN          PIC  99.
               10  WS-P1-ALEN          PIC  99.
               10  WS-P1-DONE          PIC  X.
           05  WS-JOB-TABLE            PIC  X(6375)  VALUE SPACE.
           05  WS-JOB-ITEM REDEFINES WS-JOB-TABLE
                                       OCCURS 255 TIMES.
               10  WS-J1-BEF           PIC  X(10).
               10  WS-J1-AFT           PIC  X(10).
               10  WS-J1-BLEN          PIC  99.
               10  WS-J1-ALEN          PIC  99.
               10  WS-J1-DONE          PIC  X.
           05  WS-CONNECT-TABLE        PIC  X(800)   VALUE SPACE.
           05  WS-CON-ITEM REDEFINES WS-CONNECT-TABLE
                                       OCCURS 50 TIMES.
               10  WS-T1-JOB           PIC  X(08).
               10  WS-T1-PROC          PIC  X(08).
           05  WS-PROGRAM-TABLE        PIC  X(140)   VALUE SPACE.
           05  WS-PROG-ITEM REDEFINES WS-PROGRAM-TABLE
                                       OCCURS 10 TIMES.
               10  WS-G1-PROG          PIC  X(08).
               10  WS-G1-PFX           PIC  X(06).
           05  WS-DISP-ITEM            OCCURS 2000 TIMES.
               10  WS-D1-LINE          PIC  9(09).
               10  WS-D1-DISP          PIC  XXX.


       01  WS-SWITCHES.
           05  WS-END-JCL01-SW         PIC  X        VALUE 'N'.
               88  END-OF-JCL01                      VALUE 'Y'.
               88  MORE-JCL01-RCDS                   VALUE 'N'.
           05  WS-AFTER-DOT            PIC  X        VALUE SPACE.
           05  WS-COMMENT-CASE         PIC  X        VALUE SPACE.
           05  WS-COMMENT-08           PIC  X        VALUE SPACE.
           05  WS-DIFF-POS-SW          PIC  X        VALUE SPACE.
           05  WS-DOT-SW               PIC  X        VALUE SPACE.
           05  WS-FILE-NAME-UC-SW      PIC  X        VALUE SPACE.
           05  WS-FIRST-CHAR-UC        PIC  X        VALUE SPACE.
           05  WS-FIRST-LINE-SW        PIC  X        VALUE SPACE.
           05  WS-FLAG-DISP-SW         PIC  X        VALUE SPACE.
           05  WS-FLAG-PFX-SW          PIC  X        VALUE SPACE.
           05  WS-IF-ENDIF-ERR         PIC  X        VALUE SPACE.
           05  WS-IF-ENDIF-SW          PIC  X        VALUE SPACE.
           05  WS-INLINE-SW            PIC  X        VALUE SPACE.
           05  WS-ITEM-FND-SW          PIC  X        VALUE SPACE.
           05  WS-JCL-08               PIC  X        VALUE SPACE.
           05  WS-JCL-08-INLINE        PIC  X        VALUE SPACE.
           05  WS-JOB-PROC-SW          PIC  X        VALUE SPACE.
           05  WS-LINE-TYPE            PIC  X        VALUE SPACE.
           05  WS-NEW-PROC-SW          PIC  X        VALUE SPACE.
           05  WS-NO-COMMENT-SW        PIC  X        VALUE SPACE.
           05  WS-NO-LINEUP-SW         PIC  X        VALUE SPACE.
           05  WS-NO-RENUM-SW          PIC  X        VALUE SPACE.
           05  WS-NUMERIC-WORD-SW      PIC  X        VALUE SPACE.
           05  WS-ON-DISP-SW           PIC  X        VALUE SPACE.
           05  WS-ON-DSN-SW            PIC  X        VALUE SPACE.
           05  WS-OTHER-CHAR-SW        PIC  X        VALUE SPACE.
           05  WS-OVERLAY-SW           PIC  X        VALUE SPACE.
           05  WS-QUOTE-SW             PIC  X        VALUE SPACE.
           05  WS-RCD-UPDATE-SW        PIC  X        VALUE SPACE.
           05  WS-RENUM-JOB-SW         PIC  X        VALUE SPACE.
           05  WS-RENUM-STEP-SW        PIC  X        VALUE SPACE.
           05  WS-RESET-STEPS-SW       PIC  X        VALUE SPACE.
           05  WS-SAME-POS-SW          PIC  X        VALUE SPACE.
           05  WS-SKIP-RCD-BY-REQ      PIC  X        VALUE SPACE.
           05  WS-SKIP-SW              PIC  X        VALUE SPACE.
           05  WS-STEP-FND-SW          PIC  X        VALUE SPACE.
           05  WS-SWAP-DISP-SW         PIC  X        VALUE SPACE.
           05  WS-THIS-CHANGE-SW       PIC  X        VALUE SPACE.
           05  WS-TOP-JCL-UC-SW        PIC  X        VALUE SPACE.
           05  WS-UPDT-COMMENT-SW      PIC  X        VALUE SPACE.
           05  WS-ZAP-STAR             PIC  X        VALUE SPACE.

       01  WS-END.
           05  FILLER                  PIC  X(16)    VALUE
               '  JCLNEAT END  '.

       LINKAGE SECTION.

       01  LS-FIELD.
           05  LS-LENGTH               PIC S9(04)    COMP.
           05  LS-DATA                 PIC  X(10).
           05  FILLER REDEFINES LS-DATA.
               10  LS-TEST             PIC  X.
               10  LS-EXTRA            PIC  X(09).

      /

       PROCEDURE DIVISION USING LS-FIELD.

       0100-PROGRAM-ENTRY.
           MOVE +0000                         TO WS-RETURN-CODE.
           PERFORM 0200-OPEN-FILES.
           DISPLAY '    '.
           DISPLAY '**** JCLNEAT arrange JCL statements'.
           DISPLAY '    '.

           IF WS-RETURN-CODE = ZERO
               PERFORM 0400-PROCESS-JCL01.

           IF WS-RETURN-CODE = ZERO
               PERFORM 0400-SHOW-STATS.

           IF WS-RETURN-CODE = ZERO
               PERFORM 0300-CLOSE-FILES
           ELSE
               DISPLAY '**** JCLNEAT cond code ' WS-RETURN-CODE
                       ' set by program'
               MOVE WS-RETURN-CODE            TO RETURN-CODE.

           DISPLAY '**** JCLNEAT EOJ encountered '.
           DISPLAY '    '.
           STOP RUN.

       0200-OPEN-FILES.
           OPEN INPUT  PARM01.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** JCLNEAT open error on PARM01'
               DISPLAY '**** File stat           ' WS-STAT
               MOVE +0200                     TO WS-RETURN-CODE.

       0200-OPEN-JCL01-INPUT.
           OPEN INPUT  JCL01.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** JCLNEAT open error on JCL01'
               DISPLAY '**** File stat           ' WS-STAT
               MOVE +0200                     TO WS-RETURN-CODE.

       0200-OPEN-JCL01-IO.
           OPEN I-O    JCL01.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** JCLNEAT open error on JCL01'
               DISPLAY '**** File stat           ' WS-STAT
               MOVE +0200                     TO WS-RETURN-CODE.

       0300-CLOSE-FILES.
           CLOSE PARM01.

       0400-SHOW-STATS.
           IF WS-RETURN-CODE = ZERO
             IF WS-IF-ENDIF-ERR = 'Y'
                 MOVE +0004                   TO WS-RETURN-CODE
                 IF WS-LS-TEST NUMERIC
                     DISPLAY '**** IF/ENDIF mismatch. Search for'
                             ' !! above.'
                     DISPLAY '**** Setting return code to        0004'
                 ELSE
                     DISPLAY '**** IF/ENDIF mismatch... setting '
                             'return code to 0004'.

           IF WS-JCL-08-INLINE = 'Y'
               DISPLAY '**** "ZAP LAST J" specified. '
               DISPLAY '     To change position 73-80 to spaces for'
               DISPLAY '     inline JCL lines, use this command: '
               DISPLAY '     " C P''='' '' '' 73 80 "    -or- '
               DISPLAY '     " C P''='' '' '' 73 80 ALL " '.

           IF WS-D1-MAX > ZERO
               DISPLAY '**** DD flag disp lines           ' WS-D1-MAX.

           IF WS-P1-MAX > ZERO
             IF WS-PROC-CNT = 1
               IF WS-P1-MAX = 1
                   DISPLAY '**** Proc steps to alter          '
                                                       WS-P1-MAX
                           '   step  ' WS-P1-AFT(WS-P1-MAX)
               ELSE
                   DISPLAY '**** Proc steps to alter          '
                                                       WS-P1-MAX
                           '   steps ' WS-P1-AFT(1) ' through '
                                       WS-P1-AFT(WS-P1-MAX)
             ELSE
                 DISPLAY '**** Procs encountered            '
                                                       WS-PROC-CNT.
           IF WS-J1-MAX > ZERO
             IF WS-JOB-CNT = 1
               IF WS-J1-MAX = 1
                   DISPLAY '**** Job steps to alter           '
                                                       WS-J1-MAX
                           '   step  ' WS-J1-AFT(WS-J1-MAX)
               ELSE
                   DISPLAY '**** Job steps to alter           '
                                                       WS-J1-MAX
                           '   steps ' WS-J1-AFT(1) ' through '
                                       WS-J1-AFT(WS-J1-MAX)
             ELSE
                 DISPLAY '**** Jobs encountered             '
                                                       WS-JOB-CNT.
           IF WS-READ-JCL01-CNT > ZERO
               DISPLAY '**** Records in JCL01         '
                                                WS-READ-JCL01-CNT.
           IF WS-REWRITE-JCL01-CNT > ZERO
               DISPLAY '**** JCL altered              '
                                                WS-REWRITE-JCL01-CNT.
           IF WS-REWRITE-JCL02-CNT > ZERO
               DISPLAY '**** Exec steps altered       '
                                                WS-REWRITE-JCL02-CNT.
           IF WS-REWRITE-JCL03-CNT > ZERO
               DISPLAY '**** Comments altered         '
                                                WS-REWRITE-JCL03-CNT.
           IF WS-REWRITE-JCL04-CNT > ZERO
               DISPLAY '**** DD flag disp altered     '
                                                WS-REWRITE-JCL04-CNT.

           IF WS-S-START-RCD > ZERO
               OR WS-S-END-RCD > ZERO
               PERFORM 0500-SHOW-SKIPPED.

       0500-SHOW-SKIPPED.
           DISPLAY '                   '.
           DISPLAY ' !!  SKIPPED altering records as specified'
                   ' by "S" parm entries'.
           IF WS-S-START-RCD > ZERO
               DISPLAY ' !!  SKIPPED records before   '
                                                    WS-S-START-RCD.
           IF WS-S-END-RCD > ZERO
               DISPLAY ' !!  SKIPPED records after    '
                                                    WS-S-END-RCD.
           DISPLAY '                   '.

      *---------------------------------------
      *    X
      *---------------------------------------
       0400-PROCESS-JCL01.

           PERFORM 0500-GET-LINKAGE.

           PERFORM VARYING WS-SUB1 FROM 1 BY 1
               UNTIL WS-SUB1 > 200
               MOVE SPACE                     TO WS-I1-ITEM(WS-SUB1)
               MOVE ZERO                      TO WS-I1-LEN(WS-SUB1)
               MOVE ZERO                      TO WS-I1-POS(WS-SUB1)
               MOVE ZERO                      TO WS-I1-SCOL(WS-SUB1)
               MOVE ZERO                      TO WS-I1-ECOL(WS-SUB1)
               MOVE SPACE                     TO WS-I1-OPT(WS-SUB1)
               MOVE SPACE                     TO WS-I1-EXCL(WS-SUB1)
               MOVE SPACE                     TO WS-W1-ITEM(WS-SUB1)
               MOVE ZERO                      TO WS-W1-LEN(WS-SUB1)
               MOVE SPACE                     TO WS-W1-HANDLE(WS-SUB1)
           END-PERFORM.
           MOVE ZERO                          TO WS-IF-CNT.
           MOVE SPACE                         TO WS-CONNECT-TABLE.
           MOVE SPACE                         TO WS-PROGRAM-TABLE.
           PERFORM VARYING WS-SUB1 FROM 1 BY 1
               UNTIL WS-SUB1 > 99
               MOVE SPACE                     TO WS-E1-IF(WS-SUB1)
               MOVE SPACE                     TO WS-E1-ENDIF(WS-SUB1)
               MOVE ZERO                      TO WS-E1-RCD(WS-SUB1)
           END-PERFORM.
           PERFORM VARYING WS-SUB1 FROM 1 BY 1
               UNTIL WS-SUB1 > 255
               MOVE SPACE                     TO WS-P1-PROC(WS-SUB1)
               MOVE SPACE                     TO WS-P1-BEF(WS-SUB1)
               MOVE SPACE                     TO WS-P1-AFT(WS-SUB1)
               MOVE SPACE                     TO WS-P1-DONE(WS-SUB1)
               MOVE ZERO                      TO WS-P1-BLEN(WS-SUB1)
               MOVE ZERO                      TO WS-P1-ALEN(WS-SUB1)
               MOVE SPACE                     TO WS-J1-BEF(WS-SUB1)
               MOVE SPACE                     TO WS-J1-AFT(WS-SUB1)
               MOVE SPACE                     TO WS-J1-DONE(WS-SUB1)
               MOVE ZERO                      TO WS-J1-BLEN(WS-SUB1)
               MOVE ZERO                      TO WS-J1-ALEN(WS-SUB1)
           END-PERFORM.

           IF WS-RETURN-CODE = ZERO
               MOVE ZERO                      TO WS-SUB1
               MOVE ZERO                      TO WS-SUB2
               PERFORM 0700-LOAD-PARM01 THRU
                       0700-LOAD-PARM01-EXIT
               DISPLAY '          '.

      *    renumber step names
           IF WS-RETURN-CODE = ZERO
             IF WS-RENUM-STEP-SW = 'Y'
               IF WS-NO-RENUM-SW = SPACE
                   PERFORM 2000-DETERMINE-NEW-STEPS
                   PERFORM 2400-APPLY-NEW-STEPS.

      *    alter JCL locations and comments
           IF WS-RETURN-CODE = ZERO
             IF WS-NO-COMMENT-SW = 'Y'
                 AND WS-NO-LINEUP-SW = 'Y'
                 CONTINUE
             ELSE
                 PERFORM 1100-CONVERT-PROC-AND-JOB.

      *    place file dispositions to right of DSN=
      *
      *    this is located after 1100-CONVERT-PROC-AND-JOB
      *    since disposition comments in 1900-APPLY-OLD-NEW
      *    might be placed in columns 73-80 but option 'ZAP LAST J'
      *    processed in 1100-CONVERT-PROC-AND-JOB would remove them.
      *
           IF WS-RETURN-CODE = ZERO
             IF WS-FLAG-DISP-SW = 'Y'
               IF WS-NO-COMMENT-SW = SPACE
                   PERFORM 1800-DETERMINE-OLD-NEW
                   PERFORM 1900-APPLY-OLD-NEW.

       0500-GET-LINKAGE.
           IF LS-LENGTH = ZERO
               DISPLAY '**** Parm length is zero '
               MOVE +0500                     TO WS-RETURN-CODE
           ELSE
           IF LS-LENGTH > LENGTH OF WS-LS-DATA
               DISPLAY '**** Parm length is excessive '
               MOVE +0500                     TO WS-RETURN-CODE
           ELSE
               MOVE LS-DATA(1: LS-LENGTH)     TO WS-LS-DATA.

      *---------------------------------------
      *    load XXX...
      *---------------------------------------
       0700-LOAD-PARM01.
           READ PARM01.
           IF WS-STAT = 10
               MOVE WS-SUB1                   TO WS-I1-MAX
               MOVE WS-SUB2                   TO WS-W1-MAX
               GO TO 0700-LOAD-PARM01-EXIT
           ELSE
           IF WS-STAT > ZERO
               DISPLAY '**** JCLNEAT read error on PARM01'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0700                     TO WS-RETURN-CODE
               GO TO 0700-LOAD-PARM01-EXIT.

           IF PARM01-DOCU = '*'
               GO TO 0700-LOAD-PARM01.

           IF PARM01-FLAG = 'I' OR 'i'
               PERFORM 0700-LOAD-JCL-ITEMS
           ELSE
           IF PARM01-FLAG = 'C' OR 'c'
               PERFORM 0700-LOAD-COMMENT-FLAGS
           ELSE
           IF PARM01-FLAG = 'W' OR 'w'
               PERFORM 0700-LOAD-COMMENT-WORDS
           ELSE
           IF PARM01-FLAG = 'S' OR 's'
               PERFORM 0700-LOAD-LINES.

           GO TO 0700-LOAD-PARM01.

       0700-LOAD-PARM01-EXIT. EXIT.

       0700-LOAD-JCL-ITEMS.
           IF WS-SUB1 < 200
               ADD 1                          TO WS-SUB1
               PERFORM 0700-LOAD-JCL-ITEM.

       0700-LOAD-JCL-ITEM.
           MOVE FUNCTION UPPER-CASE(PARM01-ITEM) TO WS-ITEM.
           MOVE WS-ITEM                       TO WS-I1-ITEM(WS-SUB1).
           MOVE PARM01-OPTION                 TO WS-HOLD-20.
           PERFORM 2800-SHIFT-LEFT.
           MOVE FUNCTION UPPER-CASE(WS-HOLD-20)
                                              TO WS-I1-OPT(WS-SUB1).
           IF PARM01-LEN NUMERIC
               MOVE PARM01-LEN                TO WS-I1-LEN(WS-SUB1)
               IF WS-I1-LEN(WS-SUB1) = ZERO
                   DISPLAY '**** JCLNEAT PARM01 len = zero'
                   MOVE +0700                     TO WS-RETURN-CODE
               ELSE
               IF WS-I1-LEN(WS-SUB1) > 20
                   DISPLAY '**** JCLNEAT PARM01 len > 20'
                   MOVE +0700                     TO WS-RETURN-CODE
               ELSE
                   CONTINUE
           ELSE
               DISPLAY '**** JCLNEAT PARM01 len not numeric'
               MOVE +0700                     TO WS-RETURN-CODE.
           IF PARM01-POS NUMERIC
               IF PARM01-POS = '000'
                   DISPLAY '**** JCLNEAT PARM01 pos field = zero'
                   MOVE +0700                 TO WS-RETURN-CODE
               ELSE
                   MOVE PARM01-POS            TO WS-I1-POS(WS-SUB1)
           ELSE
               DISPLAY '**** JCLNEAT PARM01 pos not numeric'
               MOVE +0700                     TO WS-RETURN-CODE.
           IF PARM01-ST-COL NUMERIC
             IF PARM01-ST-COL = ZERO
                 MOVE 0003                    TO WS-I1-SCOL(WS-SUB1)
             ELSE
                 MOVE PARM01-ST-COL           TO WS-I1-SCOL(WS-SUB1)
           ELSE
               DISPLAY '**** JCLNEAT PARM01 start column not numeric'
               MOVE +0700                     TO WS-RETURN-CODE.
           IF PARM01-END-COL NUMERIC
             IF PARM01-END-COL = ZERO
                 MOVE 0071                    TO WS-I1-ECOL(WS-SUB1)
             ELSE
                 MOVE PARM01-END-COL          TO WS-I1-ECOL(WS-SUB1)
           ELSE
               DISPLAY '**** JCLNEAT PARM01 end column not numeric'
               MOVE +0700                     TO WS-RETURN-CODE.
           MOVE FUNCTION UPPER-CASE(PARM01-EXCLUDE)
                                              TO WS-I1-EXCL(WS-SUB1).

       0700-LOAD-COMMENT-FLAGS.
           MOVE FUNCTION UPPER-CASE(PARM01-ITEM) TO WS-ITEM.
           IF WS-ITEM = 'NO RENUM'
               DISPLAY ' Parm option "no renum" specified'
               MOVE 'Y'                       TO WS-NO-RENUM-SW.
           IF WS-ITEM = 'NO LINEUP'
               DISPLAY ' Parm option "no lineup" specified'
               MOVE 'Y'                       TO WS-NO-LINEUP-SW.
           IF WS-ITEM = 'NO COMMENT'
               DISPLAY ' Parm option "no comment" specified'
               MOVE 'Y'                       TO WS-NO-COMMENT-SW.
           IF WS-ITEM = 'AFTER DOT'
               MOVE 'Y'                       TO WS-AFTER-DOT.
           IF WS-ITEM = 'FILE NAME UC'
               MOVE 'Y'                       TO WS-FILE-NAME-UC-SW.
           IF WS-ITEM = 'CAP FIRST'
               MOVE FUNCTION UPPER-CASE(PARM01-OPTION)
                                              TO WS-FIRST-CHAR-UC.
           IF WS-ITEM = 'CASE'
               MOVE FUNCTION UPPER-CASE(PARM01-OPTION)
                                              TO WS-COMMENT-CASE.
           IF WS-ITEM = 'LINE TYPE'
               MOVE FUNCTION UPPER-CASE(PARM01-OPTION)
                                              TO WS-LINE-TYPE.
           IF WS-ITEM = 'MOVE COMMENT'
               MOVE PARM01-OPTION             TO WS-HOLD-20
               PERFORM 2800-SHIFT-LEFT
               IF WS-HOLD-04 NUMERIC
                   MOVE WS-HOLD-04            TO WS-COMMENT-POS
                   IF WS-COMMENT-POS = ZERO
                       MOVE 0006              TO WS-COMMENT-POS
                   ELSE
                   IF WS-COMMENT-POS < 5
                       MOVE 0005              TO WS-COMMENT-POS
                   ELSE
                   IF WS-COMMENT-POS > 20
                       MOVE 0020              TO WS-COMMENT-POS
                   ELSE
                       CONTINUE
               ELSE
                   MOVE 0006                  TO WS-COMMENT-POS.
           IF WS-ITEM = 'ZAP STAR'
               MOVE 'Y'                       TO WS-ZAP-STAR.
           IF WS-ITEM = 'ZAP LAST C'
               MOVE 'Y'                       TO WS-COMMENT-08.
           IF WS-ITEM = 'ZAP LAST J'
               MOVE 'Y'                       TO WS-JCL-08.
           IF WS-ITEM = 'FLAG DISP'
               MOVE 'Y'                       TO WS-FLAG-DISP-SW
               MOVE PARM01-OPTION             TO WS-HOLD-20
               PERFORM 2800-SHIFT-LEFT
               IF WS-HOLD-04 NUMERIC
                   MOVE WS-HOLD-04            TO WS-FLAG-D1-POS
                   IF WS-FLAG-D1-POS = ZERO
                       MOVE 0069              TO WS-FLAG-D1-POS
                   ELSE
                   IF WS-FLAG-D1-POS < 60
                       DISPLAY '**** JCLNEAT flag disp pos < 60'
                       MOVE +0700             TO WS-RETURN-CODE
                   ELSE
                   IF WS-FLAG-D1-POS > 78
                       DISPLAY '**** JCLNEAT flag disp pos > 78'
                       MOVE +0700             TO WS-RETURN-CODE
                   ELSE
                       CONTINUE
               ELSE
                   MOVE 0069                  TO WS-FLAG-D1-POS.
           IF WS-ITEM = 'FLAG PFX'
               MOVE 'Y'                       TO WS-FLAG-PFX-SW.
           IF WS-ITEM = 'SWAP DISP'
               MOVE 'Y'                       TO WS-SWAP-DISP-SW.
           IF WS-ITEM = 'RESET STEPS'
               MOVE 'Y'                       TO WS-RESET-STEPS-SW.
           IF WS-ITEM = 'RENUM PROC'
               MOVE 'Y'                       TO WS-RENUM-STEP-SW
               MOVE PARM01-OPTION2            TO WS-HOLD-20
               PERFORM 2800-SHIFT-LEFT
               IF WS-HOLD-5X10 = SPACE
                   MOVE FUNCTION UPPER-CASE(WS-HOLD-10)
                                              TO WS-EXEC-PREFIX
               ELSE
                   DISPLAY '**** JCLNEAT renum proc prefix > '
                           '4 characters'
                   MOVE +0700                 TO WS-RETURN-CODE.
           IF WS-ITEM = 'RENUM PROG'
             IF WS-PROG-CNT < 10
                 ADD 1                        TO WS-PROG-CNT
                 MOVE FUNCTION UPPER-CASE(PARM01-OPTION)
                                           TO WS-G1-PROG(WS-PROG-CNT)
                 MOVE FUNCTION UPPER-CASE(PARM01-OPTION2)
                                           TO WS-G1-PFX(WS-PROG-CNT).
           IF WS-ITEM = 'RENUM PINCR'
               MOVE PARM01-OPTION             TO WS-HOLD-20
               PERFORM 2800-SHIFT-LEFT
               IF WS-HOLD-04 NUMERIC
                   MOVE WS-HOLD-04            TO WS-EXEC-INCREMENT
                   IF WS-EXEC-INCREMENT = ZERO
                       DISPLAY '**** JCLNEAT renum pincr is zero'
                       MOVE +0700             TO WS-RETURN-CODE
                   ELSE
                       CONTINUE
               ELSE
                   DISPLAY '**** JCLNEAT renum pincr not numeric'
                   MOVE +0700                 TO WS-RETURN-CODE.
           IF WS-ITEM = 'RENUM PDIGIT'
               MOVE PARM01-OPTION             TO WS-HOLD-20
               PERFORM 2800-SHIFT-LEFT
               IF WS-HOLD-04 NUMERIC
                   MOVE WS-HOLD-04            TO WS-EXEC-DIGITS
                   IF WS-EXEC-DIGITS = ZERO
                       DISPLAY '**** JCLNEAT renum pdigit is zero'
                       MOVE +0700             TO WS-RETURN-CODE
                   ELSE
                       CONTINUE
               ELSE
                   DISPLAY '**** JCLNEAT renum pdigit not numeric'
                   MOVE +0700                 TO WS-RETURN-CODE.
           IF WS-ITEM = 'RENUM JOB'
               MOVE 'Y'                       TO WS-RENUM-JOB-SW
               MOVE PARM01-OPTION2            TO WS-HOLD-20
               PERFORM 2800-SHIFT-LEFT
               IF WS-HOLD-5X10 = SPACE
                   MOVE FUNCTION UPPER-CASE(WS-HOLD-10)
                                              TO WS-JOB-PREFIX
               ELSE
                   DISPLAY '**** JCLNEAT renum job prefix > '
                           '4 characters'
                   MOVE +0700                 TO WS-RETURN-CODE.
           IF WS-ITEM = 'RENUM JINCR'
               MOVE PARM01-OPTION             TO WS-HOLD-20
               PERFORM 2800-SHIFT-LEFT
               IF WS-HOLD-04 NUMERIC
                   MOVE WS-HOLD-04            TO WS-JOB-INCREMENT
                   IF WS-JOB-INCREMENT = ZERO
                       DISPLAY '**** JCLNEAT renum jincr is zero'
                       MOVE +0700             TO WS-RETURN-CODE
                   ELSE
                       CONTINUE
               ELSE
                   DISPLAY '**** JCLNEAT renum jincr not numeric'
                   MOVE +0700                 TO WS-RETURN-CODE.
           IF WS-ITEM = 'RENUM JDIGIT'
               MOVE PARM01-OPTION             TO WS-HOLD-20
               PERFORM 2800-SHIFT-LEFT
               IF WS-HOLD-04 NUMERIC
                   MOVE WS-HOLD-04            TO WS-JOB-DIGITS
                   IF WS-JOB-DIGITS = ZERO
                       DISPLAY '**** JCLNEAT renum jdigit is zero'
                       MOVE +0700             TO WS-RETURN-CODE
                   ELSE
                       CONTINUE
               ELSE
                   DISPLAY '**** JCLNEAT renum jdigit not numeric'
                   MOVE +0700                 TO WS-RETURN-CODE.

       0700-LOAD-COMMENT-WORDS.
           IF WS-SUB2 < 200
               ADD 1                          TO WS-SUB2
               PERFORM 0700-LOAD-COMMENT-WORD.

       0700-LOAD-COMMENT-WORD.
           MOVE FUNCTION LOWER-CASE(PARM01-ITEM)
                                              TO WS-W1-ITEM(WS-SUB2).
           IF PARM01-LEN NUMERIC
               MOVE PARM01-LEN                TO WS-W1-LEN(WS-SUB2)
               IF WS-W1-LEN(WS-SUB2) = ZERO
                   DISPLAY '**** JCLNEAT PARM01 word len = zero'
                   MOVE +0700                     TO WS-RETURN-CODE
               ELSE
               IF WS-W1-LEN(WS-SUB2) > 20
                   DISPLAY '**** JCLNEAT PARM01 word len > 20'
                   MOVE +0700                     TO WS-RETURN-CODE
               ELSE
                   CONTINUE
           ELSE
               DISPLAY '**** JCLNEAT word len not numeric'
               MOVE +0700                     TO WS-RETURN-CODE.
           IF PARM01-POS = 'F' OR 'W' OR 'f' OR 'w' OR 'N' OR 'n'
               MOVE FUNCTION UPPER-CASE(PARM01-POS)
                                              TO WS-W1-HANDLE(WS-SUB2)
           ELSE
               DISPLAY '**** JCLNEAT word handle flag not F/N/W'
               MOVE +0700                     TO WS-RETURN-CODE.

       0700-LOAD-LINES.
           IF FUNCTION UPPER-CASE(PARM01-ST-END) = 'START'
             IF PARM01-LINE NUMERIC
                 MOVE PARM01-LINE             TO WS-S-START-RCD.
           IF FUNCTION UPPER-CASE(PARM01-ST-END) = 'END'
             IF PARM01-LINE NUMERIC
                 MOVE PARM01-LINE             TO WS-S-END-RCD.

      *----+----------------------------------

       1100-CONVERT-PROC-AND-JOB.
           IF WS-LS-TEST NUMERIC
               PERFORM 1100-SHOW-1100-MSG
               DISPLAY '          '.
           MOVE ZERO                          TO WS-READ-JCL01-CNT.
           PERFORM 0200-OPEN-JCL01-IO.
           PERFORM 1100-READ-JCL01
               UNTIL END-OF-JCL01.
           CLOSE JCL01.
      *    check "IF" array for each new proc within 1200-SELECT
      *    and again here for the last (or only) proc
           MOVE WS-PROC                       TO WS-PREV-PROC.
           PERFORM 1200-SHOW-IF-RESULTS.
           PERFORM 1600-SHOW-DIVIDING-LINE.

       1100-SHOW-1100-MSG.
           IF WS-NO-LINEUP-SW = 'Y'
             IF WS-NO-COMMENT-SW = 'Y'
                 CONTINUE
             ELSE
                 DISPLAY ' Converting comments'
           ELSE
           IF WS-NO-COMMENT-SW = 'Y'
               DISPLAY ' Converting JCL:'
           ELSE
               DISPLAY ' Converting JCL and comments:'.

       1100-READ-JCL01.
           READ JCL01.
           IF WS-STAT = ZERO
               ADD 1                          TO WS-READ-JCL01-CNT
               MOVE JCL01-RCD                 TO WS-HOLD-RCD
               PERFORM 1200-SELECT
           ELSE
           IF WS-STAT = 10
               MOVE 'Y'                       TO WS-END-JCL01-SW
           ELSE
               DISPLAY '**** JCLNEAT read error on JCL01 '
               DISPLAY '**** File stat           ' WS-STAT
               MOVE +1100                     TO WS-RETURN-CODE.

      *---------------------------------------
      *    loop through file converting comments or JCL
      *----+----------------------------------
       1200-SELECT.
           MOVE WS-HOLD-RCD                   TO WS-HOLD-RCD2.
           MOVE WS-HOLD-RCD                   TO WS-HOLD-ORIG.
           MOVE SPACE                         TO WS-UPDT-COMMENT-SW.

           PERFORM 1200-DETERMINE-SKIP-BY-REQ.

           IF WS-DELIM NOT = SPACE
               MOVE SPACE                     TO WS-UNSTR-FIELDS
               UNSTRING WS-HOLD-RCD           DELIMITED BY ALL SPACE
                   INTO WS-UNSTR1 WS-UNSTR2 WS-UNSTR3 WS-UNSTR4
               IF WS-DELIM = WS-UNSTR1 OR WS-UNSTR2 OR WS-UNSTR3
                          OR WS-UNSTR4
                   PERFORM 1500-RESET-INLINE
               ELSE
                   PERFORM 1600-SHOW-SKIP-MSG
           ELSE
           IF WS-HOLD-RCD(1: 3) = '/* '
               PERFORM 1500-RESET-INLINE
           ELSE
           IF WS-HOLD-RCD(1: 3) = '//*'
               PERFORM 1500-RESET-INLINE
               IF WS-NO-COMMENT-SW = SPACE
                   PERFORM 1500-CONVERT-COMMENTS THRU
                           1500-CONVERT-EXIT
                   IF WS-UPDT-COMMENT-SW = 'Y'
                     IF WS-HOLD-RCD = WS-HOLD-ORIG
                         CONTINUE
                     ELSE
                         MOVE WS-HOLD-RCD     TO JCL01-RCD
                         PERFORM 3000-REWRITE-JCL01
                         ADD 1                TO WS-REWRITE-JCL03-CNT
                   ELSE
                       CONTINUE
               ELSE
                   CONTINUE
           ELSE
           IF WS-INLINE-SW = 'Y'
               PERFORM 1600-SHOW-SKIP-MSG
           ELSE
           IF WS-NO-LINEUP-SW = SPACE
               MOVE SPACE                     TO WS-RCD-UPDATE-SW
               MOVE SPACE                     TO WS-FIRST-LINE-SW
               MOVE SPACE                     TO WS-DOT-SW
               PERFORM 1200-SET-INLINE-SWITCH
               PERFORM 1200-BLANK-TRAIL-AREA
               PERFORM 1200-RESET-TOP-SWITCH
               IF WS-SKIP-RCD-BY-REQ = 'Y'
                   CONTINUE
               ELSE
                   PERFORM 1200-LOAD-FROM-PARM
                       VARYING WS-SUB2 FROM 1 BY 1
                       UNTIL WS-SUB2 > WS-I1-MAX
                   PERFORM 1200-SWAP-DISP-LOGIC
                   IF WS-RCD-UPDATE-SW = 'Y'
                     IF WS-HOLD-RCD = WS-HOLD-ORIG
                         CONTINUE
                     ELSE
                         MOVE WS-HOLD-RCD     TO JCL01-RCD
                         PERFORM 3000-REWRITE-JCL01
                         ADD 1                TO WS-REWRITE-JCL01-CNT.

           IF WS-NEW-PROC-SW = 'Y'
               MOVE SPACE                     TO WS-NEW-PROC-SW
               PERFORM 1200-SHOW-IF-RESULTS
               PERFORM 1600-SHOW-PROC.

       1200-SHOW-IF-RESULTS.
           IF WS-NO-LINEUP-SW = SPACE
             IF WS-IF-ENDIF-SW = 'Y'
                 PERFORM 1200-SHOW-MISSING-ENDIF
                    VARYING WS-SUB3 FROM 99 BY -1
                    UNTIL WS-SUB3 < 1
                 MOVE ZERO                    TO WS-IF-CNT
                 MOVE SPACE                   TO WS-ENDIF-TABLE
                 IF WS-IF-ENDIF-SW = 'X'
                     MOVE SPACE               TO WS-IF-ENDIF-SW
                     MOVE 'Y'                 TO WS-IF-ENDIF-ERR.

       1200-SHOW-MISSING-ENDIF.
           IF WS-E1-IF(WS-SUB3) NOT = SPACE
             IF WS-E1-ENDIF(WS-SUB3) = SPACE
                 MOVE 'X'                     TO WS-IF-ENDIF-SW
                 DISPLAY ' !! line   ' WS-E1-RCD(WS-SUB3)
                         '   ' WS-PREV-PROC
                         '  ENDIF value not found     END'
                         WS-E1-IF(WS-SUB3).

      *---------------------------------------
      *    skip records if requested in PARM01
      *    skip if records outside specified range
      *---------------------------------------
       1200-DETERMINE-SKIP-BY-REQ.
           MOVE SPACE                         TO WS-SKIP-RCD-BY-REQ.
           IF WS-S-START-RCD > ZERO
             IF WS-S-END-RCD > ZERO
               IF WS-READ-JCL01-CNT < WS-S-START-RCD
                   OR WS-READ-JCL01-CNT > WS-S-END-RCD
                   MOVE 'Y'                   TO WS-SKIP-RCD-BY-REQ
               ELSE
                   CONTINUE
             ELSE
             IF WS-READ-JCL01-CNT < WS-S-START-RCD
                 MOVE 'Y'                     TO WS-SKIP-RCD-BY-REQ
             ELSE
                 CONTINUE
           ELSE
           IF WS-S-END-RCD > ZERO
             IF WS-READ-JCL01-CNT > WS-S-END-RCD
                 MOVE 'Y'                     TO WS-SKIP-RCD-BY-REQ.

       1200-SET-INLINE-SWITCH.
           MOVE SPACE                         TO WS-UNSTR-FIELDS.
           MOVE SPACE                         TO WS-DELIM.
           UNSTRING WS-HOLD-RCD               DELIMITED BY ALL SPACE
               INTO WS-UNSTR1 WS-UNSTR2 WS-UNSTR3 WS-UNSTR4.
           IF WS-UNSTR2 = 'DD'
               MOVE 'Y'                       TO WS-TOP-JCL-UC-SW
               IF WS-UNSTR3 = '*' OR 'DATA'
                   MOVE 'Y'                   TO WS-INLINE-SW.
           IF WS-UNSTR2 = 'DD'
             IF WS-UNSTR3(1: 6) = '*,DLM='
                 MOVE 'Y'                     TO WS-INLINE-SW
                 MOVE WS-UNSTR3(7: 10)        TO WS-HOLD-20
                 UNSTRING WS-HOLD-20 DELIMITED BY SPACE
                     INTO WS-DELIM.
           IF WS-UNSTR2 = 'DD'
             IF WS-UNSTR3(1: 9) = 'DATA,DLM='
                 MOVE 'Y'                     TO WS-INLINE-SW
                 MOVE WS-UNSTR3(10: 10)       TO WS-HOLD-20
                 UNSTRING WS-HOLD-20 DELIMITED BY SPACE
                     INTO WS-DELIM.

      *    blank out columns 73 - 80
       1200-BLANK-TRAIL-AREA.
           IF WS-JCL-08 = 'Y'
             IF WS-INLINE-SW = 'Y'
                 MOVE 'Y'                     TO WS-JCL-08-INLINE
             ELSE
                 MOVE 'Y'                     TO WS-RCD-UPDATE-SW
                 MOVE SPACE                   TO WS-HOLD-RCD(73: 8).

       1200-RESET-TOP-SWITCH.
           MOVE ' PROC '                      TO WS-ITEM.
           MOVE 6                             TO WS-LEN.
           MOVE SPACE                         TO WS-SKIP-SW.
           MOVE SPACE                         TO WS-QUOTE-SW.
           MOVE SPACE                         TO WS-ITEM-FND-SW.
           PERFORM 2400-FIND-ITEM
               VARYING WS-SUB2 FROM 4 BY 1
               UNTIL WS-SUB2 > 30.
           IF WS-ITEM-FND-SW = 'Y'
               MOVE 'Y'                       TO WS-NEW-PROC-SW
               ADD 1                          TO WS-PROC-CNT
               MOVE WS-PROC                   TO WS-PREV-PROC
               MOVE SPACE                     TO WS-TOP-JCL-UC-SW
               MOVE WS-HOLD-RCD(3: 8)         TO WS-HOLD-PROC
               MOVE SPACE                     TO WS-PROC
               UNSTRING WS-HOLD-PROC          DELIMITED BY SPACE
                   INTO WS-PROC.

           MOVE ' JOB '                       TO WS-ITEM.
           MOVE 5                             TO WS-LEN.
           MOVE SPACE                         TO WS-SKIP-SW.
           MOVE SPACE                         TO WS-QUOTE-SW.
           MOVE SPACE                         TO WS-ITEM-FND-SW.
           PERFORM 2400-FIND-ITEM
               VARYING WS-SUB2 FROM 4 BY 1
               UNTIL WS-SUB2 > 30.
           IF WS-ITEM-FND-SW = 'Y'
               ADD 1                          TO WS-JOB-CNT
               MOVE SPACE                     TO WS-TOP-JCL-UC-SW.

      *----ws-sub2----------------------------
      *    line-up JCL items by moving to requested location
      *----+----------------------------------
       1200-LOAD-FROM-PARM.
           MOVE WS-I1-ITEM(WS-SUB2)           TO WS-ITEM.
           MOVE WS-I1-LEN(WS-SUB2)            TO WS-LEN.
           MOVE WS-I1-POS(WS-SUB2)            TO WS-POS.
           MOVE WS-I1-SCOL(WS-SUB2)           TO WS-SCOL.
           MOVE WS-I1-ECOL(WS-SUB2)           TO WS-ECOL.
           MOVE WS-I1-OPT(WS-SUB2)            TO WS-OPTION.
           MOVE ZERO                          TO WS-FND-POS.
           MOVE SPACE                         TO WS-DIFF-POS-SW.
           MOVE SPACE                         TO WS-SAME-POS-SW.
           MOVE SPACE                         TO WS-THIS-CHANGE-SW.

           PERFORM 1200-FIND-LOOP
               VARYING WS-SUB1 FROM 1 BY 1
               UNTIL WS-SUB1 > 71.

           IF WS-SAME-POS-SW = 'Y'
               PERFORM 1200-APPLY-SAME-POS
           ELSE
           IF WS-DIFF-POS-SW = 'Y'
               PERFORM 1200-APPLY-DIFF-POS.

      *    ws-sub2 ws-sub1
       1200-FIND-LOOP.
           IF WS-SUB1 < WS-SCOL
               CONTINUE
           ELSE
           IF WS-SUB1 > WS-ECOL
               CONTINUE
           ELSE
           IF WS-HOLD-RCD(WS-SUB1: WS-LEN) = WS-ITEM(1: WS-LEN)
               MOVE WS-SUB1                   TO WS-FND-POS
               MOVE 71                        TO WS-SUB1
               IF WS-POS = WS-FND-POS
                   MOVE 'Y'                   TO WS-SAME-POS-SW
               ELSE
                   MOVE 'Y'                   TO WS-DIFF-POS-SW.

       1200-APPLY-SAME-POS.
           MOVE WS-HOLD-RCD                   TO WS-HOLD-RCD2.
           PERFORM 1300-PROCESS-OPTIONS.
           IF WS-THIS-CHANGE-SW = 'Y'
               PERFORM 1600-SHOW-FOUND-MSG
               PERFORM 1600-SHOW-OPT-BEFORE
               PERFORM 1600-SHOW-OPT-AFTER
               PERFORM 1600-SHOW-BLANK-LINE.

       1200-APPLY-DIFF-POS.
           MOVE WS-HOLD-RCD                   TO WS-HOLD-RCD2.
           PERFORM 1600-SHOW-FOUND-MSG.
           PERFORM 1600-SHOW-BEFORE.
           MOVE SPACE                         TO WS-OVERLAY-SW.
           PERFORM 2700-ADJUST-THINGS.
           PERFORM 1300-PROCESS-OPTIONS.
           PERFORM 1600-SHOW-AFTER.
           PERFORM 1600-SHOW-BLANK-LINE.

      *    ----+----1----+----2----+----3----+----4
      *    //DD01     DD  DSN=ABC,DISP=SHR   --.
      *    //DD01     DD  DISP=SHR,DSN=ABC  <--'

       1200-SWAP-DISP-LOGIC.
           IF WS-SWAP-DISP-SW = 'Y'
               PERFORM 1200-SWAP-DISP THRU
                       1200-SWAP-DISP-EXIT.

       1200-SWAP-DISP.
           MOVE ' DSN='                       TO WS-ITEM.
           MOVE 5                             TO WS-LEN.
           MOVE SPACE                         TO WS-SKIP-SW.
           MOVE SPACE                         TO WS-QUOTE-SW.
           MOVE SPACE                         TO WS-ITEM-FND-SW.
           PERFORM 2400-FIND-ITEM
               VARYING WS-SUB2 FROM 4 BY 1
               UNTIL WS-SUB2 > 63.
           IF WS-ITEM-FND-SW = SPACE
               GO TO 1200-SWAP-DISP-EXIT.
           MOVE WS-TEMP-SUB                   TO WS-BEF-LEN.
           ADD 1                              TO WS-BEF-LEN.

           MOVE ',DISP=SHR '                  TO WS-ITEM.
           MOVE 10                            TO WS-LEN.
           MOVE SPACE                         TO WS-SKIP-SW.
           MOVE SPACE                         TO WS-QUOTE-SW.
           MOVE SPACE                         TO WS-ITEM-FND-SW.
           PERFORM 2400-FIND-ITEM
               VARYING WS-SUB2 FROM 4 BY 1
               UNTIL WS-SUB2 > 63.
           IF WS-ITEM-FND-SW = SPACE
               GO TO 1200-SWAP-DISP-EXIT.
           MOVE WS-TEMP-SUB                   TO WS-AFT-LEN.

           IF WS-BEF-LEN > WS-AFT-LEN
               GO TO 1200-SWAP-DISP-EXIT.

      *    find location of trailing space
           MOVE ZERO                          TO WS-TEMP-SUB.
           PERFORM VARYING WS-SUB3 FROM WS-BEF-LEN BY 1
               UNTIL WS-SUB3 > 72
               IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE
                   MOVE WS-SUB3               TO WS-TEMP-SUB
                   MOVE 72                    TO WS-SUB3
               END-IF
           END-PERFORM.
      *    determine length of dsn + disp string
           COMPUTE WS-LEN = WS-TEMP-SUB - WS-BEF-LEN.

      *    unstring then string with items flipped
           MOVE WS-BEF-LEN                    TO WS-START-POS.
           MOVE SPACE                         TO WS-UNSTR-FIELDS.
           MOVE WS-HOLD-RCD(WS-START-POS: )   TO WS-HOLD-RCD2.
           UNSTRING WS-HOLD-RCD2              DELIMITED BY ','
               INTO WS-DSN1 WS-DSN2 WS-DSN3.
           IF WS-DSN1(1: 4) NOT = 'DSN='
               GO TO 1200-SWAP-DISP-EXIT.
           IF WS-DSN2(1: 5) NOT = 'DISP='
               GO TO 1200-SWAP-DISP-EXIT.
           IF WS-DSN3 NOT = SPACE
               GO TO 1200-SWAP-DISP-EXIT.
           STRING WS-DSN2                     DELIMITED BY SPACE
                  ','                         DELIMITED BY SIZE
                  WS-DSN1                     DELIMITED BY SPACE
                  INTO WS-DSN3.

           MOVE 'Y'                           TO WS-RCD-UPDATE-SW.
           MOVE WS-DSN3(1: WS-LEN)
                             TO WS-HOLD-RCD(WS-START-POS: WS-LEN).

       1200-SWAP-DISP-EXIT. EXIT.

       1300-PROCESS-OPTIONS.
           IF WS-OPTION = 'IF'
             IF WS-HOLD-RCD(3: 5) = SPACE
               IF WS-IF-CNT < 99
                   ADD 1                      TO WS-IF-CNT
                   MOVE WS-IF-CNT             TO WS-E1-IF(WS-IF-CNT)
                   MOVE 'IF'                  TO WS-HOLD-RCD(3: 2)
                   MOVE WS-IF-CNT             TO WS-HOLD-RCD(5: 2)
                   MOVE 'Y'                   TO WS-RCD-UPDATE-SW
                   MOVE 'Y'                   TO WS-THIS-CHANGE-SW
                   MOVE 'Y'                   TO WS-IF-ENDIF-SW
                   MOVE WS-READ-JCL01-CNT     TO WS-E1-RCD(WS-IF-CNT).

           IF WS-OPTION = 'ENDIF'
             IF WS-HOLD-RCD(3: 6) = SPACE
                 PERFORM 1300-FIND-ENDIF
                     VARYING WS-SUB3 FROM 99 BY -1
                     UNTIL WS-SUB3 < 1.

       1300-FIND-ENDIF.
           IF WS-E1-IF(WS-SUB3) = SPACE
               CONTINUE
           ELSE
           IF WS-E1-ENDIF(WS-SUB3) = SPACE
               MOVE 'END'                     TO WS-HOLD-RCD(3: 3)
               MOVE WS-E1-IF(WS-SUB3)         TO WS-HOLD-RCD(6: 2)
               MOVE 'Y'                       TO WS-E1-ENDIF(WS-SUB3)
               MOVE ZERO                      TO WS-SUB3
               MOVE 'Y'                       TO WS-RCD-UPDATE-SW
               MOVE 'Y'                       TO WS-THIS-CHANGE-SW
               MOVE 'Y'                       TO WS-IF-ENDIF-SW.

      *---------------------------------------
      *    convert comment lines
      *----+----------------------------------
       1500-CONVERT-COMMENTS.
           IF WS-SKIP-RCD-BY-REQ = 'Y'
               GO TO 1500-CONVERT-EXIT.

      *    blank out columns 73 - 80
           IF WS-COMMENT-08 = 'Y'
             IF WS-HOLD-RCD(73: 8) = SPACE
                 CONTINUE
             ELSE
                 MOVE 'Y'                     TO WS-UPDT-COMMENT-SW
                 MOVE SPACE                   TO WS-HOLD-RCD(73: 8).

           MOVE ZERO                          TO WS-TALLY.
           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '*'.
           IF WS-TALLY > 40
               MOVE SPACE                     TO WS-DOT-SW
               MOVE SPACE                     TO WS-FIRST-LINE-SW.
           MOVE ZERO                          TO WS-TALLY.
           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '-'.
           IF WS-TALLY > 40
               MOVE SPACE                     TO WS-DOT-SW
               MOVE SPACE                     TO WS-FIRST-LINE-SW.
           IF WS-HOLD-RCD(4: 66) = SPACE
               MOVE SPACE                     TO WS-DOT-SW
               MOVE SPACE                     TO WS-FIRST-LINE-SW.

      *    skip converting first batch of comments in job/proc
           IF WS-TOP-JCL-UC-SW NOT = 'Y'
             IF WS-HOLD-RCD(1: 4) = '//* '
                 OR WS-HOLD-RCD(1: 5) = '//** '
                 MOVE ZERO                    TO WS-TALLY
                 PERFORM VARYING WS-SUB2 FROM 5 BY 1
                     UNTIL WS-SUB2 > 50
                     IF WS-HOLD-RCD(WS-SUB2: 1) = 'A' OR 'E' OR 'I'
                                               OR 'O' OR 'U'
                         ADD 1                TO WS-TALLY
                     END-IF
                 END-PERFORM
                 IF WS-TALLY > 1
                     MOVE 'T'                 TO WS-TOP-JCL-UC-SW
                 ELSE
                     CONTINUE
             ELSE
             IF WS-TOP-JCL-UC-SW = 'T'
                 MOVE 'Y'                     TO WS-TOP-JCL-UC-SW.

      *    do not convert blank lines
           IF WS-HOLD-RCD(4: 69) = SPACE
               GO TO 1500-CONVERT-EXIT.

      *    do not convert commented lines to lower-case
      *    when they appear to hold commented JCL
           MOVE ZERO                          TO WS-TALLY.
           PERFORM VARYING WS-SUB1 FROM 4 BY 1
               UNTIL WS-SUB1 > 50
               PERFORM 1500-LOOK-FOR-JCL-IN-COMMENTS
                   VARYING WS-SUB2 FROM 1 BY 1
                   UNTIL WS-SUB2 > WS-I1-MAX
           END-PERFORM.
           IF WS-TALLY > 1
               GO TO 1500-CONVERT-EXIT.

      *    convert to lower case
      *
      *    avoid placing 'convert to upper-case' logic above
      *    this step - uppercase will be replaced by lowercase
      *
           IF WS-TOP-JCL-UC-SW = 'Y'
             IF WS-COMMENT-CASE = 'L'
                 MOVE 'Y'                     TO WS-UPDT-COMMENT-SW
                 MOVE WS-HOLD-RCD             TO WS-HOLD-RCD2
                 MOVE FUNCTION LOWER-CASE(WS-HOLD-RCD2) TO WS-HOLD-RCD
                 PERFORM 1500-CHANGE-WORD-CASE.

      *    convert to upper case
           IF WS-COMMENT-CASE = 'U'
               MOVE 'Y'                       TO WS-UPDT-COMMENT-SW
               MOVE WS-HOLD-RCD               TO WS-HOLD-RCD2
               MOVE FUNCTION UPPER-CASE(WS-HOLD-RCD2) TO WS-HOLD-RCD.

      *    convert file names to uppercase
           IF WS-FILE-NAME-UC-SW = 'Y'
               PERFORM 1500-CONVERT-FILE-NAME-CASE
                   VARYING WS-SUB1 FROM 4 BY 1
                   UNTIL WS-SUB1 > 60.

      *    convert dash lines to asterisks
           IF WS-LINE-TYPE = 'R'
               MOVE SPACE                     TO WS-OTHER-CHAR-SW
               PERFORM 1500-TEST-FOR-OTHER-CHARS
               IF WS-OTHER-CHAR-SW = SPACE
                   PERFORM 1500-CONVERT-FROM-DASHES.
      *    convert asterisk lines to dashes
           IF WS-LINE-TYPE = 'D'
               MOVE SPACE                     TO WS-OTHER-CHAR-SW
               PERFORM 1500-TEST-FOR-OTHER-CHARS
               IF WS-OTHER-CHAR-SW = SPACE
                   PERFORM 1500-CONVERT-TO-DASHES.

      *    move most comments to new position
           IF WS-COMMENT-POS > ZERO
               MOVE ZERO                      TO WS-FND-POS
               PERFORM 1500-FIND-COMMENT-START
                   VARYING WS-SUB1 FROM 4 BY 1
                   UNTIL WS-SUB1 > 25
               IF WS-FND-POS > ZERO
                 IF WS-FND-POS NOT = WS-COMMENT-POS
                     MOVE WS-HOLD-RCD         TO WS-HOLD-RCD2
                     PERFORM 1500-MOVE-COMMENTS.

      *    remove trailing asterisks
           IF WS-ZAP-STAR = 'Y'
               PERFORM 1500-ZAP-TRAIL-ASTERISKS.

      *    in a group of comments, for the first line only,
      *      convert first character to upper case
           IF WS-FIRST-CHAR-UC = 'F'
             IF WS-FIRST-LINE-SW = SPACE
                 MOVE 4                       TO WS-SUB3
                 PERFORM 1500-UPPER-CASE-FIRST
                     UNTIL WS-SUB3 > 25.

      *    for all lines in a group of comments,
      *      convert first character to upper case
           IF WS-FIRST-CHAR-UC = 'A'
               MOVE 4                         TO WS-SUB3
               PERFORM 1500-UPPER-CASE-FIRST
                   UNTIL WS-SUB3 > 25.

      *    for all lines in a group of comments, convert the
      *      first character following '. ' to upper case
           IF WS-AFTER-DOT = 'Y'
               MOVE 4                         TO WS-SUB3
               PERFORM 1500-UPPER-CASE-AFTER-DOT
                   UNTIL WS-SUB3 > 70.

       1500-CONVERT-EXIT. EXIT.

      *---------------------------------------
      *    file name rules: each qualifer may contain alphanumeric
      *    or national characters ($, #, @) or hyphen (-), or x'C0'.
      *    qualifer must start with alphabetic or national character.
      *---------------------------------------
       1500-CONVERT-FILE-NAME-CASE.
           IF WS-HOLD-RCD(WS-SUB1: 1) = '.'
             IF WS-HOLD-RCD(WS-SUB1 + 1: 1) = SPACE OR '.'
                 CONTINUE
             ELSE
             IF WS-HOLD-RCD(WS-SUB1 + 1: 1) NUMERIC
                 CONTINUE
             ELSE
             IF WS-HOLD-RCD(WS-SUB1 - 1: 1) = SPACE
                 CONTINUE
             ELSE
                 PERFORM 1500-CONVERT-FILE-NAME-UC.

       1500-CONVERT-FILE-NAME-UC.
           MOVE ZERO                          TO WS-POS.
           PERFORM VARYING WS-SUB3 FROM WS-SUB1 BY -1
               UNTIL WS-SUB3 < 4
               IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE
                   MOVE WS-SUB3               TO WS-POS
                   MOVE 3                     TO WS-SUB3
               END-IF
           END-PERFORM.
           IF WS-POS > ZERO
               MOVE WS-POS                    TO WS-SUB3
               ADD 1                          TO WS-SUB3
               MOVE 73                        TO WS-SUB1
               PERFORM 1500-UPPER-CASE
                   UNTIL WS-SUB3 > 72.

       1500-TEST-FOR-OTHER-CHARS.
           PERFORM VARYING WS-SUB3 FROM 4 BY 1
               UNTIL WS-SUB3 > 71
               IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE OR '*' OR '-'
                                         OR '=' OR '+'
                   CONTINUE
               ELSE
                   MOVE 'N'                   TO WS-OTHER-CHAR-SW
                   MOVE 71                    TO WS-SUB3
               END-IF
           END-PERFORM.

       1500-CONVERT-FROM-DASHES.
           MOVE ZERO                          TO WS-TALLY.
           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '-'.
           IF WS-TALLY > 10
               MOVE SPACE                     TO WS-FIRST-LINE-SW
               PERFORM VARYING WS-SUB1 FROM 4 BY 1
                   UNTIL WS-SUB1 > 72
                   IF WS-HOLD-RCD(WS-SUB1: 1) = '-'
                     IF WS-SUB1 > 71
                         MOVE SPACE        TO WS-HOLD-RCD(WS-SUB1: 1)
                         MOVE 'Y'             TO WS-UPDT-COMMENT-SW
                     ELSE
                         MOVE '*'          TO WS-HOLD-RCD(WS-SUB1: 1)
                         MOVE 'Y'             TO WS-UPDT-COMMENT-SW
                     END-IF
                   END-IF
               END-PERFORM
           END-IF.

           MOVE ZERO                          TO WS-TALLY.
           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '*'.
           IF WS-TALLY > 10
               MOVE SPACE                     TO WS-FIRST-LINE-SW
               PERFORM VARYING WS-SUB1 FROM 4 BY 1
                   UNTIL WS-SUB1 > 72
                   IF WS-SUB1 > 71
                       MOVE SPACE          TO WS-HOLD-RCD(WS-SUB1: 1)
                       MOVE 'Y'               TO WS-UPDT-COMMENT-SW
                   ELSE
                   IF WS-HOLD-RCD(WS-SUB1: 1) = SPACE
                       MOVE '*'            TO WS-HOLD-RCD(WS-SUB1: 1)
                       MOVE 'Y'               TO WS-UPDT-COMMENT-SW
                   END-IF
                   END-IF
               END-PERFORM
           END-IF.

       1500-CONVERT-TO-DASHES.
           MOVE ZERO                          TO WS-TALLY.
           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '*'.
           IF WS-TALLY > 10
               MOVE SPACE                     TO WS-FIRST-LINE-SW
               PERFORM VARYING WS-SUB1 FROM 4 BY 1
                   UNTIL WS-SUB1 > 72
                   IF WS-HOLD-RCD(WS-SUB1: 1) = '*'
                     IF WS-SUB1 > 52
                         MOVE SPACE        TO WS-HOLD-RCD(WS-SUB1: 1)
                         MOVE 'Y'             TO WS-UPDT-COMMENT-SW
                     ELSE
                         MOVE '-'          TO WS-HOLD-RCD(WS-SUB1: 1)
                         MOVE 'Y'             TO WS-UPDT-COMMENT-SW
                     END-IF
                   END-IF
               END-PERFORM
           END-IF.

           MOVE ZERO                          TO WS-TALLY.
           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '-'.
           IF WS-TALLY > 10
               MOVE SPACE                     TO WS-FIRST-LINE-SW
               PERFORM VARYING WS-SUB1 FROM 4 BY 1
                   UNTIL WS-SUB1 > 72
                   IF WS-HOLD-RCD(WS-SUB1: 1) = '-'
                     IF WS-SUB1 > 52
                         MOVE SPACE        TO WS-HOLD-RCD(WS-SUB1: 1)
                         MOVE 'Y'             TO WS-UPDT-COMMENT-SW
                     END-IF
                   ELSE
                   IF WS-HOLD-RCD(WS-SUB1: 1) = SPACE
                     IF WS-SUB1 > 52
                         CONTINUE
                     ELSE
                         MOVE '-'          TO WS-HOLD-RCD(WS-SUB1: 1)
                         MOVE 'Y'             TO WS-UPDT-COMMENT-SW
                     END-IF
                   END-IF
                   END-IF
               END-PERFORM
           END-IF.

       1500-ZAP-TRAIL-ASTERISKS.
           IF WS-HOLD-RCD(72: 1) = '*'
               MOVE SPACE                     TO WS-HOLD-RCD(72: 1)
               MOVE 'Y'                       TO WS-UPDT-COMMENT-SW.
           MOVE ZERO                          TO WS-TALLY.
           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '*'.
           IF WS-TALLY < 69
               PERFORM 1500-ZAP-HANGERS
                   VARYING WS-SUB1 FROM 71 BY -1
                   UNTIL WS-SUB1 < 4.

       1500-ZAP-HANGERS.
           IF WS-HOLD-RCD(WS-SUB1: 2) = '* '
               MOVE SPACE                     TO WS-HOLD-RCD(WS-SUB1: 1)
               MOVE 'Y'                       TO WS-UPDT-COMMENT-SW
           ELSE
           IF WS-HOLD-RCD(WS-SUB1: 1) = SPACE OR '-' OR '=' OR '+'
               CONTINUE
           ELSE
               MOVE 1                         TO WS-SUB1.

       1500-LOOK-FOR-JCL-IN-COMMENTS.
           MOVE WS-I1-ITEM(WS-SUB2)           TO WS-ITEM.
           MOVE WS-I1-LEN(WS-SUB2)            TO WS-LEN.
           IF WS-ITEM(1: 1) = SPACE
               MOVE WS-ITEM                   TO WS-HOLD-20
               MOVE WS-HOLD-20(2: )           TO WS-ITEM
               SUBTRACT 1 FROM WS-LEN.
           IF WS-I1-EXCL(WS-SUB2) = 'X'
               CONTINUE
           ELSE
           IF WS-HOLD-RCD(WS-SUB1: WS-LEN) = WS-ITEM(1: WS-LEN)
               ADD 1                          TO WS-TALLY.

       1500-FIND-COMMENT-START.
           IF WS-HOLD-RCD(WS-SUB1: 1) = '-' OR '*' OR '='
                                     OR '+' OR SPACE
               CONTINUE
           ELSE
               MOVE WS-SUB1                   TO WS-FND-POS
               MOVE 72                        TO WS-SUB1.

       1500-MOVE-COMMENTS.
           MOVE WS-FND-POS                    TO WS-SUB3.
           PERFORM 1500-MOVE-COMMENTS-CHARS
               VARYING WS-SUB2 FROM 4 BY 1
               UNTIL WS-SUB2 > 72.

       1500-MOVE-COMMENTS-CHARS.
           IF WS-SUB2 < WS-COMMENT-POS
               MOVE SPACE                  TO WS-HOLD-RCD(WS-SUB2: 1)
           ELSE
           IF WS-SUB3 > 72
               MOVE SPACE                  TO WS-HOLD-RCD(WS-SUB2: 1)
           ELSE
               MOVE WS-HOLD-RCD2(WS-SUB3: 1)  TO WS-HOLD-RCD(WS-SUB2: 1)
               MOVE 'Y'                       TO WS-UPDT-COMMENT-SW
               ADD 1                          TO WS-SUB3.

       1500-CHANGE-WORD-CASE.
           MOVE ZERO                          TO WS-SUB3.
           PERFORM 1500-FIND-VARIOUS-WORDS
               VARYING WS-SUB1 FROM 4 BY 1
               UNTIL WS-SUB1 > 66.

       1500-FIND-VARIOUS-WORDS.
           PERFORM 1500-WORD-LOOP
               VARYING WS-SUB2 FROM 1 BY 1
               UNTIL WS-SUB2 > WS-W1-MAX.

       1500-WORD-LOOP.
           MOVE WS-W1-ITEM(WS-SUB2)           TO WS-ITEM.
           MOVE WS-W1-LEN(WS-SUB2)            TO WS-LEN.

           IF WS-HOLD-RCD(WS-SUB1: WS-LEN)
                                      = WS-ITEM(1: WS-LEN)
               MOVE WS-SUB1                   TO WS-SUB3
               PERFORM 1500-CHANGE-START-LOC
               IF WS-W1-HANDLE(WS-SUB2) = 'F'
                   PERFORM 1500-UPPER-CASE-WORD
                       UNTIL WS-SUB3 > 72
               ELSE
               IF WS-W1-HANDLE(WS-SUB2) = 'N'
                   MOVE SPACE                 TO WS-NUMERIC-WORD-SW
                   PERFORM 1500-NUMERIC-WORD
                       UNTIL WS-SUB3 > 72
                   IF WS-NUMERIC-WORD-SW = 'Y'
                       MOVE WS-SUB1           TO WS-SUB3
                       PERFORM 1500-CHANGE-START-LOC
                       PERFORM 1500-UPPER-CASE
                           UNTIL WS-SUB3 > 72
                   ELSE
                       CONTINUE
               ELSE
                   PERFORM 1500-UPPER-CASE
                       UNTIL WS-SUB3 > 72.

       1500-CHANGE-START-LOC.
           MOVE ZERO                          TO WS-TALLY.
           INSPECT WS-ITEM TALLYING WS-TALLY FOR LEADING SPACE.
           ADD WS-TALLY                       TO WS-SUB3.

       1500-UPPER-CASE.
           IF WS-HOLD-RCD(WS-SUB3: 1) = X'7D'
             IF WS-ITEM(1: 1) = X'7D'
                 OR WS-ITEM(2: 1) = X'7D'
                 ADD 1                        TO WS-SUB3
             ELSE
                 MOVE 73                      TO WS-SUB3
           ELSE
           IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE
               MOVE 73                        TO WS-SUB3
           ELSE
               INSPECT WS-HOLD-RCD(WS-SUB3: 1)
                   CONVERTING 'abcdefghijklmnopqrstuvwxyz'
                   TO         'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
               MOVE 'Y'                       TO WS-UPDT-COMMENT-SW
               ADD 1                          TO WS-SUB3.

       1500-NUMERIC-WORD.
           IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE
               MOVE 73                        TO WS-SUB3
           ELSE
           IF WS-HOLD-RCD(WS-SUB3: 1) NUMERIC
               MOVE 73                        TO WS-SUB3
               MOVE 'Y'                       TO WS-NUMERIC-WORD-SW
           ELSE
               ADD 1                          TO WS-SUB3.

       1500-UPPER-CASE-WORD.
           IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE
               ADD 1                          TO WS-SUB3
           ELSE
           IF WS-HOLD-RCD(WS-SUB3: 1) ALPHABETIC
               INSPECT WS-HOLD-RCD(WS-SUB3: 1)
                   CONVERTING 'abcdefghijklmnopqrstuvwxyz'
                   TO         'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
               MOVE 73                        TO WS-SUB3
               MOVE 'Y'                       TO WS-UPDT-COMMENT-SW
           ELSE
               ADD 1                          TO WS-SUB3.

       1500-UPPER-CASE-FIRST.
           IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE
               ADD 1                          TO WS-SUB3
           ELSE
           IF WS-HOLD-RCD(WS-SUB3: 1) ALPHABETIC
               INSPECT WS-HOLD-RCD(WS-SUB3: 1)
                   CONVERTING 'abcdefghijklmnopqrstuvwxyz'
                   TO         'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
               MOVE 73                        TO WS-SUB3
               MOVE 'N'                       TO WS-FIRST-LINE-SW
               MOVE 'Y'                       TO WS-UPDT-COMMENT-SW
           ELSE
               ADD 1                          TO WS-SUB3.

       1500-UPPER-CASE-AFTER-DOT.
           IF WS-HOLD-RCD(WS-SUB3: 2) = '. ' OR ': '
               ADD 1                          TO WS-SUB3
               MOVE 'Y'                       TO WS-DOT-SW
           ELSE
           IF WS-DOT-SW = 'Y'
             IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE
                 ADD 1                        TO WS-SUB3
             ELSE
             IF WS-HOLD-RCD(WS-SUB3: 1) ALPHABETIC
                 INSPECT WS-HOLD-RCD(WS-SUB3: 1)
                     CONVERTING 'abcdefghijklmnopqrstuvwxyz'
                     TO         'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
                 MOVE SPACE                   TO WS-DOT-SW
                 MOVE 'Y'                     TO WS-UPDT-COMMENT-SW
             ELSE
                 ADD 1                        TO WS-SUB3
           ELSE
               ADD 1                          TO WS-SUB3.

       1500-RESET-INLINE.
           IF WS-INLINE-SW = 'Y'
               PERFORM 1600-SHOW-BLANK-LINE.
           MOVE SPACE                         TO WS-DELIM.
           MOVE SPACE                         TO WS-INLINE-SW.

       1600-SHOW-FOUND-MSG.
           IF WS-LS-TEST NUMERIC
               MOVE FUNCTION LOWER-CASE(WS-ITEM) TO WS-ITEM-LC
               DISPLAY '    found  ' WS-READ-JCL01-CNT
                       '  ' WS-ITEM-LC '  at ' WS-FND-POS
                       ' req ' WS-POS
               IF WS-LS-TEST = '2' OR '3'
                   DISPLAY '               ----+----1----+----2----'
                        '+----3----+----4----+----5----+----6'
                        '----+----7--'.

       1600-SHOW-OPT-BEFORE.
           IF WS-LS-TEST NUMERIC
             IF WS-OPTION NOT = SPACE
                 DISPLAY '       before ' WS-HOLD-RCD2.

       1600-SHOW-BEFORE.
           IF WS-LS-TEST NUMERIC
               DISPLAY '       before ' WS-HOLD-RCD2.

       1600-SHOW-OPT-AFTER.
           IF WS-LS-TEST NUMERIC
             IF WS-OPTION NOT = SPACE
                 DISPLAY '       after  ' WS-HOLD-RCD.

       1600-SHOW-AFTER.
           IF WS-LS-TEST NUMERIC
               DISPLAY '       after  ' WS-HOLD-RCD.

       1600-SHOW-WORK.
           IF WS-LS-TEST = '3'
               DISPLAY '       - fnd pos ' WS-FND-POS
                       '  new pos   ' WS-POS
                       '  move len  ' WS-MOVE
                       '  space loc ' WS-SPACE-LOC
               DISPLAY '       - diff    ' WS-DIFF
                       '  space len ' WS-SPACE-LEN
                       '  blank loc ' WS-BLANK.

       1600-SHOW-NO-ROOM.
           IF WS-LS-TEST NUMERIC
               DISPLAY '   --> no room for adjustment at pos '
                         WS-POS ' for item ' WS-ITEM
                         ' rcd ' WS-READ-JCL01-CNT.

       1600-SHOW-SKIP-MSG.
           IF WS-DELIM = SPACE
               MOVE SPACE                     TO WS-HOLD-10
           ELSE
               MOVE 'delimiter '              TO WS-HOLD-10.
           IF WS-LS-TEST NUMERIC
               DISPLAY '       skip   ' WS-READ-JCL01-CNT
                       '  inline JCL  ' WS-HOLD-10 ' ' WS-DELIM.

       1600-SHOW-BLANK-LINE.
           IF WS-LS-TEST NUMERIC
               DISPLAY '          '.

       1600-SHOW-DIVIDING-LINE.
           IF WS-LS-TEST NUMERIC
               DISPLAY '          '
               DISPLAY '=====================break==================='
                       '==='
               DISPLAY '          '.

       1600-SHOW-JOB.
           IF WS-LS-TEST NUMERIC
               DISPLAY '      '
               DISPLAY ' Job   ' WS-JOB.

       1600-SHOW-PROC.
           IF WS-LS-TEST NUMERIC
               DISPLAY '      '
               DISPLAY ' Proc  ' WS-PROC.

      *---------------------------------------
      *    Determine file dispositions
      *      Changes are applied in 1900-APPLY-OLD-NEW
      *----+----------------------------------
       1800-DETERMINE-OLD-NEW.
           IF WS-LS-TEST NUMERIC
               DISPLAY ' Option "flag disp" specified - '
               DISPLAY '   determining and applying file dispositions'
               DISPLAY '          '.
           PERFORM VARYING WS-SUB1 FROM 1 BY 1
               UNTIL WS-SUB1 > 2000
               MOVE ZERO                      TO WS-D1-LINE(WS-SUB1)
               MOVE SPACE                     TO WS-D1-DISP(WS-SUB1)
           END-PERFORM.
           MOVE ZERO                          TO WS-READ-JCL01-CNT.
           MOVE ZERO                          TO WS-SUB1.
           MOVE SPACE                         TO WS-INLINE-SW.
           PERFORM 0200-OPEN-JCL01-INPUT.
           PERFORM 1800-READ-JCL01 THRU
                   1800-READ-JCL01-EXIT.
           CLOSE JCL01.
           MOVE WS-SUB1                       TO WS-D1-MAX.

       1800-READ-JCL01.
           READ JCL01.
           IF WS-STAT = ZERO
               ADD 1                          TO WS-READ-JCL01-CNT
               MOVE WS-READ-JCL01-CNT         TO WS-HOLD-FILE-CNT
               MOVE JCL01-RCD                 TO WS-HOLD-RCD
               PERFORM 1800-SELECT-ACTIVE-LINES
               GO TO 1800-READ-JCL01
           ELSE
           IF WS-STAT = 10
               CONTINUE
           ELSE
               DISPLAY '**** JCLNEAT read error on JCL01 '
               DISPLAY '**** File stat           ' WS-STAT
               MOVE +1800                     TO WS-RETURN-CODE.

       1800-READ-JCL01-EXIT. EXIT.

       1800-SELECT-ACTIVE-LINES.
           IF WS-DELIM NOT = SPACE
               MOVE SPACE                     TO WS-UNSTR-FIELDS
               UNSTRING WS-HOLD-RCD           DELIMITED BY ALL SPACE
                   INTO WS-UNSTR1 WS-UNSTR2 WS-UNSTR3 WS-UNSTR4
               IF WS-DELIM = WS-UNSTR1 OR WS-UNSTR2 OR WS-UNSTR3
                          OR WS-UNSTR4
                   MOVE SPACE                 TO WS-DELIM
                   MOVE SPACE                 TO WS-INLINE-SW
               ELSE
                   CONTINUE
           ELSE
           IF WS-HOLD-RCD(1: 3) = '/* '
               MOVE SPACE                     TO WS-INLINE-SW
           ELSE
           IF WS-HOLD-RCD(1: 3) = '//*'
               MOVE SPACE                     TO WS-INLINE-SW
           ELSE
           IF WS-INLINE-SW = 'Y'
               CONTINUE
           ELSE
               PERFORM 1200-SET-INLINE-SWITCH
               PERFORM 1800-FIND-FILE-LINES.

       1800-FIND-FILE-LINES.
           MOVE ' DD '                        TO WS-ITEM.
           MOVE 4                             TO WS-LEN.
           MOVE SPACE                         TO WS-SKIP-SW.
           MOVE SPACE                         TO WS-QUOTE-SW.
           MOVE SPACE                         TO WS-ITEM-FND-SW.
           PERFORM 2400-FIND-ITEM
               VARYING WS-SUB2 FROM 4 BY 1
               UNTIL WS-SUB2 > 30.
           IF WS-ITEM-FND-SW = 'Y'
               MOVE SPACE                     TO WS-ON-DSN-SW
               MOVE SPACE                     TO WS-ON-DISP-SW
               MOVE WS-HOLD-FILE-CNT          TO WS-HOLD-LINE.

           MOVE 'DSN='                        TO WS-ITEM.
           MOVE 4                             TO WS-LEN.
           MOVE SPACE                         TO WS-SKIP-SW.
           MOVE SPACE                         TO WS-QUOTE-SW.
           MOVE SPACE                         TO WS-ITEM-FND-SW.
           PERFORM 2400-FIND-ITEM
               VARYING WS-SUB2 FROM 4 BY 1
               UNTIL WS-SUB2 > 60.
           IF WS-ITEM-FND-SW = 'Y'
               MOVE 'Y'                       TO WS-ON-DSN-SW.

           MOVE 'DISP='                       TO WS-ITEM.
           MOVE 5                             TO WS-LEN.
           MOVE SPACE                         TO WS-SKIP-SW.
           MOVE SPACE                         TO WS-QUOTE-SW.
           MOVE SPACE                         TO WS-ITEM-FND-SW.
           PERFORM 2400-FIND-ITEM
               VARYING WS-SUB2 FROM 4 BY 1
               UNTIL WS-SUB2 > 60.
           IF WS-ITEM-FND-SW = 'Y'
               MOVE 'Y'                       TO WS-ON-DISP-SW
               PERFORM 1800-UNCLUTTER-FILE-DISP.

           IF WS-ON-DSN-SW = 'Y'
             IF WS-ON-DISP-SW = 'Y'
                 PERFORM 1800-LOAD-D1-TABLE.

      *    DISP=(MOD,DELETE,       DISP=SHR          DISP=MOD
      *    DISP=(NEW,CATLG,DELE    DISP=(,CATLG),    DISP=OLD
       1800-UNCLUTTER-FILE-DISP.
           MOVE SPACE                         TO WS-OLD-NEW.
           MOVE SPACE                         TO WS-UNSTR-FIELDS.
           MOVE WS-HOLD-RCD(WS-TEMP-SUB + 5: )  TO WS-HOLD-20.
           INSPECT WS-HOLD-20 REPLACING ALL '(' BY SPACE.
           INSPECT WS-HOLD-20 REPLACING ALL ')' BY SPACE.
           UNSTRING WS-HOLD-20 DELIMITED BY ','
               INTO WS-UNSTR1 WS-UNSTR2 WS-UNSTR3.
           MOVE WS-UNSTR1                     TO WS-HOLD-20.
           PERFORM 2800-SHIFT-LEFT.
           MOVE WS-HOLD-20                    TO WS-UNSTR1.

           IF WS-UNSTR1 = 'MOD'
             IF WS-UNSTR2 = 'DELETE'
                 MOVE 'del'                   TO WS-OLD-NEW
             ELSE
                 MOVE 'mod'                   TO WS-OLD-NEW
           ELSE
           IF WS-UNSTR1 = 'SHR'
               MOVE 'shr'                     TO WS-OLD-NEW
           ELSE
           IF WS-UNSTR1 = SPACE OR 'NEW'
               MOVE 'new'                     TO WS-OLD-NEW
           ELSE
           IF WS-UNSTR1 = 'OLD'
             IF WS-UNSTR2 = 'DELETE'
                 MOVE 'del'                   TO WS-OLD-NEW
             ELSE
                 MOVE 'old'                   TO WS-OLD-NEW.

       1800-LOAD-D1-TABLE.
           MOVE SPACE                         TO WS-ON-DSN-SW.
           MOVE SPACE                         TO WS-ON-DISP-SW.
           IF WS-SUB1 < 2000
               ADD 1                          TO WS-SUB1
               MOVE WS-HOLD-LINE              TO WS-D1-LINE(WS-SUB1)
               MOVE WS-OLD-NEW                TO WS-D1-DISP(WS-SUB1).

      *---------------------------------------
      *    Apply file dispositions
      *----+----------------------------------
       1900-APPLY-OLD-NEW.
           MOVE ZERO                          TO WS-READ-JCL01-CNT.
           MOVE ZERO                          TO WS-SUB1.
           MOVE SPACE                         TO WS-INLINE-SW.
           PERFORM 0200-OPEN-JCL01-IO.
           PERFORM 1900-READ-JCL01 THRU
                   1900-READ-JCL01-EXIT.
           CLOSE JCL01.

           PERFORM 1600-SHOW-DIVIDING-LINE.

       1900-READ-JCL01.
           READ JCL01.
           IF WS-STAT = ZERO
               ADD 1                          TO WS-READ-JCL01-CNT
               MOVE WS-READ-JCL01-CNT         TO WS-HOLD-FILE-CNT
               MOVE JCL01-RCD                 TO WS-HOLD-RCD
               PERFORM 1900-SELECT-ACTIVE-LINES
               GO TO 1900-READ-JCL01
           ELSE
           IF WS-STAT = 10
               CONTINUE
           ELSE
               DISPLAY '**** JCLNEAT read error on JCL01 '
               DISPLAY '**** File stat           ' WS-STAT
               MOVE +1900                     TO WS-RETURN-CODE.

       1900-READ-JCL01-EXIT. EXIT.

       1900-SELECT-ACTIVE-LINES.
           PERFORM 1200-DETERMINE-SKIP-BY-REQ.
           MOVE WS-HOLD-RCD                   TO WS-HOLD-ORIG.
           IF WS-DELIM NOT = SPACE
               MOVE SPACE                     TO WS-UNSTR-FIELDS
               UNSTRING WS-HOLD-RCD           DELIMITED BY ALL SPACE
                   INTO WS-UNSTR1 WS-UNSTR2 WS-UNSTR3 WS-UNSTR4
               IF WS-DELIM = WS-UNSTR1 OR WS-UNSTR2 OR WS-UNSTR3
                          OR WS-UNSTR4
                   MOVE SPACE                 TO WS-DELIM
                   MOVE SPACE                 TO WS-INLINE-SW
               ELSE
                   CONTINUE
           ELSE
           IF WS-HOLD-RCD(1: 3) = '/* '
               MOVE SPACE                     TO WS-INLINE-SW
           ELSE
           IF WS-HOLD-RCD(1: 3) = '//*'
               MOVE SPACE                     TO WS-INLINE-SW
           ELSE
           IF WS-INLINE-SW = 'Y'
               CONTINUE
           ELSE
           IF WS-SKIP-RCD-BY-REQ = 'Y'
               CONTINUE
           ELSE
               PERFORM 1200-SET-INLINE-SWITCH
               PERFORM 1900-FIND-FILE-LINES
               IF WS-RCD-UPDATE-SW = 'Y'
                 IF WS-HOLD-RCD = WS-HOLD-ORIG
                     CONTINUE
                 ELSE
                     MOVE WS-HOLD-RCD         TO JCL01-RCD
                     PERFORM 3000-REWRITE-JCL01
                     ADD 1                    TO WS-REWRITE-JCL04-CNT.

       1900-FIND-FILE-LINES.
           MOVE SPACE                         TO WS-RCD-UPDATE-SW.

           MOVE ' DD '                        TO WS-ITEM.
           MOVE 4                             TO WS-LEN.
           MOVE SPACE                         TO WS-SKIP-SW.
           MOVE SPACE                         TO WS-QUOTE-SW.
           MOVE SPACE                         TO WS-ITEM-FND-SW.
           PERFORM 2400-FIND-ITEM
               VARYING WS-SUB2 FROM 4 BY 1
               UNTIL WS-SUB2 > 30.
           IF WS-ITEM-FND-SW = 'Y'
               PERFORM 1900-ZAP-DISP-INTO-LINE.

       1900-ZAP-DISP-INTO-LINE.
           PERFORM VARYING WS-SUB1 FROM 1 BY 1
               UNTIL WS-SUB1 > WS-D1-MAX
               IF WS-D1-LINE(WS-SUB1) = WS-HOLD-FILE-CNT
                   PERFORM 1900-PLACE-DISP-FLAG
                   MOVE WS-D1-MAX             TO WS-SUB1
               END-IF
           END-PERFORM.

       1900-PLACE-DISP-FLAG.
           IF WS-FLAG-PFX-SW = 'Y'
             IF WS-HOLD-RCD(WS-FLAG-D1-POS - 2: 5) = SPACE
                 MOVE '*'      TO WS-HOLD-RCD(WS-FLAG-D1-POS - 1: 1)
                 MOVE WS-D1-DISP(WS-SUB1)
                                      TO WS-HOLD-RCD(WS-FLAG-D1-POS: 3)
                 MOVE 'Y'                     TO WS-RCD-UPDATE-SW
             ELSE
                 CONTINUE
           ELSE
           IF WS-HOLD-RCD(WS-FLAG-D1-POS - 1: 4) = SPACE
               MOVE WS-D1-DISP(WS-SUB1)
                                    TO WS-HOLD-RCD(WS-FLAG-D1-POS: 3)
               MOVE 'Y'                       TO WS-RCD-UPDATE-SW.

      *---------------------------------------
      *    Renumber EXEC steps
      *      Determine old and new steps here
      *      Changes are applied in 2400-APPLY-NEW-STEPS
      *----+----------------------------------
       2000-DETERMINE-NEW-STEPS.
           IF WS-LS-TEST NUMERIC
               DISPLAY ' Option "renum" specified - '
               DISPLAY '   determining new step names:'
               DISPLAY '          '.
           MOVE ZERO                          TO WS-P1-SUB.
           MOVE ZERO                          TO WS-J1-SUB.
           MOVE ZERO                          TO WS-EXEC-NBR.
           MOVE ZERO                          TO WS-JOB-NBR.
           MOVE ZERO                          TO WS-READ-JCL01-CNT.
           MOVE SPACE                         TO WS-INLINE-SW.
           MOVE SPACE                         TO WS-PROC.
           MOVE SPACE                         TO WS-STEP.
           MOVE 'P'                           TO WS-JOB-PROC-SW.
           PERFORM 0200-OPEN-JCL01-INPUT.
           PERFORM 2000-READ-JCL01 THRU
                   2000-READ-JCL01-EXIT.
           CLOSE JCL01.
           MOVE WS-P1-SUB                     TO WS-P1-MAX.
           MOVE WS-J1-SUB                     TO WS-J1-MAX.
           MOVE WS-T1-SUB                     TO WS-T1-MAX.

           MOVE ZERO                          TO WS-MAX-THRESH.
           EVALUATE WS-EXEC-DIGITS
               WHEN 1    MOVE 9               TO WS-MAX-THRESH
               WHEN 2    MOVE 99              TO WS-MAX-THRESH
               WHEN 3    MOVE 999             TO WS-MAX-THRESH
               WHEN 4    MOVE 9999            TO WS-MAX-THRESH
           END-EVALUATE.
           IF WS-RETURN-CODE = ZERO
               MOVE ZERO                      TO WS-MAX-DIGITS
               COMPUTE WS-MAX-DIGITS = WS-P1-MAX * WS-EXEC-INCREMENT
               IF WS-MAX-DIGITS > WS-MAX-THRESH
                   DISPLAY '              '
                   DISPLAY ' number of steps found: ' WS-P1-MAX
                   DISPLAY ' "renum pdigit" is:      ' WS-EXEC-DIGITS
                   DISPLAY ' "renum pincr"  is:      '
                                                    WS-EXEC-INCREMENT
                   DISPLAY ' !! computed "renum" combination '
                            WS-MAX-DIGITS ' exceeds the max '
                           'threshold of ' WS-MAX-THRESH
                   DISPLAY ' as determined from the "renum pdigit" '
                           'setting'
                   MOVE +0004                 TO WS-RETURN-CODE.

           MOVE ZERO                          TO WS-MAX-THRESH.
           EVALUATE WS-JOB-DIGITS
               WHEN 1    MOVE 9               TO WS-MAX-THRESH
               WHEN 2    MOVE 99              TO WS-MAX-THRESH
               WHEN 3    MOVE 999             TO WS-MAX-THRESH
               WHEN 4    MOVE 9999            TO WS-MAX-THRESH
           END-EVALUATE.
           IF WS-RETURN-CODE = ZERO
               MOVE ZERO                      TO WS-MAX-DIGITS
               COMPUTE WS-MAX-DIGITS = WS-J1-MAX * WS-JOB-INCREMENT
               IF WS-JOB-DIGITS > WS-MAX-THRESH
                   DISPLAY '              '
                   DISPLAY ' number of steps found: ' WS-J1-MAX
                   DISPLAY ' "renum jdigit" is:      ' WS-JOB-DIGITS
                   DISPLAY ' "renum jincr"  is:      '
                                                    WS-JOB-INCREMENT
                   DISPLAY ' !! computed "renum" combination '
                            WS-MAX-DIGITS ' exceeds the max '
                           'threshold of ' WS-MAX-THRESH
                   DISPLAY ' as determined from the "renum jdigit" '
                           'setting'
                   MOVE +0004                 TO WS-RETURN-CODE.
           IF WS-LS-TEST NUMERIC
             IF WS-T1-MAX > ZERO
                 DISPLAY '              '
                 DISPLAY ' Connect table'
                 DISPLAY '       Job step   Proc'
                 PERFORM VARYING WS-SUB3 FROM 1 BY 1
                     UNTIL WS-SUB3 > WS-T1-MAX
                     DISPLAY '       ' WS-T1-JOB(WS-SUB3)
                             '   '   WS-T1-PROC(WS-SUB3)
                 END-PERFORM.

           PERFORM 1600-SHOW-DIVIDING-LINE.

       2000-READ-JCL01.
           READ JCL01.
           IF WS-STAT = ZERO
               ADD 1                          TO WS-READ-JCL01-CNT
               MOVE WS-READ-JCL01-CNT         TO WS-HOLD-FILE-CNT
               MOVE JCL01-RCD                 TO WS-HOLD-RCD
               PERFORM 2100-SELECT-ACTIVE-LINES
               GO TO 2000-READ-JCL01
           ELSE
           IF WS-STAT = 10
               CONTINUE
           ELSE
               DISPLAY '**** JCLNEAT read error on JCL01 '
               DISPLAY '**** File stat           ' WS-STAT
               MOVE +2000                     TO WS-RETURN-CODE.

       2000-READ-JCL01-EXIT. EXIT.

       2100-SELECT-ACTIVE-LINES.
           IF WS-DELIM NOT = SPACE
               MOVE SPACE                     TO WS-UNSTR-FIELDS
               UNSTRING WS-HOLD-RCD           DELIMITED BY ALL SPACE
                   INTO WS-UNSTR1 WS-UNSTR2 WS-UNSTR3 WS-UNSTR4
               IF WS-DELIM = WS-UNSTR1 OR WS-UNSTR2 OR WS-UNSTR3
                          OR WS-UNSTR4
                   MOVE SPACE                 TO WS-DELIM
                   MOVE SPACE                 TO WS-INLINE-SW
               ELSE
                   CONTINUE
           ELSE
           IF WS-HOLD-RCD(1: 3) = '/* '
               MOVE SPACE                     TO WS-INLINE-SW
           ELSE
           IF WS-HOLD-RCD(1: 3) = '//*'
               MOVE SPACE                     TO WS-INLINE-SW
           ELSE
           IF WS-INLINE-SW = 'Y'
               CONTINUE
           ELSE
               PERFORM 1200-SET-INLINE-SWITCH
               PERFORM 2100-SELECTED-LINES.

       2100-SELECTED-LINES.
           MOVE ' JOB '                       TO WS-ITEM.
           MOVE 5                             TO WS-LEN.
           MOVE SPACE                         TO WS-SKIP-SW.
           MOVE SPACE                         TO WS-QUOTE-SW.
           MOVE SPACE                         TO WS-ITEM-FND-SW.
           PERFORM 2400-FIND-ITEM
               VARYING WS-SUB2 FROM 4 BY 1
               UNTIL WS-SUB2 > 30.
           IF WS-ITEM-FND-SW = 'Y'
               PERFORM 2100-RESET-JOB-STEPS
               MOVE 'J'                       TO WS-JOB-PROC-SW
               MOVE WS-HOLD-RCD(3: 8)         TO WS-HOLD-JOB
               MOVE SPACE                     TO WS-JOB
               UNSTRING WS-HOLD-JOB           DELIMITED BY SPACE
                   INTO WS-JOB
               PERFORM 1600-SHOW-JOB.

           MOVE ' PROC '                      TO WS-ITEM.
           MOVE 6                             TO WS-LEN.
           MOVE SPACE                         TO WS-SKIP-SW.
           MOVE SPACE                         TO WS-QUOTE-SW.
           MOVE SPACE                         TO WS-ITEM-FND-SW.
           PERFORM 2400-FIND-ITEM
               VARYING WS-SUB2 FROM 4 BY 1
               UNTIL WS-SUB2 > 30.
           IF WS-ITEM-FND-SW = 'Y'
               PERFORM 2100-RESET-PROC-STEPS
               MOVE 'P'                       TO WS-JOB-PROC-SW
               MOVE WS-HOLD-RCD(3: 8)         TO WS-HOLD-PROC
               MOVE SPACE                     TO WS-PROC
               UNSTRING WS-HOLD-PROC          DELIMITED BY SPACE
                   INTO WS-PROC
               PERFORM 1600-SHOW-PROC.

           MOVE ' PEND '                      TO WS-ITEM.
           MOVE 6                             TO WS-LEN.
           MOVE SPACE                         TO WS-SKIP-SW.
           MOVE SPACE                         TO WS-QUOTE-SW.
           MOVE SPACE                         TO WS-ITEM-FND-SW.
           PERFORM 2400-FIND-ITEM
               VARYING WS-SUB2 FROM 4 BY 1
               UNTIL WS-SUB2 > 30.
           IF WS-ITEM-FND-SW = 'Y'
               MOVE 'J'                       TO WS-JOB-PROC-SW.

           MOVE ' EXEC '                      TO WS-ITEM.
           MOVE 6                             TO WS-LEN.
           MOVE SPACE                         TO WS-SKIP-SW.
           MOVE SPACE                         TO WS-QUOTE-SW.
           MOVE SPACE                         TO WS-ITEM-FND-SW.
           PERFORM 2400-FIND-ITEM
               VARYING WS-SUB2 FROM 4 BY 1
               UNTIL WS-SUB2 > 30.
           IF WS-ITEM-FND-SW = 'Y'
               MOVE WS-HOLD-RCD(3: 8)         TO WS-HOLD-STEP
               MOVE SPACE                     TO WS-STEP
               UNSTRING WS-HOLD-STEP          DELIMITED BY SPACE
                   INTO WS-STEP
               PERFORM 2100-CAPTURE-PROGRAM
               PERFORM 2100-EXEC-BREAK
               IF WS-JOB-PROC-SW = 'J'
                   PERFORM 2100-LOAD-CONNECT-TABLE.

      *    hold proc names associated with job steps to allow
      *    cross-checking when replacing job.step names
       2100-LOAD-CONNECT-TABLE.
           MOVE WS-HOLD-RCD(WS-TEMP-SUB + 6: 10) TO WS-HOLD-20.
           PERFORM 2800-SHIFT-LEFT.
           IF WS-HOLD-20(1: 4) NOT = 'PGM='
               MOVE SPACE                     TO WS-HOLD-20-TEMP
               PERFORM VARYING WS-SUB3 FROM 1 BY 1
                   UNTIL WS-SUB3 > 20
                   IF WS-HOLD-20(WS-SUB3: 1) = ',' OR SPACE
                       MOVE WS-HOLD-20(1: WS-SUB3 - 1)
                                                  TO WS-HOLD-20-TEMP
                       MOVE 20                TO WS-SUB3
                   END-IF
               END-PERFORM
               IF WS-HOLD-20-TEMP NOT = SPACE
                 IF WS-T1-SUB < 50
                     ADD 1                    TO WS-T1-SUB
                     MOVE WS-STEP             TO WS-T1-JOB(WS-T1-SUB)
                     MOVE WS-HOLD-20-TEMP     TO WS-T1-PROC(WS-T1-SUB).

      *    'PGM=IEFBR14,'  -->  'IEFBR14'
       2100-CAPTURE-PROGRAM.
           MOVE WS-HOLD-RCD(WS-TEMP-SUB + 6: )
                                              TO WS-HOLD-20.
           PERFORM 2800-SHIFT-LEFT.
           MOVE SPACE                         TO WS-PROGRAM.
           IF WS-HOLD-20(1: 4) = 'PGM='
               PERFORM VARYING WS-SUB3 FROM 5 BY 1
                   UNTIL WS-SUB3 > 20
                   IF WS-HOLD-20(WS-SUB3: 1) = '&'
                       MOVE 20                TO WS-SUB3
                   ELSE
                   IF WS-HOLD-20(WS-SUB3: 1) = ',' OR SPACE
                       MOVE WS-HOLD-20(5: WS-SUB3 - 5)
                                              TO WS-PROGRAM
                       MOVE 20                TO WS-SUB3
                   END-IF
                   END-IF
               END-PERFORM
           END-IF.

       2100-EXEC-BREAK.
           IF WS-JOB-PROC-SW = 'P'
             IF WS-P1-SUB < 255
                 ADD 1                        TO WS-P1-SUB
                 PERFORM 2100-NEW-EXEC-NAME
             ELSE
                 CONTINUE
           ELSE
           IF WS-J1-SUB < 255
               ADD 1                          TO WS-J1-SUB
               PERFORM 2100-NEW-JOB-NAME.

       2100-NEW-EXEC-NAME.
           MOVE WS-PROC                       TO WS-P1-PROC(WS-P1-SUB).
           MOVE WS-STEP                       TO WS-HOLD-20.
           PERFORM 2800-DETERMINE-FIELD-LEN.
           MOVE WS-HOLD-20                    TO WS-P1-BEF(WS-P1-SUB).
           MOVE WS-HOLD-LEN                   TO WS-P1-BLEN(WS-P1-SUB).
           ADD WS-EXEC-INCREMENT              TO WS-EXEC-NBR.
           PERFORM 2100-FORMAT-NEW-EXEC.
           PERFORM 2800-DETERMINE-FIELD-LEN.
           MOVE WS-HOLD-20                    TO WS-P1-AFT(WS-P1-SUB).
           MOVE WS-HOLD-LEN                   TO WS-P1-ALEN(WS-P1-SUB).
           IF WS-LS-TEST NUMERIC
               DISPLAY ' Step  ' WS-STEP
                       ' len ' WS-P1-BLEN(WS-P1-SUB)
                       '  ' WS-HOLD-10 ' len ' WS-HOLD-LEN
                       '  ' WS-PROGRAM.

       2100-FORMAT-NEW-EXEC.
           MOVE SPACE                         TO WS-HOLD-20.
           MOVE SPACE                         TO WS-HOLD-06.
           IF WS-EXEC-DIGITS = 1
               MOVE WS-EXEC-NBR(4: 1)         TO WS-HOLD-06.
           IF WS-EXEC-DIGITS = 2
               MOVE WS-EXEC-NBR(3: 2)         TO WS-HOLD-06.
           IF WS-EXEC-DIGITS = 3
               MOVE WS-EXEC-NBR(2: 3)         TO WS-HOLD-06.
           IF WS-EXEC-DIGITS = 4
               MOVE WS-EXEC-NBR               TO WS-HOLD-06.
           MOVE SPACE                         TO WS-PROG-PREFIX.
           IF WS-PROGRAM NOT = SPACE
             IF WS-PROG-CNT > ZERO
                 PERFORM 2100-MATCH-PROGRAM
                     VARYING WS-SUB3 FROM 1 BY 1
                     UNTIL WS-SUB3 > WS-PROG-CNT.
           IF WS-PROG-PREFIX = SPACE
               MOVE SPACE                     TO WS-PROGRAM
               STRING WS-EXEC-PREFIX          DELIMITED BY SPACE
                      WS-HOLD-06              DELIMITED BY SPACE
                      INTO WS-HOLD-20
           ELSE
               STRING WS-PROG-PREFIX          DELIMITED BY SPACE
                      WS-HOLD-06              DELIMITED BY SPACE
                      INTO WS-HOLD-20.

       2100-MATCH-PROGRAM.
           IF WS-PROGRAM = WS-G1-PROG(WS-SUB3)
               MOVE WS-G1-PFX(WS-SUB3)        TO WS-PROG-PREFIX.

       2100-NEW-JOB-NAME.
           MOVE WS-STEP                       TO WS-HOLD-20.
           PERFORM 2800-DETERMINE-FIELD-LEN.
           MOVE WS-HOLD-20                    TO WS-J1-BEF(WS-J1-SUB).
           MOVE WS-HOLD-LEN                   TO WS-J1-BLEN(WS-J1-SUB).
           ADD WS-JOB-INCREMENT               TO WS-JOB-NBR.
           PERFORM 2100-FORMAT-NEW-JOB.
           PERFORM 2800-DETERMINE-FIELD-LEN.
           MOVE WS-HOLD-20                    TO WS-J1-AFT(WS-J1-SUB).
           MOVE WS-HOLD-LEN                   TO WS-J1-ALEN(WS-J1-SUB).
           IF WS-LS-TEST NUMERIC
               DISPLAY ' Step  ' WS-STEP
                       ' len ' WS-J1-BLEN(WS-J1-SUB)
                       '  ' WS-HOLD-10 ' len ' WS-HOLD-LEN.

       2100-FORMAT-NEW-JOB.
           MOVE SPACE                         TO WS-HOLD-20.
           MOVE SPACE                         TO WS-HOLD-06.
           IF WS-JOB-DIGITS = 1
               MOVE WS-JOB-NBR(4: 1)          TO WS-HOLD-06.
           IF WS-JOB-DIGITS = 2
               MOVE WS-JOB-NBR(3: 2)          TO WS-HOLD-06.
           IF WS-JOB-DIGITS = 3
               MOVE WS-JOB-NBR(2: 3)          TO WS-HOLD-06.
           IF WS-JOB-DIGITS = 4
               MOVE WS-JOB-NBR                TO WS-HOLD-06.
           STRING WS-JOB-PREFIX               DELIMITED BY SPACE
                  WS-HOLD-06                  DELIMITED BY SPACE
                  INTO WS-HOLD-20.

      *    if looping through multiple jobs/procs, allow step
      *    renames to start over for each job/proc
       2100-RESET-PROC-STEPS.
           IF WS-RESET-STEPS-SW = 'Y'
               MOVE ZERO                      TO WS-EXEC-NBR.

       2100-RESET-JOB-STEPS.
           IF WS-RESET-STEPS-SW = 'Y'
               MOVE ZERO                      TO WS-JOB-NBR.

      *---------------------------------------
      *    Renumber EXEC steps
      *      -and- job step references that override proc steps
      *            ex: //EX010.SYSIN DD DUMMY
      *      Apply changes here
      *----+----------------------------------
       2400-APPLY-NEW-STEPS.
           IF WS-LS-TEST NUMERIC
               DISPLAY ' Option "renum" specified - '
               DISPLAY '   applying new step names:'
               DISPLAY '          '.
           MOVE ZERO                          TO WS-P1-SUB.
           MOVE ZERO                          TO WS-J1-SUB.
           MOVE ZERO                          TO WS-EXEC-NBR.
           MOVE ZERO                          TO WS-JOB-NBR.
           MOVE ZERO                          TO WS-READ-JCL01-CNT.
           MOVE SPACE                         TO WS-INLINE-SW.
           PERFORM 0200-OPEN-JCL01-IO.
           PERFORM 2400-READ-JCL01 THRU
                   2400-READ-JCL01-EXIT.
           CLOSE JCL01.
           PERFORM 1600-SHOW-DIVIDING-LINE.

       2400-READ-JCL01.
           READ JCL01.
           IF WS-STAT = ZERO
               ADD 1                          TO WS-READ-JCL01-CNT
               MOVE JCL01-RCD                 TO WS-HOLD-RCD
               PERFORM 2400-SELECT THRU
                       2400-SELECT-EXIT
               GO TO 2400-READ-JCL01
           ELSE
           IF WS-STAT = 10
               CONTINUE
           ELSE
               DISPLAY '**** JCLNEAT read error on JCL01 '
               DISPLAY '**** File stat           ' WS-STAT
               MOVE +2400                     TO WS-RETURN-CODE.

       2400-READ-JCL01-EXIT. EXIT.

       2400-SELECT.
           MOVE SPACE                         TO WS-RCD-UPDATE-SW.
           MOVE WS-HOLD-RCD                   TO WS-HOLD-ORIG.
           MOVE WS-HOLD-RCD                   TO WS-HOLD-RCD2.

           PERFORM 1200-DETERMINE-SKIP-BY-REQ.

           IF WS-DELIM NOT = SPACE
               MOVE SPACE                     TO WS-UNSTR-FIELDS
               UNSTRING WS-HOLD-RCD           DELIMITED BY ALL SPACE
                   INTO WS-UNSTR1 WS-UNSTR2 WS-UNSTR3 WS-UNSTR4
               IF WS-DELIM = WS-UNSTR1 OR WS-UNSTR2 OR WS-UNSTR3
                          OR WS-UNSTR4
                   MOVE SPACE                 TO WS-DELIM
                   MOVE SPACE                 TO WS-INLINE-SW
                   GO TO 2400-SELECT-EXIT
               ELSE
                   GO TO 2400-SELECT-EXIT.

           IF WS-HOLD-RCD(1: 3) = '/* '
               MOVE SPACE                     TO WS-INLINE-SW
               GO TO 2400-SELECT-EXIT.

           IF WS-HOLD-RCD(1: 3) = '//*'
               MOVE SPACE                     TO WS-INLINE-SW.

           IF WS-INLINE-SW = 'Y'
               CONTINUE
           ELSE
               PERFORM 1200-SET-INLINE-SWITCH
               PERFORM 2400-SELECTED-JCL
               IF WS-RCD-UPDATE-SW = 'Y'
                 IF WS-HOLD-RCD = WS-HOLD-ORIG
                     CONTINUE
                 ELSE
                     MOVE WS-HOLD-RCD         TO JCL01-RCD
                     PERFORM 3000-REWRITE-JCL01
                     ADD 1                    TO WS-REWRITE-JCL02-CNT.

       2400-SELECT-EXIT. EXIT.

       2400-SELECTED-JCL.
           IF WS-HOLD-RCD(1: 3) = '//*'
               CONTINUE
           ELSE
               MOVE ' JOB '                   TO WS-ITEM
               MOVE 5                         TO WS-LEN
               MOVE SPACE                     TO WS-SKIP-SW
               MOVE SPACE                     TO WS-QUOTE-SW
               MOVE SPACE                     TO WS-ITEM-FND-SW
               PERFORM 2400-FIND-ITEM
                   VARYING WS-SUB2 FROM 4 BY 1
                   UNTIL WS-SUB2 > 30
               IF WS-ITEM-FND-SW = 'Y'
                   MOVE 'J'                   TO WS-JOB-PROC-SW
                   MOVE WS-HOLD-RCD(3: 8)     TO WS-HOLD-JOB
                   MOVE SPACE                 TO WS-JOB
                   UNSTRING WS-HOLD-JOB       DELIMITED BY SPACE
                       INTO WS-JOB
                   PERFORM 1600-SHOW-JOB.

           IF WS-HOLD-RCD(1: 3) = '//*'
               CONTINUE
           ELSE
               MOVE ' PROC '                  TO WS-ITEM
               MOVE 6                         TO WS-LEN
               MOVE SPACE                     TO WS-SKIP-SW
               MOVE SPACE                     TO WS-QUOTE-SW
               MOVE SPACE                     TO WS-ITEM-FND-SW
               PERFORM 2400-FIND-ITEM
                   VARYING WS-SUB2 FROM 4 BY 1
                   UNTIL WS-SUB2 > 30
               IF WS-ITEM-FND-SW = 'Y'
                   MOVE 'P'                   TO WS-JOB-PROC-SW
                   MOVE WS-HOLD-RCD(3: 8)     TO WS-HOLD-PROC
                   MOVE SPACE                 TO WS-PROC
                   UNSTRING WS-HOLD-PROC      DELIMITED BY SPACE
                       INTO WS-PROC
                   PERFORM 1600-SHOW-PROC.

           IF WS-HOLD-RCD(1: 3) = '//*'
               CONTINUE
           ELSE
               MOVE ' PEND '                  TO WS-ITEM
               MOVE 6                         TO WS-LEN
               MOVE SPACE                     TO WS-SKIP-SW
               MOVE SPACE                     TO WS-QUOTE-SW
               MOVE SPACE                     TO WS-ITEM-FND-SW
               PERFORM 2400-FIND-ITEM
                   VARYING WS-SUB2 FROM 4 BY 1
                   UNTIL WS-SUB2 > 30
               IF WS-ITEM-FND-SW = 'Y'
                   MOVE 'J'                   TO WS-JOB-PROC-SW.

           IF WS-HOLD-RCD(1: 3) = '//*'
               CONTINUE
           ELSE
           IF WS-JOB-PROC-SW = 'J'
               MOVE SPACE                     TO WS-SKIP-SW
               MOVE SPACE                     TO WS-QUOTE-SW
               MOVE SPACE                     TO WS-ITEM-FND-SW
               MOVE ' EXEC '                  TO WS-ITEM
               MOVE 6                         TO WS-LEN
               PERFORM 2400-FIND-ITEM
                   VARYING WS-SUB2 FROM 4 BY 1
                   UNTIL WS-SUB2 > 60
               IF WS-ITEM-FND-SW = 'Y'
                   MOVE WS-HOLD-RCD(WS-TEMP-SUB + 6: 10)
                                            TO WS-HOLD-20
                   PERFORM 2800-SHIFT-LEFT
                   MOVE SPACE                 TO WS-STEP
                   IF WS-HOLD-20(1: 4) NOT = 'PGM='
                       UNSTRING WS-HOLD-20    DELIMITED BY SPACE
                           INTO WS-STEP.

           IF WS-SKIP-RCD-BY-REQ = 'Y'
               CONTINUE
           ELSE
               PERFORM 2400-LOOP-THROUGH-LINE
                   VARYING WS-SUB2 FROM 2 BY 1
                   UNTIL WS-SUB2 > 65.

      *---------------------------------------
      *    alter job steps and handle situations where the
      *    proc step is listed within the job area:
      *    RESTART=JOB.STEP  or  COND=(0,NE,JOB.STEP)
      *---------------------------------------
           IF WS-SKIP-RCD-BY-REQ = 'Y'
               CONTINUE
           ELSE
           IF WS-JOB-PROC-SW = 'J'
               MOVE ZERO                      TO WS-HOLD-SUB2
               PERFORM 2500-SELECTED-JCL.

      *    ws-sub2
       2400-LOOP-THROUGH-LINE.
           PERFORM 2400-APPLY-NEW-EXEC
               VARYING WS-P1-SUB FROM 1 BY 1
               UNTIL WS-P1-SUB > WS-P1-MAX.

      *    ws-sub2 ws-p1-sub
      *    search for steps using '/step ' and '.step,' and '.step)'
      *                       and '/step.' and ',step.' and ',step)'
      *                       and ' step ' and '(step.' and ' step.'
      *                       and '*step ' and '=step.' and '.step '
      *                       and '/*tep ' and '=step.' and '.step '
      *    to avoid situations
      *    where        EX010  EX010B  EX010C  EX010D.SYSIN  EX010E)
      *    becomes      EX430  EX430B  EX430C  EX430D.SYSIN  EX430E)
      *    instead of   EX430  EX440   EX450   EX460.SYSIN   EX470)
       2400-APPLY-NEW-EXEC.
           IF WS-JOB-PROC-SW = 'P'
             IF WS-P1-PROC(WS-P1-SUB) = WS-PROC
                 PERFORM 2400-SEARCH-FOR-SPECIFIC-STEP.
           IF WS-JOB-PROC-SW = 'J'
             IF WS-P1-PROC(WS-P1-SUB) = WS-STEP
                 PERFORM 2400-SEARCH-FOR-SPECIFIC-STEP.

      *    ws-sub2 ws-p1-sub
       2400-SEARCH-FOR-SPECIFIC-STEP.
           MOVE SPACE                         TO WS-STEP-FND-SW.

      *   '/step '
           IF WS-P1-DONE(WS-P1-SUB) = SPACE
               MOVE SPACE                     TO WS-BEF
               MOVE '/'                       TO WS-BEF(1: 1)
               MOVE WS-P1-BEF(WS-P1-SUB)      TO WS-BEF(2: )
               MOVE WS-P1-BLEN(WS-P1-SUB)     TO WS-BEF-LEN
               ADD 2                          TO WS-BEF-LEN
               MOVE SPACE                     TO WS-AFT
               MOVE '/'                       TO WS-AFT(1: 1)
               MOVE WS-P1-AFT(WS-P1-SUB)      TO WS-AFT(2: )
               MOVE WS-P1-ALEN(WS-P1-SUB)     TO WS-AFT-LEN
               ADD 2                          TO WS-AFT-LEN
               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)
                                 = WS-BEF(1: WS-BEF-LEN)
                   MOVE 'Y'                   TO WS-P1-DONE(WS-P1-SUB)
                   PERFORM 2400-STEP-FOUND.

      *   '.step,'
           IF WS-STEP-FND-SW = SPACE
               MOVE SPACE                     TO WS-BEF
               MOVE '.'                       TO WS-BEF(1: 1)
               MOVE WS-P1-BEF(WS-P1-SUB)      TO WS-BEF(2: )
               MOVE WS-P1-BLEN(WS-P1-SUB)     TO WS-BEF-LEN
               ADD 2                          TO WS-BEF-LEN
               MOVE ','                       TO WS-BEF(WS-BEF-LEN: 1)
               MOVE SPACE                     TO WS-AFT
               MOVE '.'                       TO WS-AFT(1: 1)
               MOVE WS-P1-AFT(WS-P1-SUB)      TO WS-AFT(2: )
               MOVE WS-P1-ALEN(WS-P1-SUB)     TO WS-AFT-LEN
               ADD 2                          TO WS-AFT-LEN
               MOVE ','                       TO WS-AFT(WS-AFT-LEN: 1)
               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)
                                 = WS-BEF(1: WS-BEF-LEN)
                   PERFORM 2400-STEP-FOUND.

      *   '.step)'
           IF WS-STEP-FND-SW = SPACE
               MOVE ')'                       TO WS-BEF(WS-BEF-LEN: 1)
               MOVE ')'                       TO WS-AFT(WS-AFT-LEN: 1)
               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)
                                 = WS-BEF(1: WS-BEF-LEN)
                   PERFORM 2400-STEP-FOUND.

      *   '.step '
           IF WS-STEP-FND-SW = SPACE
               MOVE SPACE                     TO WS-BEF(WS-BEF-LEN: 1)
               MOVE SPACE                     TO WS-AFT(WS-AFT-LEN: 1)
               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)
                                 = WS-BEF(1: WS-BEF-LEN)
                   PERFORM 2400-STEP-FOUND.

      *   ',step.'
           IF WS-STEP-FND-SW = SPACE
               MOVE ','                       TO WS-BEF(1: 1)
               MOVE ','                       TO WS-AFT(1: 1)
               MOVE '.'                       TO WS-BEF(WS-BEF-LEN: 1)
               MOVE '.'                       TO WS-AFT(WS-AFT-LEN: 1)
               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)
                                 = WS-BEF(1: WS-BEF-LEN)
                   PERFORM 2400-STEP-FOUND.

      *   ',step)'
           IF WS-STEP-FND-SW = SPACE
               MOVE ')'                       TO WS-BEF(WS-BEF-LEN: 1)
               MOVE ')'                       TO WS-AFT(WS-AFT-LEN: 1)
               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)
                                 = WS-BEF(1: WS-BEF-LEN)
                   PERFORM 2400-STEP-FOUND.

      *   '(step.'
           IF WS-STEP-FND-SW = SPACE
               MOVE '('                       TO WS-BEF(1: 1)
               MOVE '('                       TO WS-AFT(1: 1)
               MOVE '.'                       TO WS-BEF(WS-BEF-LEN: 1)
               MOVE '.'                       TO WS-AFT(WS-AFT-LEN: 1)
               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)
                                 = WS-BEF(1: WS-BEF-LEN)
                   PERFORM 2400-STEP-FOUND.

      *   ' step.'
           IF WS-STEP-FND-SW = SPACE
               MOVE SPACE                     TO WS-BEF(1: 1)
               MOVE SPACE                     TO WS-AFT(1: 1)
               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)
                                 = WS-BEF(1: WS-BEF-LEN)
                   PERFORM 2400-STEP-FOUND.

      *   '/step.'
           IF WS-STEP-FND-SW = SPACE
               MOVE '/'                       TO WS-BEF(1: 1)
               MOVE '/'                       TO WS-AFT(1: 1)
               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)
                                 = WS-BEF(1: WS-BEF-LEN)
                   PERFORM 2400-STEP-FOUND.

      *   '=step.'
           IF WS-STEP-FND-SW = SPACE
               MOVE '='                       TO WS-BEF(1: 1)
               MOVE '='                       TO WS-AFT(1: 1)
               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)
                                 = WS-BEF(1: WS-BEF-LEN)
                   PERFORM 2400-STEP-FOUND.

      *    only in comments: search wrapped in spaces ' EX010 '
      *    to avoid changing program names etc  PGM=EX010

      *   ' step '
           IF WS-STEP-FND-SW = SPACE
             IF WS-HOLD-RCD(1: 3) = '//*'
                 MOVE SPACE                   TO WS-BEF
                 MOVE WS-P1-BEF(WS-P1-SUB)    TO WS-BEF(2: )
                 MOVE WS-P1-BLEN(WS-P1-SUB)   TO WS-BEF-LEN
                 ADD 2                        TO WS-BEF-LEN
                 MOVE SPACE                   TO WS-AFT
                 MOVE WS-P1-AFT(WS-P1-SUB)    TO WS-AFT(2: )
                 MOVE WS-P1-ALEN(WS-P1-SUB)   TO WS-AFT-LEN
                 ADD 2                        TO WS-AFT-LEN
                 IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)
                                   = WS-BEF(1: WS-BEF-LEN)
                     PERFORM 2400-STEP-FOUND.

      *   '*step '
           IF WS-STEP-FND-SW = SPACE
             IF WS-HOLD-RCD(1: 3) = '//*'
                 MOVE '*'                     TO WS-BEF(1: 1)
                 MOVE '*'                     TO WS-AFT(1: 1)
                 IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)
                                   = WS-BEF(1: WS-BEF-LEN)
                     PERFORM 2400-STEP-FOUND.

      *   '/*tep '
           IF WS-STEP-FND-SW = SPACE
             IF WS-HOLD-RCD(1: 3) = '//*'
                 MOVE SPACE                   TO WS-BEF
                 MOVE WS-P1-BEF(WS-P1-SUB)    TO WS-BEF(2: )
                 MOVE '/*'                    TO WS-BEF(1: 2)
                 MOVE WS-P1-BLEN(WS-P1-SUB)   TO WS-BEF-LEN
                 ADD 2                        TO WS-BEF-LEN
                 MOVE SPACE                   TO WS-AFT
                 MOVE WS-P1-AFT(WS-P1-SUB)    TO WS-AFT(2: )
                 MOVE '/*'                    TO WS-AFT(1: 2)
                 MOVE WS-P1-ALEN(WS-P1-SUB)   TO WS-AFT-LEN
                 ADD 2                        TO WS-AFT-LEN
                 IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)
                                   = WS-BEF(1: WS-BEF-LEN)
                     PERFORM 2400-STEP-FOUND.

       2400-STEP-FOUND.
           MOVE WS-HOLD-RCD                   TO WS-HOLD-RCD2.
           MOVE WS-SUB2                       TO WS-FND-POS WS-POS.
           ADD WS-BEF-LEN                     TO WS-FND-POS.
           ADD WS-AFT-LEN                     TO WS-POS.
           MOVE WS-BEF(1: WS-BEF-LEN)         TO WS-ITEM.
           IF WS-BEF-LEN = WS-AFT-LEN
             IF WS-BEF(1: WS-BEF-LEN) = WS-AFT(1: WS-AFT-LEN)
                 CONTINUE
             ELSE
                 PERFORM 2400-CHANGE-SAME-LEN
           ELSE
               PERFORM 2400-CHANGE-DIFF-LEN.

           MOVE 'Y'                           TO WS-STEP-FND-SW.
           MOVE WS-P1-MAX                     TO WS-P1-SUB.
      *    do not stop looping through line:  ((4,NE,S060),(8,NE,S070))
      *    MOVE 65                            TO WS-SUB2.

       2400-CHANGE-SAME-LEN.
           PERFORM 1600-SHOW-FOUND-MSG.
           PERFORM 1600-SHOW-BEFORE.
           MOVE WS-AFT(1: WS-AFT-LEN)
                          TO WS-HOLD-RCD(WS-SUB2: WS-AFT-LEN).
           MOVE 'Y'                           TO WS-RCD-UPDATE-SW.
           PERFORM 1600-SHOW-AFTER.
           PERFORM 1600-SHOW-BLANK-LINE.

       2400-CHANGE-DIFF-LEN.
           PERFORM 1600-SHOW-FOUND-MSG.
           PERFORM 1600-SHOW-BEFORE.
           MOVE 'Y'                           TO WS-OVERLAY-SW.
           PERFORM 2700-ADJUST-THINGS.
           IF WS-RCD-UPDATE-SW = 'Y'
               MOVE WS-AFT(1: WS-AFT-LEN)
                      TO WS-HOLD-RCD(WS-SUB2: WS-AFT-LEN).
           PERFORM 1600-SHOW-AFTER.
           PERFORM 1600-SHOW-BLANK-LINE.

      *    ws-sub2
       2400-FIND-ITEM.
           IF WS-HOLD-RCD(WS-SUB2: 1) = '('
               MOVE 'Y'                       TO WS-SKIP-SW
           ELSE
           IF WS-HOLD-RCD(WS-SUB2: 1) = ')'
               MOVE SPACE                     TO WS-SKIP-SW
           ELSE
           IF WS-HOLD-RCD(WS-SUB2: 1) = WS-QUOTE
             IF WS-QUOTE-SW = SPACE
                 MOVE 'Y'                     TO WS-QUOTE-SW
             ELSE
             IF WS-QUOTE-SW = 'Y'
                 MOVE SPACE                   TO WS-QUOTE-SW
             ELSE
                 CONTINUE
           ELSE
           IF WS-HOLD-RCD(WS-SUB2: WS-LEN) = WS-ITEM(1: WS-LEN)
             IF WS-SKIP-SW = SPACE
               IF WS-QUOTE-SW = SPACE
                   MOVE WS-SUB2               TO WS-TEMP-SUB
                   MOVE 60                    TO WS-SUB2
                   MOVE 'Y'                   TO WS-ITEM-FND-SW.

       2500-SELECTED-JCL.
           PERFORM 2500-LOOP-THROUGH-LINE
               VARYING WS-SUB2 FROM 2 BY 1
               UNTIL WS-SUB2 > 65.

      *    ws-sub2
       2500-LOOP-THROUGH-LINE.
           PERFORM 2500-SEARCH-FOR-SPECIFIC-STEP
               VARYING WS-J1-SUB FROM 1 BY 1
               UNTIL WS-J1-SUB > WS-J1-MAX.

      *    ws-sub2 ws-j1-sub
      *    search for steps using '/step ' and '.step ' and '(step.'
      *                       and '/step.' and ',step.' and '.step)'
      *                       and '*step ' and '=step.' and ',step)'
      *    to avoid situations
      *    where        EX010  EX010B  EX010C  EX010D.SYSIN  EX010E)
      *    becomes      EX430  EX430B  EX430C  EX430D.SYSIN  EX430E)
      *    instead of   EX430  EX440   EX450   EX460.SYSIN   EX470)

      *    ws-sub2 ws-j1-sub
       2500-SEARCH-FOR-SPECIFIC-STEP.
           MOVE SPACE                         TO WS-STEP-FND-SW.

      *   '/step '
           IF WS-J1-DONE(WS-J1-SUB) = SPACE
               MOVE SPACE                     TO WS-BEF
               MOVE '/'                       TO WS-BEF(1: 1)
               MOVE WS-J1-BEF(WS-J1-SUB)      TO WS-BEF(2: )
               MOVE WS-J1-BLEN(WS-J1-SUB)     TO WS-BEF-LEN
               ADD 2                          TO WS-BEF-LEN
               MOVE SPACE                     TO WS-AFT
               MOVE '/'                       TO WS-AFT(1: 1)
               MOVE WS-J1-AFT(WS-J1-SUB)      TO WS-AFT(2: )
               MOVE WS-J1-ALEN(WS-J1-SUB)     TO WS-AFT-LEN
               ADD 2                          TO WS-AFT-LEN
               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)
                                 = WS-BEF(1: WS-BEF-LEN)
                   MOVE 'Y'                   TO WS-J1-DONE(WS-J1-SUB)
                   PERFORM 2500-STEP-FOUND.

      *   '.step '
           IF WS-STEP-FND-SW = SPACE
               MOVE SPACE                     TO WS-BEF
               MOVE '.'                       TO WS-BEF(1: 1)
               MOVE WS-J1-BEF(WS-J1-SUB)      TO WS-BEF(2: )
               MOVE WS-J1-BLEN(WS-J1-SUB)     TO WS-BEF-LEN
               ADD 2                          TO WS-BEF-LEN
               MOVE SPACE                     TO WS-AFT
               MOVE '.'                       TO WS-AFT(1: 1)
               MOVE WS-J1-AFT(WS-J1-SUB)      TO WS-AFT(2: )
               MOVE WS-J1-ALEN(WS-J1-SUB)     TO WS-AFT-LEN
               ADD 2                          TO WS-AFT-LEN
               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)
                                 = WS-BEF(1: WS-BEF-LEN)
                   PERFORM 2500-STEP-FOUND.

      *   '.step)'
           IF WS-STEP-FND-SW = SPACE
               MOVE ')'                       TO WS-BEF(WS-BEF-LEN: 1)
               MOVE ')'                       TO WS-AFT(WS-AFT-LEN: 1)
               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)
                                 = WS-BEF(1: WS-BEF-LEN)
                   PERFORM 2500-STEP-FOUND.

      *   ',step)'
           IF WS-STEP-FND-SW = SPACE
               MOVE ','                       TO WS-BEF(1: 1)
               MOVE ','                       TO WS-AFT(1: 1)
               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)
                                 = WS-BEF(1: WS-BEF-LEN)
                   PERFORM 2500-STEP-FOUND.

      *   '/step.'
           IF WS-STEP-FND-SW = SPACE
               MOVE '/'                       TO WS-BEF(1: 1)
               MOVE '/'                       TO WS-AFT(1: 1)
               MOVE '.'                       TO WS-BEF(WS-BEF-LEN: 1)
               MOVE '.'                       TO WS-AFT(WS-AFT-LEN: 1)
               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)
                                 = WS-BEF(1: WS-BEF-LEN)
                   PERFORM 2500-STEP-FOUND.

      *   '(step.'
           IF WS-STEP-FND-SW = SPACE
               MOVE '('                       TO WS-BEF(1: 1)
               MOVE '('                       TO WS-AFT(1: 1)
               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)
                                 = WS-BEF(1: WS-BEF-LEN)
                   PERFORM 2500-STEP-FOUND.

      *   ',step.'
           IF WS-STEP-FND-SW = SPACE
               MOVE ','                       TO WS-BEF(1: 1)
               MOVE ','                       TO WS-AFT(1: 1)
               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)
                                 = WS-BEF(1: WS-BEF-LEN)
                   MOVE WS-HOLD-RCD(WS-SUB2 + 1: WS-BEF-LEN - 2)
                                              TO WS-HOLD-JOB
                   MOVE ZERO                  TO WS-HOLD-SUB2
                   COMPUTE WS-HOLD-SUB2 = WS-SUB2 + WS-AFT-LEN - 1
                   PERFORM 2500-STEP-FOUND
                   PERFORM 2500-ALTER-JOB-DOT-PROC.

      *   '=step.'
           IF WS-STEP-FND-SW = SPACE
               MOVE '='                       TO WS-BEF(1: 1)
               MOVE '='                       TO WS-AFT(1: 1)
               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)
                                 = WS-BEF(1: WS-BEF-LEN)
                   MOVE WS-HOLD-RCD(WS-SUB2 + 1: WS-BEF-LEN - 2)
                                              TO WS-HOLD-JOB
                   MOVE ZERO                  TO WS-HOLD-SUB2
                   COMPUTE WS-HOLD-SUB2 = WS-SUB2 + WS-AFT-LEN - 1
                   PERFORM 2500-STEP-FOUND
                   PERFORM 2500-ALTER-JOB-DOT-PROC.

      *    only in comments: search wrapped in spaces ' EX010 '
      *    to avoid changing program names etc  PGM=EX010

      *   ' step '
           IF WS-STEP-FND-SW = SPACE
             IF WS-HOLD-RCD(1: 3) = '//*'
                 MOVE SPACE                   TO WS-BEF
                 MOVE WS-J1-BEF(WS-J1-SUB)    TO WS-BEF(2: )
                 MOVE WS-J1-BLEN(WS-J1-SUB)   TO WS-BEF-LEN
                 ADD 2                        TO WS-BEF-LEN
                 MOVE SPACE                   TO WS-AFT
                 MOVE WS-J1-AFT(WS-J1-SUB)    TO WS-AFT(2: )
                 MOVE WS-J1-ALEN(WS-J1-SUB)   TO WS-AFT-LEN
                 ADD 2                        TO WS-AFT-LEN
                 IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)
                                   = WS-BEF(1: WS-BEF-LEN)
                     PERFORM 2500-STEP-FOUND.

      *   '*step '
           IF WS-STEP-FND-SW = SPACE
             IF WS-HOLD-RCD(1: 3) = '//*'
                 MOVE '*'                     TO WS-BEF(1: 1)
                 MOVE '*'                     TO WS-AFT(1: 1)
                 IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)
                                   = WS-BEF(1: WS-BEF-LEN)
                     PERFORM 2500-STEP-FOUND.

       2500-STEP-FOUND.
           MOVE WS-HOLD-RCD                   TO WS-HOLD-RCD2.
           MOVE WS-SUB2                       TO WS-FND-POS WS-POS.
           ADD WS-BEF-LEN                     TO WS-FND-POS.
           ADD WS-AFT-LEN                     TO WS-POS.
           MOVE WS-BEF(1: WS-BEF-LEN)         TO WS-ITEM.
           IF WS-BEF-LEN = WS-AFT-LEN
             IF WS-BEF(1: WS-BEF-LEN) = WS-AFT(1: WS-AFT-LEN)
                 CONTINUE
             ELSE
                 PERFORM 2500-CHANGE-SAME-LEN
           ELSE
               PERFORM 2500-CHANGE-DIFF-LEN.

           MOVE 'Y'                           TO WS-STEP-FND-SW.
           MOVE WS-J1-MAX                     TO WS-J1-SUB.
      *    do not stop looping through line:  ((4,NE,S060),(8,NE,S070))
      *    MOVE 65                            TO WS-SUB2.

      *---------------------------------------
      *    //             COND=((4,NE,JOB.PROC),(0,NE,JOB.PROC))
      *                                  |               |
      *
      *                          alter proc steps within "job" logic
      *---------------------------------------
       2500-ALTER-JOB-DOT-PROC.
           PERFORM VARYING WS-T1-SUB FROM 1 BY 1
               UNTIL WS-T1-SUB > WS-T1-MAX
               IF WS-T1-JOB(WS-T1-SUB) = WS-HOLD-JOB
                   MOVE WS-T1-PROC(WS-T1-SUB) TO WS-STEP
                   MOVE WS-T1-MAX             TO WS-T1-SUB
               END-IF
           END-PERFORM.
           MOVE WS-HOLD-SUB2                  TO WS-SUB2.
           PERFORM 2400-LOOP-THROUGH-LINE.

       2500-CHANGE-SAME-LEN.
           PERFORM 1600-SHOW-FOUND-MSG.
           PERFORM 1600-SHOW-BEFORE.
           MOVE WS-AFT(1: WS-AFT-LEN)
                          TO WS-HOLD-RCD(WS-SUB2: WS-AFT-LEN).
           MOVE 'Y'                           TO WS-RCD-UPDATE-SW.
           PERFORM 1600-SHOW-AFTER.
           PERFORM 1600-SHOW-BLANK-LINE.

       2500-CHANGE-DIFF-LEN.
           PERFORM 1600-SHOW-FOUND-MSG.
           PERFORM 1600-SHOW-BEFORE.
           MOVE 'Y'                           TO WS-OVERLAY-SW.
           PERFORM 2700-ADJUST-THINGS.
           IF WS-RCD-UPDATE-SW = 'Y'
               MOVE WS-AFT(1: WS-AFT-LEN)
                      TO WS-HOLD-RCD(WS-SUB2: WS-AFT-LEN).
           PERFORM 1600-SHOW-AFTER.
           PERFORM 1600-SHOW-BLANK-LINE.


      *----+----------------------------------

       2700-ADJUST-THINGS.
           MOVE ZERO                          TO WS-DIFF.
           MOVE ZERO                          TO WS-MOVE.
           MOVE ZERO                          TO WS-BLANK.
           MOVE ZERO                          TO WS-CHECK.
           MOVE ZERO                          TO WS-SPACE-LEN.
           MOVE ZERO                          TO WS-SPACE-LOC.
           IF WS-POS > WS-FND-POS
               PERFORM 2700-MOVE-DATA-RIGHT
           ELSE
           IF WS-POS < WS-FND-POS
               PERFORM 2700-MOVE-DATA-LEFT.

      *    ....+....+....+....+....+....+....+....+
      *    //S010.SYSIN DD DUMMY           *msg
      *    //EX0010.SYSIN DD DUMMY         *msg
      *    diff= 2  fnd-pos 7  pos 9    space-loc= 22
      *    space-len = 3       move = 15

      *    ....+....+....+....+....+....+....+....+
      *    //S010  EXEC  PGM=ABCD          *msg
      *    //S010      EXEC  PGM=ABCD        *msg
      *    diff= 4  fnd-pos 8  pos 12    space-loc= 23
      *    space-len = 5       move= 15

       2700-MOVE-DATA-RIGHT.
           COMPUTE WS-DIFF = WS-POS - WS-FND-POS.
           COMPUTE WS-SPACE-LEN = WS-DIFF + 1.
           MOVE WS-FND-POS                    TO WS-BLANK.
           MOVE WS-FND-POS                    TO WS-START-POS.
           MOVE SPACE                         TO WS-QUOTE-SW.
           PERFORM 2700-FIND-BLANK-AREA.
           IF WS-SPACE-LOC = ZERO
               MOVE ZERO                      TO WS-SCOL
               PERFORM 1600-SHOW-NO-ROOM
           ELSE
               COMPUTE WS-MOVE = WS-SPACE-LOC - WS-FND-POS
               MOVE WS-HOLD-RCD2(1: WS-FND-POS - 1)
                                 TO WS-HOLD-RCD(1: WS-FND-POS - 1)
               MOVE WS-HOLD-RCD2(WS-FND-POS: WS-MOVE)
                                 TO WS-HOLD-RCD(WS-POS: WS-MOVE)
               MOVE SPACE        TO WS-HOLD-RCD(WS-BLANK: WS-DIFF)
               PERFORM 1600-SHOW-WORK
               MOVE 'Y'                       TO WS-RCD-UPDATE-SW.

      *    ....+....+....+....+....+....+....+....+
      *    //EX0010.SYSIN DD DUMMY         *msg
      *    //S010.SYSIN DD DUMMY           *msg
      *    diff= 2  fnd-pos 9  pos 7    space-loc= 24
      *    space-len = 3       move = 15
      *    blank = 22

      *    ....+....+....+....+....+....+....+....+
      *    //S010      EXEC  PGM=ABCD        *msg
      *    //S010  EXEC  PGM=ABCD          *msg
      *    diff= 4  fnd-pos 12  pos 8     space-loc= 23
      *    space-len = 5        move= 15
      *    blank = 23

       2700-MOVE-DATA-LEFT.
           COMPUTE WS-DIFF = WS-FND-POS - WS-POS.
           COMPUTE WS-SPACE-LEN = WS-DIFF + 1.
           MOVE WS-POS                        TO WS-CHECK.
           MOVE WS-FND-POS                    TO WS-START-POS.
           MOVE SPACE                         TO WS-QUOTE-SW.
           PERFORM 2700-FIND-BLANK-AREA.

           IF WS-SPACE-LOC = ZERO
               COMPUTE WS-MOVE = 72 - WS-FND-POS
           ELSE
               COMPUTE WS-MOVE = WS-SPACE-LOC - WS-FND-POS.
           COMPUTE WS-BLANK = WS-POS + WS-MOVE.

           IF WS-HOLD-RCD(WS-CHECK: WS-DIFF) = SPACE
               OR WS-OVERLAY-SW = 'Y'
               MOVE WS-HOLD-RCD2(1: WS-POS - 1)
                                     TO WS-HOLD-RCD(1: WS-POS - 1)
               MOVE WS-HOLD-RCD2(WS-FND-POS: WS-MOVE)
                                     TO WS-HOLD-RCD(WS-POS: WS-MOVE)
               MOVE SPACE        TO WS-HOLD-RCD(WS-BLANK: WS-DIFF)
               PERFORM 1600-SHOW-WORK
               MOVE 'Y'                       TO WS-RCD-UPDATE-SW
           ELSE
               MOVE ZERO                      TO WS-SCOL
               PERFORM 1600-SHOW-NO-ROOM.

       2700-FIND-BLANK-AREA.
           MOVE ZERO                          TO WS-MAX-LOOK.
           COMPUTE WS-MAX-LOOK = 72 - WS-DIFF.
           PERFORM 2700-FIND-EMBEDDED-SPACE
               VARYING WS-SUB3 FROM WS-START-POS BY 1
               UNTIL WS-SUB3 > WS-MAX-LOOK.

       2700-FIND-EMBEDDED-SPACE.
           IF WS-HOLD-RCD(WS-SUB3: 1) = WS-QUOTE
             IF WS-QUOTE-SW = SPACE
                 MOVE 'Y'                     TO WS-QUOTE-SW
             ELSE
             IF WS-QUOTE-SW = 'Y'
                 MOVE SPACE                   TO WS-QUOTE-SW
             ELSE
                 CONTINUE
           ELSE
           IF WS-HOLD-RCD(WS-SUB3: WS-SPACE-LEN) = SPACE
             IF WS-QUOTE-SW = SPACE
                 MOVE WS-SUB3                 TO WS-SPACE-LOC
                 MOVE 72                      TO WS-SUB3.

       2800-DETERMINE-FIELD-LEN.
           PERFORM VARYING WS-SUB3 FROM 20 BY -1
              UNTIL WS-SUB3 < 1
              IF WS-HOLD-20(WS-SUB3: 1) NOT = SPACE
                  MOVE WS-SUB3                TO WS-HOLD-LEN
                  MOVE ZERO                   TO WS-SUB3
              END-IF
           END-PERFORM.

      *---------------------------------------
      *    left justify a field
      *
      *    '      hello'    --->   'hello      '
      *---------------------------------------
       2800-SHIFT-LEFT.
           MOVE SPACE                         TO WS-HOLD-20-TEMP.
           PERFORM VARYING WS-STR1 FROM 1 BY 1
               UNTIL WS-STR1 > 20
               IF WS-HOLD-20(WS-STR1: 1) NOT = SPACE
                   MOVE WS-HOLD-20(WS-STR1: ) TO WS-HOLD-20-TEMP
                   MOVE 20                    TO WS-STR1
               END-IF
           END-PERFORM.
           MOVE WS-HOLD-20-TEMP               TO WS-HOLD-20.

      *---------------------------------------

       3000-REWRITE-JCL01.
           REWRITE JCL01-RECORD.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** JCLNEAT rewrite error on JCL01'
               DISPLAY '**** File stat           ' WS-STAT
               MOVE 'Y'                       TO WS-END-JCL01-SW
               MOVE +3000                     TO WS-RETURN-CODE.

      ************************************ END JCLNEAT
