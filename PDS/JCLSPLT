
       TITLE '  JCLSPLT: separate long JCL lines'.
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    JCLSPLT.
      **********************************************************CX003B
      *@@@ C3 separate long JCL lines
      ****************************************************************
      *
      *  I am interested in knowing if/where these programs
      *  are in use.     Email:  jiannon@me.com
      *
      ****************************************************************
      * Date written: 10/08/2019
      * Author      : Jim Iannone
      *               separate long JCL lines
      ****************************************************************

       ENVIRONMENT DIVISION.

       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           C01 IS PAGE-TOP.

       INPUT-OUTPUT SECTION.
       FILE-CONTROL.

           SELECT JCLIN                ASSIGN TO JCLIN
                                       ORGANIZATION IS SEQUENTIAL
                                       ACCESS MODE IS SEQUENTIAL
                                       FILE STATUS IS WS-STAT.

           SELECT JCLOUT               ASSIGN TO JCLOUT
                                       ORGANIZATION IS SEQUENTIAL
                                       ACCESS MODE IS SEQUENTIAL
                                       FILE STATUS IS WS-STAT.

           SELECT PARM01               ASSIGN TO PARM01
                                       ORGANIZATION IS SEQUENTIAL
                                       ACCESS MODE IS SEQUENTIAL
                                       FILE STATUS IS WS-STAT.


       DATA DIVISION.
       FILE SECTION.

       FD  JCLIN
           RECORDING MODE F.
       01  JCLIN-RECORD.
           05  JCLIN-RCD               PIC  X(80).

       FD  JCLOUT
           RECORDING MODE F.
       01  JCLOUT-RECORD.
           05  JCLOUT-RCD              PIC  X(80).

      * - ------------ ---
      * C split start  016

       FD  PARM01
           RECORDING MODE F.
       01  PARM01-RECORD.
           05  PARM01-DOCU             PIC  X.
           05  FILLER                  PIC  X.
           05  PARM01-CODE             PIC  X.
           05  FILLER                  PIC  X.
           05  PARM01-PARM             PIC  X(12).
           05  FILLER                  PIC  X.
           05  PARM01-VALUE            PIC  XXX.
           05  FILLER                  PIC  X(52).
           05  FILLER                  PIC  X(08).

       WORKING-STORAGE SECTION.

       01  WS-START.
           05  FILLER                  PIC  X(32)    VALUE
               ' Working storage JCLSPLT start '.

       01  WS-WORK-FIELDS.
           05  WS-STAT                 PIC  99       VALUE ZERO.
           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.
           05  WS-TALLY                PIC S9(05)    VALUE ZERO COMP.
           05  WS-COMMA-LOC            PIC  999      VALUE ZERO.
           05  WS-START-LOC            PIC  999      VALUE ZERO.
           05  WS-DISP-LOC             PIC  999      VALUE ZERO.
           05  WS-PAREN-CNT            PIC  999      VALUE ZERO.
           05  WS-BLANK                PIC  999      VALUE ZERO.
           05  WS-80-1                 PIC  9        VALUE ZERO.
           05  WS-LS-DATA              PIC  X(10)    VALUE SPACE.
           05  FILLER REDEFINES WS-LS-DATA.
               10  WS-LS-TEST          PIC  X.
               10  WS-LS-EXTRA         PIC  X(09).
           05  WS-1-CYMD               PIC  X(08)    VALUE SPACE.
           05  WS-ITEM                 PIC  X(12)    VALUE SPACE.
           05  WS-QUOTE                PIC  X        VALUE X'7D'.

       01  WS-COUNT-FIELDS             COMP-3.
           05  WS-READ-JCLIN-CNT       PIC S9(09)    VALUE ZERO.
           05  WS-WRITE-JCLOUT-CNT     PIC S9(09)    VALUE ZERO.
           05  WS-SPLIT-CNT            PIC S9(09)    VALUE ZERO.

       01  WS-SUBSCRIPTS               COMP.
           05  WS-SUB1                 PIC S9(07)    VALUE ZERO.
           05  WS-SUB2                 PIC S9(07)    VALUE ZERO.
           05  WS-SUB3                 PIC S9(07)    VALUE ZERO.
           05  WS-STR1                 PIC S9(07)    VALUE ZERO.
           05  WS-STR2                 PIC S9(07)    VALUE ZERO.

       01  WS-SWITCHES.
           05  WS-END-JCLIN-SW         PIC  X        VALUE 'N'.
               88  END-OF-JCLIN                      VALUE 'Y'.
               88  MORE-JCLIN-RCDS                   VALUE 'N'.
           05  WS-QUOTE-SW             PIC  X        VALUE SPACE.
           05  WS-73-CHOICE-SW         PIC  X        VALUE SPACE.
           05  WS-DISP-SW              PIC  X        VALUE SPACE.

       01  WS-TABLES.
           05  WS-RCD-TABLE            PIC  X(400)   VALUE SPACE.
           05  WS-RCD-ITEM             REDEFINES WS-RCD-TABLE
                                       OCCURS 5 TIMES.
               10  WS-RCD              PIC  X(80).

       01  WS-END.
           05  FILLER                  PIC  X(16)    VALUE
               '  JCLSPLT END  '.

       LINKAGE SECTION.

       01  LS-FIELD.
           05  LS-LENGTH               PIC S9(04)    COMP.
           05  LS-DATA                 PIC  X(10).
           05  FILLER REDEFINES LS-DATA.
               10  LS-TEST             PIC  X.
               10  LS-EXTRA            PIC  X(09).

      /

       PROCEDURE DIVISION USING LS-FIELD.

       0100-PROGRAM-ENTRY.
           MOVE +0000                         TO WS-RETURN-CODE.
           PERFORM 0200-OPEN-FILES.
           DISPLAY '    '.
           DISPLAY '**** JCLSPLT separate long JCL lines'.

           IF WS-RETURN-CODE = ZERO
               PERFORM 0400-PROCESS-JCLIN.

           DISPLAY '**** Records in JCLIN          '
                                               WS-READ-JCLIN-CNT.
           IF WS-SPLIT-CNT = ZERO
               DISPLAY '**** No records matched split criteria'
           ELSE
               DISPLAY '**** New records from split    '
                                               WS-SPLIT-CNT.
           DISPLAY '**** Records written           '
                                               WS-WRITE-JCLOUT-CNT.

           IF WS-RETURN-CODE = ZERO
               PERFORM 0300-CLOSE-FILES
           ELSE
               DISPLAY '**** JCLSPLT cond code ' WS-RETURN-CODE
                       ' set by program'
               MOVE WS-RETURN-CODE            TO RETURN-CODE.

           DISPLAY '**** JCLSPLT EOJ encountered '.
           DISPLAY '    '.
           STOP RUN.

       0200-OPEN-FILES.
           OPEN INPUT  JCLIN.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** JCLSPLT open error on JCLIN'
               DISPLAY '**** File stat           ' WS-STAT
               MOVE +0200                     TO WS-RETURN-CODE.
           OPEN INPUT  PARM01.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** JCLSPLT open error on PARM01'
               DISPLAY '**** File stat           ' WS-STAT
               MOVE +0200                     TO WS-RETURN-CODE.
           OPEN OUTPUT JCLOUT.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** JCLSPLT open error on JCLOUT'
               DISPLAY '**** File stat           ' WS-STAT
               MOVE +0200                     TO WS-RETURN-CODE.

       0300-CLOSE-FILES.
           CLOSE JCLOUT.
           CLOSE PARM01.
           CLOSE JCLIN.

      *---------------------------------------
      *    X
      *---------------------------------------
       0400-PROCESS-JCLIN.

           PERFORM 0500-GET-LINKAGE.

           IF WS-RETURN-CODE = ZERO
               MOVE 040                       TO WS-START-LOC
               MOVE 050                       TO WS-DISP-LOC
               MOVE SPACE                     TO WS-73-CHOICE-SW
               PERFORM 0700-LOAD-PARM01 THRU
                       0700-LOAD-PARM01-EXIT.

           IF WS-RETURN-CODE = ZERO
               PERFORM 0800-SHOW-PARM-VALUES.

           IF WS-RETURN-CODE = ZERO
               PERFORM 1100-GET-JCLIN
                   UNTIL END-OF-JCLIN.

       0500-GET-LINKAGE.
           IF LS-LENGTH = ZERO
               DISPLAY '**** Parm length is zero '
               MOVE +0500                     TO WS-RETURN-CODE
           ELSE
           IF LS-LENGTH > LENGTH OF WS-LS-DATA
               DISPLAY '**** Parm length is excessive '
               MOVE +0500                     TO WS-RETURN-CODE
           ELSE
               MOVE LS-DATA(1: LS-LENGTH)     TO WS-LS-DATA.

      *---------------------------------------
      *    load from parm file
      *---------------------------------------
       0700-LOAD-PARM01.
           READ PARM01.
           IF WS-STAT = 10
               GO TO 0700-LOAD-PARM01-EXIT
           ELSE
           IF WS-STAT > ZERO
               DISPLAY '**** JCLSPLT read error on PARM01'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0700                     TO WS-RETURN-CODE
               GO TO 0700-LOAD-PARM01-EXIT.

           IF PARM01-DOCU = '*'
               GO TO 0700-LOAD-PARM01.

           IF PARM01-CODE = 'C' OR 'c'
               PERFORM 0700-PARM01-FIELDS.

           GO TO 0700-LOAD-PARM01.

       0700-LOAD-PARM01-EXIT. EXIT.

       0700-PARM01-FIELDS.
           MOVE FUNCTION LOWER-CASE(PARM01-PARM) TO WS-ITEM.
           IF WS-ITEM = 'split start'
             IF PARM01-VALUE NUMERIC
                 MOVE PARM01-VALUE            TO WS-START-LOC
                 IF WS-START-LOC < 16
                     MOVE 16                  TO WS-START-LOC
                 ELSE
                 IF WS-START-LOC > 65
                     MOVE 65                  TO WS-START-LOC
                 ELSE
                     CONTINUE
             ELSE
                 DISPLAY '**** JCLSPLT split start value not numeric'
                 MOVE +0700                   TO WS-RETURN-CODE.
           IF WS-ITEM = 'keep disp  '
             IF PARM01-VALUE NUMERIC
                 MOVE PARM01-VALUE            TO WS-DISP-LOC
                 IF WS-DISP-LOC < 16
                     MOVE 16                  TO WS-DISP-LOC
                 ELSE
                 IF WS-DISP-LOC > 63
                     MOVE 63                  TO WS-DISP-LOC
                 ELSE
                     CONTINUE
             ELSE
                 DISPLAY '**** JCLSPLT keep disp value not numeric'
                 MOVE +0700                   TO WS-RETURN-CODE.
             IF WS-ITEM = 'loc 73'
                 MOVE PARM01-VALUE(1: 1)      TO WS-73-CHOICE-SW.

      *---------------------------------------

       0800-SHOW-PARM-VALUES.
           DISPLAY '**** Split records at location       '
                                               WS-START-LOC.
           DISPLAY '**** Keep DISP location              '
                                               WS-DISP-LOC.
           IF WS-73-CHOICE-SW = 'C'
               DISPLAY '**** Location 73 setting             '
                       'copy from previous record'
           ELSE
           IF WS-73-CHOICE-SW = 'S'
               DISPLAY '**** Location 73 setting             '
                       'set to "jclsplt#"        '
           ELSE
               DISPLAY '**** Location 73 setting             '
                       'leave blank'.
           DISPLAY '             '.

       1100-GET-JCLIN.
           PERFORM 1100-READ-JCLIN.
           IF MORE-JCLIN-RCDS
               PERFORM 1200-SELECT THRU
                       1200-SELECT-EXIT.

       1100-READ-JCLIN.
           READ JCLIN.
           IF WS-STAT = ZERO
               ADD 1                          TO WS-READ-JCLIN-CNT
           ELSE
           IF WS-STAT = 10
               MOVE 'Y'                       TO WS-END-JCLIN-SW
           ELSE
               DISPLAY '**** JCLSPLT read error on JCLIN '
               DISPLAY '**** File stat           ' WS-STAT
               MOVE +1100                     TO WS-RETURN-CODE.

      *---------------------------------------
      *    X
      *---------------------------------------
       1200-SELECT.
           MOVE SPACE                         TO WS-RCD-TABLE.
           MOVE 1                             TO WS-SUB1.
           MOVE JCLIN-RCD                     TO WS-RCD(WS-SUB1).

           IF JCLIN-RCD(1: 2) = '//'
             IF JCLIN-RCD(3: 1) = '*'
                 PERFORM 2000-GENERATE-RCDS
             ELSE
                 PERFORM 1300-SPLIT-RECORDS
                     VARYING WS-SUB1 FROM 1 BY 1
                     UNTIL WS-SUB1 > 4
                 PERFORM 2000-GENERATE-RCDS
           ELSE
               PERFORM 2000-GENERATE-RCDS.

       1200-SELECT-EXIT. EXIT.

       1300-SPLIT-RECORDS.
           MOVE SPACE                         TO WS-QUOTE-SW.
           MOVE ZERO                          TO WS-PAREN-CNT.
           MOVE ZERO                          TO WS-COMMA-LOC.
           PERFORM 1300-LOOK-FOR-COMMA
               VARYING WS-SUB2 FROM 3 BY 1
               UNTIL WS-SUB2 > 68.
           IF WS-COMMA-LOC > ZERO
               PERFORM 1300-SPLIT-RCD
           ELSE
               MOVE 5                         TO WS-SUB1.

      *---------------------------------------
      *
      *                 \\|//
      *                 (. .)
      *-------------oOOo-(_)-oOOo-------------
       1300-LOOK-FOR-COMMA.
           IF WS-RCD(WS-SUB1)(WS-SUB2: 1) = '('
               ADD 1                          TO WS-PAREN-CNT
           ELSE
           IF WS-RCD(WS-SUB1)(WS-SUB2: 1) = ')'
               SUBTRACT 1                     FROM WS-PAREN-CNT
           ELSE
           IF WS-RCD(WS-SUB1)(WS-SUB2: 1) = WS-QUOTE
             IF WS-QUOTE-SW = SPACE
                 MOVE 'Y'                     TO WS-QUOTE-SW
             ELSE
                 MOVE SPACE                   TO WS-QUOTE-SW
           ELSE
           IF WS-SUB2 < WS-START-LOC
               CONTINUE
           ELSE
           IF WS-QUOTE-SW = SPACE
             IF WS-PAREN-CNT = ZERO
               IF WS-RCD(WS-SUB1)(WS-SUB2: 1) = ','
                 IF WS-RCD(WS-SUB1)(WS-SUB2 + 1: 1) = SPACE
                     MOVE 72                  TO WS-SUB2
                 ELSE
                     PERFORM 1300-FIND-DISP
                     IF WS-DISP-SW = 'Y'
                         MOVE 72              TO WS-SUB2
                     ELSE
                         MOVE WS-SUB2         TO WS-COMMA-LOC
                         MOVE 72              TO WS-SUB2.

      *---------------------------------------
      *    do not split records if "DISP=SHR" is within
      *    WS-DISP-LOC location.  this avoids generating
      *    extra records when DISP is a short value.
      *---------------------------------------
       1300-FIND-DISP.
           MOVE SPACE                         TO WS-DISP-SW.
           IF WS-SUB2 < 64
             IF WS-RCD(WS-SUB1)(WS-SUB2: 10) = ',DISP=SHR '
                 OR ',DISP=OLD ' OR ',DISP=MOD ' OR ',DISP=NEW '
                 IF WS-SUB2 > WS-DISP-LOC
                     CONTINUE
                 ELSE
                     MOVE 'Y'                 TO WS-DISP-SW.

      *---------------------------------------
      *    break   //DD01  DD  DSN=LONG.FILE.NAME,DISP=(MOD,DELETE)
      *
      *    into    //DD01  DD  DSN=LONG.FILE.NAME,
      *            //          DISP=(MOD,DELETE)
      *---------------------------------------
       1300-SPLIT-RCD.
           PERFORM 1400-SHOW-BEFORE.

           MOVE ZERO                  TO WS-BLANK.
           COMPUTE WS-BLANK = 72 - WS-COMMA-LOC.
           MOVE SPACE                 TO WS-RCD(WS-SUB1 + 1).
           MOVE '//'                  TO WS-RCD(WS-SUB1 + 1)(1: 2).
           MOVE WS-RCD(WS-SUB1)(WS-COMMA-LOC + 1: WS-BLANK)
                                      TO WS-RCD(WS-SUB1 + 1)(16: ).
           IF WS-73-CHOICE-SW = 'C'
               MOVE WS-RCD(WS-SUB1)(73: 8)
                                      TO WS-RCD(WS-SUB1 + 1)(73: 8)
           ELSE
           IF WS-73-CHOICE-SW = 'S'
               MOVE 'jclsplt '        TO WS-RCD(WS-SUB1 + 1)(73: 8)
               MOVE WS-SUB1           TO WS-80-1
               MOVE WS-80-1           TO WS-RCD(WS-SUB1 + 1)(80: 1).
           MOVE SPACE  TO WS-RCD(WS-SUB1)(WS-COMMA-LOC + 1: WS-BLANK).  .
           ADD 1                      TO WS-SPLIT-CNT.

           PERFORM 1400-SHOW-AFTER.

       1400-SHOW-BEFORE.
           IF WS-LS-TEST NUMERIC
               DISPLAY ' record   ' WS-READ-JCLIN-CNT.
           IF WS-LS-TEST = '2' OR '3'
               DISPLAY '          ----+----1----+----2----'
                    '+----3----+----4----+----5----+----6'
                    '----+----7--'.
           IF WS-LS-TEST NUMERIC
               DISPLAY '  before  ' WS-RCD(WS-SUB1).
           IF WS-LS-TEST = '3'
               DISPLAY '       -   start loc: ' WS-START-LOC
                       '  comma loc: ' WS-COMMA-LOC
               DISPLAY '       -    disp loc: ' WS-DISP-LOC.

       1400-SHOW-AFTER.
           IF WS-LS-TEST NUMERIC
               DISPLAY '   after  ' WS-RCD(WS-SUB1)
               DISPLAY '          ' WS-RCD(WS-SUB1 + 1)
               DISPLAY '          '.

       2000-GENERATE-RCDS.
           PERFORM VARYING WS-SUB1 FROM 1 BY 1
               UNTIL WS-SUB1 > 5
               IF WS-RCD(WS-SUB1) = SPACE
                   CONTINUE
               ELSE
                   MOVE WS-RCD(WS-SUB1)       TO JCLOUT-RCD
                   PERFORM 2300-WRITE-JCLOUT
               END-IF
           END-PERFORM.

       2300-WRITE-JCLOUT.
           WRITE JCLOUT-RECORD.
           IF WS-STAT = ZERO
               ADD 1                          TO WS-WRITE-JCLOUT-CNT
           ELSE
               DISPLAY '**** JCLSPLT write error on JCLOUT'
               DISPLAY '**** File stat           ' WS-STAT
               MOVE 'Y'                       TO WS-END-JCLIN-SW
               MOVE +2300                     TO WS-RETURN-CODE.

      ************************************ END JCLSPLT
