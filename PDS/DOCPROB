      *
      *    standard COBOL procedure division with coding examples
      *    just delete what you won't use
      *
       LINKAGE SECTION.

       01  LS-FIELD.
           05  LS-LENGTH               PIC S9(04)    COMP.
           05  LS-DATA                 PIC  X(10).
           05  FILLER REDEFINES LS-DATA.
               10  LS-FACILITY         PIC  X.
               10  LS-CYMD             PIC  X(08).
               10  LS-EXTRA            PIC  X.

      /

       PROCEDURE DIVISION.
       PROCEDURE DIVISION USING LS-FIELD.

       0100-PROGRAM-ENTRY.
           MOVE +0000                         TO WS-RETURN-CODE.
           PERFORM 0200-OPEN-FILES.
           DISPLAY '    '.
           DISPLAY '**** XXXXXXXX program purpose here'.

           IF WS-RETURN-CODE = ZERO
               PERFORM 0400-PROCESS-AAAAAAAA.

           DISPLAY '**** Records in AAAAAAAA ' WS-READ-AAAAAAAA-CNT.
           DISPLAY '**** Records sorted      ' WS-SORT-RCD-CNT.
           DISPLAY '**** Records written     ' WS-WRITE-BBBBBBBB-CNT.
           DISPLAY '**** Pages out           ' WS-WRITE-PAGE-CNT.

           IF WS-RETURN-CODE = ZERO
               PERFORM 0300-CLOSE-FILES
           ELSE
               DISPLAY '**** XXXXXXXX cond code ' WS-RETURN-CODE
                       ' set by program'
               MOVE WS-RETURN-CODE            TO RETURN-CODE.

           DISPLAY '**** XXXXXXXX EOJ encountered '.
           DISPLAY '    '.
           STOP RUN.
           GOBACK.

       0200-OPEN-FILES.
           OPEN OUTPUT AAAAAAAA.
           OPEN I-O    AAAAAAAA.
           OPEN EXTEND AAAAAAAA.

           OPEN INPUT  AAAAAAAA.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** XXXXXXXX open error on AAAAAAAA'
               DISPLAY '**** File stat           ' WS-STAT
               PERFORM 3000-DISPLAY-VSAM-ERROR
               MOVE +0200                     TO WS-RETURN-CODE.
           OPEN OUTPUT BBBBBBBB.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** XXXXXXXX open error on BBBBBBBB'
               DISPLAY '**** File stat           ' WS-STAT
               MOVE +0200                     TO WS-RETURN-CODE.
           OPEN OUTPUT PRINT-AAAAAAAA.

       0300-CLOSE-FILES.
           CLOSE PRINT-AAAAAAAA.
           CLOSE BBBBBBBB.
           CLOSE AAAAAAAA.

      *---------------------------------------
      *    X
      *---------------------------------------
       0400-PROCESS-AAAAAAAA.

      *----General
      *    NOTE: A 'CALL' WILL ALTER THE VALUE OF RETURN-CODE.
      *          USE 'WS-RETURN-CODE' AND MOVE TO RETURN-CODE AT END.
      *    DISPLAY '**** RESPOND TO CONTINUE ' UPON CONSOLE.

      *----Continuation
      *        WHEN 'MI'  MOVE 'MI=planning schedule/material release is
      -                        'suer'         TO WS-VALUE

      *----Numbers
      *    01 WS-A    PIC  X(10).     NUMBER:  -300  OR  1.23
      *    01 WS-B    PIC  X(10).     CURRENCY: $12,345.67CR
      *    01 WS-N    PIC S999V99.
      *    COMPUTE WS-N = FUNCTION NUMVAL(WS-A)   : FOR NUMBERS
      *    COMPUTE WS-N = FUNCTION NUMVAL-C(WS-B) : FOR CURRENCY
      *
      *    COMPUTE WS-N = FUNCTION ORD-MAX(ARG1 ARG2 ARG3)  :RESULT=3
      *
      *    COMPUTE X Y Z = A + B / C ** D - E
      *    COMPUTE Z = FUNCTION REM(X 2)  :REMAINDER AFTER DIV X BY 2

      *----Random numbers
      *    01 MIN-NUMBER PIC 999 VALUE 120.
      *    01 MAX-NUMBER PIC 999 VALUE 010.
      *    01 RANDOM-NUMBER PIC 9999V9999.
      *    01 RANDOM-SHOW PIC ZZZZ.9999.
      *    COMPUTE RANDOM-NUMBER = FUNCTION RANDOM
      *            * (MAX-NUMBER - MIN-NUMBER + 1) + MIN-NUMBER.
      *    MOVE RANDOM-NUMBER TO RANDOM-SHOW.
      *    DISPLAY 'RANDOM NUMBER: ' RANDOM-SHOW.

      *----Dates as part of functions
      *
      *    note: define timestamp as   PIC  X(21)  VALUE SPACE.
      *
      *    CURRENT-DATE                CCYYMMDDHHMMSSHH+HHSS
      *                                                -  GMT offset
      *    MOVE FUNCTION CURRENT-DATE(1: 8)   TO WS-1-CYMD.
      *    DATE-OF-INTEGER             CCYYMMDD
      *    DATE-TO-YYYYMMDD            CCYYMMDD
      *    DATEVAL                     WS-FIELD YY YYYY X XX XXX XXXX
      *    DAY-OF-INTEGER              CCYYDDD
      *    DAY-TO-YYYYDDD              convert YYDDD to CCYYDDD
      *    INTEGER-OF-DATE             PIC S9(09)
      *      obtained from the calculation:
      *      (YYYY * 10,000) + (MM * 100) + DD
      *    INTEGER-OF-DAY              PIC S9(09)
      *    UNDATE
      *    WHEN-COMPILED
      *    YEAR-TO-YYYY                CCYY
      *    YEARWINDOW
      *
      *    for certain versions of Cobol:
      *    FIND-DURATION
      *    SUBTRACT-DURATION
      *    ADD-DURATION
      *      MOVE FUNCTION ADD-DURATION (WW-TIMESTMP-1 YEARS 2
      *                                  MONTHS 5 DAYS 23)
      *                                  TO WS-TIMESTMP-2.
      *      Like above this function allows to add HOURS, MINUTES,
      *         SECONDS, and MICROSECONDS as well to a Timestamp.
      *

      *----Compute 90 days forward
      *    01 WS-CYMD        PIC  9(08).
      *    01 INTEGER-FORM   PIC S9(09).
      *    MOVE FUNCTION CURRENT-DATE(1: 8) TO WS-CYMD
      *    COMPUTE INTEGER-FORM = FUNCTION INTEGER-OF-DATE(WS-CYMD)
      *    ADD 90 TO INTEGER-FORM
      *    COMPUTE WS-CYMD = FUNCTION DATE-OF-INTEGER(INTEGER-FORM)
      *    DISPLAY 'DUE DATE: ' WS-CYMD

      *----Determine if leap year
      *    IF FUNCTION DATE-OF-INTEGER (FUNCTION INTEGER-OF-DATE
      *    (yyyy060))(5:2) = 02 then yyyy is a leap year

      *----Other
      *    EVALUATE WS-FIELD
      *      WHEN 'A'
      *      WHEN 'B'
      *          MOVE STUFF IF 'A' OR 'B'
      *      WHEN 'C'
      *          MOVE STUFF IF 'C'
      *      WHEN OTHER
      *    END-EVALUATE.

      *----Strings
      *    DISPLAY FUNCTION LOWER-CASE WS-FIELD.
      *    DISPLAY FUNCTION UPPER-CASE WS-FIELD.
      *    MOVE FUNCTION LOWER-CASE(WS-FIELD1) TO WS-FIELD2.
      *    MOVE FUNCTION REVERSE(WS-L-TO-R) TO WS-R-TO-L.
      *
      *    note: "length of" moves defined field length,
      *           not field content length  !!
      *    MOVE ws-field1 to ws-field2(1: length of ws-field1).
      *
      *    INSPECT WS-FIELD                     CONVERTING
      *            'abcdefghijklmnopqrstuvwxyz' TO
      *            'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.
      *
      *    01 ARG1    PIC  X(10)  VALUE 'A'.
      *    01 ARG2    PIC  X(10)  VALUE 'C'.
      *    01 ARG3    PIC  X(10)  VALUE 'E'.
      *    MOVE FUNCTION MAX(ARG1 ARG2 ARG3) TO ...   :RESULT=E
      *    FUNCTION MAX(ALL) TO REFERENCE ALL OCCURRENCES OF A TABLE

      *    STRING WS-field1                   DELIMITED BY SIZE
      *           WS-field2                   DELIMITED BY '  '
      *           INTO WS-field

      *    WS-field = 'AA    BB'
      *    |  UNSTRING WS-field               DELIMITED BY SPACE
      *    |      INTO WS-UNSTR1 WS-UNSTR2
      *    |           AA        empty
      *    |
      *    |  UNSTRING WS-field               DELIMITED BY ALL SPACE
      *    |      INTO WS-UNSTR1 WS-UNSTR2
      *    |           AA        BB
      *
      *    UNSTRING WS-field           DELIMITED BY (all) delimiter
      *                                          OR (all) delimiter2
      *             INTO WS-UNSTR(1)   COUNT IN WS-STR-CNT(1)
      *             INTO WS-UNSTR(2)   COUNT IN WS-STR-CNT(2)
      *             INTO WS-UNSTR(3)   COUNT IN WS-STR-CNT(3)
      *             WITH POINTER WS-CHAR-COUNT
      *             TALLYING IN WS-FIELD-COUNT
      *    END-UNSTRING.

      *    MOVE ZERO                          TO WS-TALLY.
      *    INSPECT field TALLYING WS-TALLY FOR LEADING '0'.
      *    INSPECT field TALLYING WS-TALLY FOR ALL '/'.
      *
      *    INSPECT field TALLYING WS-TALLY FOR LEADING '0'
      *    |       REPLACING FIRST 'A' BY '2' AFTER INITIAL 'C'
      *    |
      *    ---->   field before   WS-TALLY after   field after
      *            00ACADEMY00    2                00AC2DEMY00
      *
      *    INSPECT field
      *    |       REPLACING CHARACTERS BY ZEROS BEFORE INITIAL QUOTE
      *    |
      *    ---->   field before   field after
      *            ANDES"12       00000"12
      *

           PERFORM 0500-GET-LINKAGE.

           IF WS-RETURN-CODE = ZERO
               PERFORM 0600-GET-PARM-CYMD.

           IF WS-RETURN-CODE = ZERO
               MOVE ZERO                      TO WS-SUB1
               MOVE SPACE                     TO WS-PARM01-TABLE
               PERFORM 0700-LOAD-PARM01 THRU
                       0700-LOAD-PARM01-EXIT.

      *    select one of these processing types

      *    loop through primary file
           IF WS-RETURN-CODE = ZERO
               PERFORM 1100-READ-AAAAAAAA THRU
                       1100-READ-AAAAAAAA-EXIT
                       UNTIL END-OF-AAAAAAAA.

      *    compare two files
           IF WS-RETURN-CODE = ZERO
               MOVE 'Y'                       TO WS-READ-AAAAAAAA-SW
               MOVE 'Y'                       TO WS-READ-BBBBBBBB-SW
               PERFORM 1100-PROCESS-FILES THRU
                       1100-PROCESS-FILES-EXIT.

      *    sort
           IF WS-RETURN-CODE = ZERO
               SORT SORT-AAAAAAAA
                   ON ASCENDING KEY  SR-FFFFFF
                                     SR-
                                     SR-
                   ON DESCENDING KEY SR-
                   WITH DUPLICATES IN ORDER
                   USING AAAAAAAA  (INPUT FILE IS AUTOMATICALLY
                                    OPENED, READ, AND CLOSED)
                   INPUT PROCEDURE IS 1000-SORT-IN
                   GIVING BBBBBBBB  (OUTPUT FILE IS AUTOMATICALLY
                                    OPENED, WRITTEN, AND CLOSED)
                   OUTPUT PROCEDURE IS 2000-SORT-OUT.

       0500-GET-LINKAGE.
           IF LS-LENGTH = ZERO
               DISPLAY '**** Parm length is zero '
               MOVE +0500                     TO WS-RETURN-CODE
           ELSE
           IF LS-LENGTH > LENGTH OF WS-LS-DATA
               DISPLAY '**** Parm length is excessive '
               MOVE +0500                     TO WS-RETURN-CODE
           ELSE
               MOVE LS-DATA(1: LS-LENGTH)     TO WS-LS-DATA.

           MOVE WS-LS-FACILITY                TO H1-HDR1.
           MOVE 'L'                           TO H1-HDR1(2: 1).
      *    MOVE 'CHPL'                        TO H1-HDR1.
           CALL WS-CALL-STV0270B USING H1-HDR1.

       0600-GET-PARM-CYMD.

      *    get current date
      *    LANGUAGE ENVIRONMENT
      *    CALL "CEESERV" USING PARM1 PARM2 ... PARMN FC
           MOVE SPACE                         TO WS-STV0400B-FIELDS.
           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.
           MOVE STV0400B-1X8                  TO WS-1-CYMD.

      *    begin and end dates
      *    MOVE WS-LS-BEG-CYMD                TO WS-2-CYMD.
      *    PERFORM 0600-CONVERT-PARM-DATE.
      *    IF WS-RETURN-CODE = ZERO
      *        MOVE STV0400B-1X8              TO WS-BEG-CYMD.
      *    MOVE WS-LS-END-CYMD                TO WS-2-CYMD.
      *    PERFORM 0600-CONVERT-PARM-DATE.
      *    IF WS-RETURN-CODE = ZERO
      *        MOVE STV0400B-1X8              TO WS-END-CYMD.

           MOVE WS-LS-CYMD                    TO WS-2-CYMD.
           PERFORM 0600-CONVERT-PARM-DATE.
      *    value report headers
      *    IF WS-RETURN-CODE = ZERO
      *        MOVE SPACE                     TO WS-STV0400B-FIELDS
      *        MOVE WS-2-CYMD                 TO STV0400B-1X8
      *        MOVE 'CYMD  '                  TO STV0400B-IN
      *        MOVE 'M/D/Y '                  TO STV0400B-OUT
      *        CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS
      *        MOVE STV0400B-DATA             TO H1-DATE
      *        IF WS-2-CYMD = WS-1-CYMD
      *            MOVE SPACE                 TO WS-STV0400B-FIELDS
      *            MOVE 'H:MM  '              TO STV0400B-OUT
      *            CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS
      *            MOVE STV0400B-DATA         TO H2-TIME
      *        ELSE
      *            MOVE SPACE                 TO H2-TIME.

      *---------------------------------------
      *    convert and validate parm date, place in WS-2-CYMD
      *---------------------------------------
       0600-CONVERT-PARM-DATE.
           MOVE SPACE                         TO WS-STV0400B-FIELDS.
           IF WS-2-CYMD = '00000000'
               MOVE SPACE                     TO WS-2-CYMD
           ELSE
           IF WS-2-CYMD(1: 3) = 'CMD' OR 'CMF'
               MOVE WS-2-CYMD                 TO STV0400B-OUT
               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS
               MOVE STV0400B-1X8              TO WS-2-CYMD
           ELSE
           IF WS-2-CYMD(3: 1) = '/'
               AND WS-2-CYMD(6: 1) = '/'
               IF WS-2-CYMD = '01/01/01'
                   MOVE WS-1-CYMD             TO WS-2-CYMD
               ELSE
                   MOVE WS-2-CYMD             TO STV0400B-1X8
                   MOVE 'M/D/Y '              TO STV0400B-IN
                   MOVE 'CYMD  '              TO STV0400B-OUT
                   CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS
                   MOVE STV0400B-1X8          TO WS-2-CYMD.

           IF WS-2-CYMD NOT NUMERIC
               MOVE WS-1-CYMD                 TO WS-2-CYMD.

           MOVE WS-2-CYMD                     TO STV0400B-1X8.
           MOVE 'CYMD  '                      TO STV0400B-IN.
           MOVE 'CYMD  '                      TO STV0400B-OUT.
           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.
           IF STV0400B-1X6 = 'ERROR'
               DISPLAY '**** XXXXXXXX parm date is not valid'
               DISPLAY '**** Date = ' WS-2-CYMD
               MOVE +0600                     TO WS-RETURN-CODE
           ELSE
               MOVE 'CYMD  '                  TO STV0400B-IN
               MOVE 'M/D/CY'                  TO STV0400B-OUT
               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS
               DISPLAY '**** Parm date           ' STV0400B-DATA.

      *    COPY 'DOCOFF'      offset date processing
      *    COPY 'DOCLOAD'     static parm load to WS

      ****************************************

      *    sort
       1000-SORT-IN.
           PERFORM 1100-READ-AAAAAAAA THRU
                   1100-READ-AAAAAAAA-EXIT
                   UNTIL END-OF-AAAAAAAA.
           IF WS-RETURN-CODE = ZERO
               MOVE 'Y'                       TO WS-READ-AAAAAAAA-SW
               MOVE 'Y'                       TO WS-READ-BBBBBBBB-SW
               PERFORM 1100-PROCESS-FILES THRU
                       1100-PROCESS-FILES-EXIT.

      *    compare two files
       1100-PROCESS-FILES.
           IF WS-READ-AAAAAAAA-SW = 'Y'
               PERFORM 1100-READ-AAAAAAAA.
      *    IF WS-READ-BBBBBBBB-SW = 'Y'
      *        PERFORM 1100-READ-BBBBBBBB.

           MOVE 'N'                           TO WS-READ-AAAAAAAA-SW.
      *    MOVE 'N'                           TO WS-READ-BBBBBBBB-SW.

           IF WS-RETURN-CODE > ZERO
               OR END-OF-AAAAAAAA
               GO TO 1100-PROCESS-FILES-EXIT.

      *    IF AAAAAAAA-PT-NBR > BBBBBBBB-KEY
      *        PERFORM 1200-KEY-LARGER
      *        MOVE 'Y'                       TO WS-READ-BBBBBBBB-SW
      *    ELSE
      *    IF AAAAAAAA-PT-NBR < BBBBBBBB-KEY
      *        PERFORM 1200-KEY-SMALLER
      *        MOVE 'Y'                       TO WS-READ-AAAAAAAA-SW
      *    ELSE
      *        PERFORM 1200-KEY-MATCH
      *        MOVE 'Y'                       TO WS-READ-AAAAAAAA-SW
      *        MOVE 'Y'                       TO WS-READ-BBBBBBBB-SW.

      *    MOVE 'Y'                           TO WS-READ-AAAAAAAA-SW.
           GO TO 1100-PROCESS-FILES.

       1100-PROCESS-FILES-EXIT. EXIT.

       1100-READ-AAAAAAAA.
           READ AAAAAAAA.
           IF WS-STAT = ZERO
               ADD 1                          TO WS-READ-AAAAAAAA-CNT
               MOVE AAAAAAAA-PT-NBR           TO WS-AAAAAAAA-PT-NBR
           ELSE
           IF WS-STAT = 10
               MOVE 'Y'                       TO WS-END-AAAAAAAA-SW
           ELSE
               DISPLAY '**** XXXXXXXX read error on AAAAAAAA '
               DISPLAY '**** Key                 ' FFFFFF
               DISPLAY '**** File stat           ' WS-STAT
               PERFORM 3000-DISPLAY-VSAM-ERROR
               MOVE +1100                     TO WS-RETURN-CODE.
      *    usually best to continue through the whole file
      *    if ws-return-code not = zero
      *        MOVE 'Y'                       TO WS-END-AAAAAAAA-SW.

       1100-READ-BBBBBBBB.
           READ BBBBBBBB.
           IF WS-STAT = ZERO
               ADD 1                          TO WS-READ-BBBBBBBB-CNT
               MOVE BBBBBBBB-KEY              TO WS-BBBBBBBB-PT-NBR
           ELSE
           IF WS-STAT = 10
               MOVE 'Y'                       TO WS-END-BBBBBBBB-SW
               MOVE 99999999999               TO WS-BBBBBBBB-PT-NBR
           ELSE
               DISPLAY '**** XXXXXXXX read error on BBBBBBBB '
               DISPLAY '**** Key                 ' FFFFFF
               DISPLAY '**** File stat           ' WS-STAT
               PERFORM 3000-DISPLAY-VSAM-ERROR
               MOVE +1100                     TO WS-RETURN-CODE.
      *    usually best to continue through the whole file
      *    if ws-return-code not = zero
      *        MOVE 'Y'                       TO WS-END-BBBBBBBB-SW.

       1200-KEY-LARGER.

       1200-KEY-SMALLER.

       1200-KEY-MATCH.

      *    loop through primary file
       1100-READ-AAAAAAAA.
           READ AAAAAAAA.
           IF WS-STAT = ZERO
               ADD 1                          TO WS-READ-AAAAAAAA-CNT
               PERFORM 1200-SELECT THRU
                       1200-SELECT-EXIT
           ELSE
           IF WS-STAT = 10
               MOVE 'Y'                       TO WS-END-AAAAAAAA-SW
           ELSE
               DISPLAY '**** XXXXXXXX read error on AAAAAAAA '
               DISPLAY '**** Key                 ' FFFFFF
               DISPLAY '**** File stat           ' WS-STAT
               PERFORM 3000-DISPLAY-VSAM-ERROR
               MOVE +1100                     TO WS-RETURN-CODE.
      *    usually best to continue through the whole file
      *    if ws-return-code not = zero
      *        MOVE 'Y'                       TO WS-END-AAAAAAAA-SW.

       1100-READ-AAAAAAAA-EXIT. EXIT.

      *---------------------------------------
      *    X
      *---------------------------------------
       1200-SELECT.
           IF A
               AND NOT B
               PERFORM 1300-SEND-TO-SORT.

           COPY 'DOCSORT2'    'manual' internal sort logic

       1200-SELECT-EXIT. EXIT.

       1300-SEND-TO-SORT.
           MOVE PM-A                          TO SR-A.
           MOVE PM-B                          TO SR-B.
           MOVE PM-C                          TO SR-C.
           MOVE PM-D                          TO SR-D.
           MOVE PM-E                          TO SR-E.
           MOVE PM-F                          TO SR-F.
           MOVE PM-G                          TO SR-G.
           RELEASE SORT-RECORD.

      ****************************************
      ****************************************
      ****************************************

       2000-SORT-OUT.
           PERFORM 2100-RETURN-RECORDS
               UNTIL END-OF-SORT.

           IF WS-RETURN-CODE = ZERO
               IF WS-SORT-RCD-CNT > ZERO
                   PERFORM 0000-PRINT-TOTAL-LINE
               ELSE
                   PERFORM 0000-PRINT-HEADINGS
                   MOVE '     No records match selection criteria'
                                              TO PRINT-AREA
                   PERFORM 0000-WRITE-LINE.

       2100-RETURN-RECORDS.
           PERFORM 2200-RETURN-SORT.

           IF SR-        NOT = WS-PREV-
               IF WS-LINE-SUM > 38
                   PERFORM 0000-PRINT-BREAK-LINE
                   PERFORM 0000-PRINT-HEADINGS
               ELSE
                   PERFORM 0000-PRINT-BREAK-LINE.
           IF MORE-SORT-RCDS
               ADD 1                          TO WS-SORT-RCD-CNT
               PERFORM 0000-CALCULATE
               PERFORM 0000-PRINT-DETAIL-LINE.

       2200-RETURN-SORT.
           RETURN SORT-AAAAAAAA
               AT END
                   MOVE HIGH-VALUE            TO MAIN BREAKER
                   MOVE 'Y'                   TO WS-END-SORT-SW.
           IF FIRST-RECORD
               MOVE SR-                       TO WS-PREV-
               MOVE 'N'                       TO WS-FIRST-RCD-SW.

       0000-WRITE-BBBBBBBB.
      *    AFTER A WRITE, THE DATA DOES NOT REMAIN IN THE RECORD
           WRITE BBBBBBBB-RECORD.
           IF WS-STAT = ZERO
               ADD 1                          TO WS-WRITE-BBBBBBBB-CNT
           ELSE
               DISPLAY '**** XXXXXXXX write error on BBBBBBBB'
               DISPLAY '**** File stat           ' WS-STAT
               DISPLAY '**** Key                 ' FFFFFF
               PERFORM 3000-DISPLAY-VSAM-ERROR
               MOVE 'Y'                       TO WS-END-AAAAAAAA-SW
               MOVE +0000                     TO WS-RETURN-CODE.

      *    COPY 'DOCPRINT'    report printing logic
      *    COPY 'DOCLEFT'     left justify a number
      *    COPY 'DOCRIGHT'    right justify a number
      *    COPY 'DOCCSV'      csv comma delimited file

       3000-DISPLAY-VSAM-ERROR.
           DISPLAY '**** VSAM return code    ' WS-VSAM-RETURN.
           DISPLAY '**** VSAM component      ' WS-VSAM-COMPONENT.
           DISPLAY '**** VSAM reason         ' WS-VSAM-REASON.

      ************************************ END XXXXXXXX
