
  JCLNEAT documentation

  JCLSPLT documentation is located at the bottom of this member

  Inspired by Carl Hafner who has "NEATJCL" on CBT tape #357

  ==============================================================
  General advice for using these tools                10/10/2019
  ==============================================================

  make a copy of items prior to altering... these procs are setup
  to alter members in-place rather than generating new copies.
  try manipulating various versions of JCL prior to altering any
  production members.

  once your standard parm settings are setup, it might make
  sense to run procs and jobs through these programs as a matter
  of move-to-production preparation.  this will standardize
  all your JCL (JCLSPLT and JCLNEAT) and Cobol (COBNEAT) source.
  with the CBT tape, these processes are free, and have been
  created for you only two or three decades too late!

  these run great on an iPhone, as long as you also have Z/Os
  running on your iPhone.

  run JCLSRUN (program JCLSPLT) as many times as necessary to split
  long JCL records prior to formatting with JCLNRUN.
  then run JCLNRUN (program JCLNEAT) to format JCL, rename steps,
  add file disposition documentation, etc. this may rearrange things
  enough to warrant running JCLSRUN again.

  note that JCLSRUN is setup to alter one member at a time.
  If renumbering steps for both PROCS and JOBS then you will want
  to use JCLSRUN against both members individually prior to
  concatenating them in the JCL01 DD in JCLNRUN.

  JCLNRUN DD example:

  //JCL01    DD  DISP=SHR,DSN=userid.ISPF.FILE488(proc member)
  //         DD  DISP=SHR,DSN=userid.ISPF.FILE488(job member)


  ==============================================================
  JCLNEAT documentation                                1/30/2019
  ==============================================================

  ==============
  "C" parm items can be entered in upper or lower case
  ==============

  c no lineup

     "no lineup" will skip most JCL alterations.  renumbering
     still occurs.  this is a master override which allows you
     to specify this option rather than commenting any of the
     related JCL alteration parm options below.


  c no comment

     "no comment" will skip most comment alterations.  renumbering
     still occurs.  this is a master override which allows you
     to specify this option rather than commenting any of the
     related comment alteration parm options below.


  c no renum

     "no renum" will skip renumbering proc or job steps.
     this is a master override which allows you to specify
     this option rather than commenting the related proc or
     job renumbering parm options below.


  c case                         L

     converting comments to lower case is advisable - it separates
     them visually from processing code and makes them easier to read.
     in essence, the comments are not SHOUTING AT YOU.  however,
     converting all characters to lower case might make them less
     english like.  these options exist to try to ease the conversion
     to lower case:  "after dot"  and  "cap first".
     they are explained below.

//*
//*  IF YOU SPECIFY "CASE L" FOR LOWER-CASE CONVERSION OF COMMENTS
//*  THE PROGRAM WILL STILL LEAVE THE TOP BATCH OF COMMENTS IN
//*  UPPER-CASE.
//*
//*-------------------------------------------------
//*  |
//*  a break line will signal the program to start converting
//*  to lower-case.
//*
//*-------------------------------------------------


  C case                         U

//*
//*  IF YOU SPECIFY "CASE U" THEN COMMENTS ARE CONVERTED TO UPPER-CASE
//*
//*-------------------------------------------------


  C after dot

//*  specify "after dot" to convert characters following
//*  a period '. ' or a colon ': ' to upper-case.
//*  this works well with comments entered in a flowing
//*  paragraph style but not so well in list form.
//*
//*  list one - item one. Item two: Item three
//*             item four item five.
//*             Item six  item seven.  Item eight
//*
//*  here is another paragraph style comment.
//*  Items following the period or colon are converted to
//*  uppercase.  This might make paragraph style comments
//*  more readable.  Note which items are capitalized here.
//*
//*-------------------------------------------------


  C cap first                    F

//*  specify "cap first f" to convert the first character in
//*  the first line of a group of lines to upper-case.
//*  this works well with comments entered in a list form
//*  but not so well in a prefixed list form.
//*
//*  characters up to position 25 are converted.
//*
//* +----1----+----2----+----3--
//*     First, run job JOB001 to fix the issue
//*     second, run job JOB002 to fix issues from JOB001
//*     third, run job JOB003 to fix issues from JOB002
//*
//*     Process: run job JOB001 to fix the issue
//*
//*              Run job JOB003 to fix issues from JOB001 and JOB002
//*
//*     Process:          run job JOB001
//*                       run job JOB002
//*                       run job JOB003
//*
//*  Here is another paragraph style comment. the first
//*  character in this paragraph is capitalized but the
//*  remaining lines are not converted to upper case.
//*  note which items are capitalized here.
//*
//*-------------------------------------------------


  C cap first                    A

//*  specify "cap first a" to convert the first character in
//*  all lines of a group of lines to upper-case.
//*  this works well with comments entered in a list form
//*  but not so well in a paragraph form.
//*
//*  characters up to position 25 are converted.
//*
//* +----1----+----2----+----3--
//*     First, run job JOB001 to fix the issue
//*     Second, run job JOB002 to fix issues from JOB001
//*     Third, run job JOB003 to fix issues from JOB002
//*
//*     Process: run job JOB001 to fix the issue
//*              Run job JOB002 to fix issues from JOB001
//*              Run job JOB003 to fix issues from JOB002
//*
//*     Process:          run job JOB001
//*                       run job JOB002
//*                       run job JOB003
//*
//*  Here is another paragraph style comment.
//*  The first character in each line is converted to
//*  Upper case.  internal lines are not affected.
//*  Note which items are capitalized here.
//*
//*-------------------------------------------------


  C line type                    R


//*  specify "line type R" to convert dash lines or shorter
//*  asterisk lines to full length asterisk lines.
//*
//*  lines with at least 10 dashes or asterisks, and with no
//*  intervening alpha or numeric characters, are converted
//*  to asterisks up to column 71
//*
//*  these lines
//*
//**********
//* * * * * * * * * * * * * * *
//*------------
//*
//*  become
//*
//*********************************************************************
//*
//*-------------------------------------------------


  C line type                    D


//*  specify "line type D" to convert asterisk lines or shorter
//*  dash lines to dash lines.
//*
//*  lines with at least 10 dashes or asterisks, and with no
//*  intervening alpha or numeric characters, are converted
//*  to dashes up to column 52
//*
//*  these lines
//*
//**********
//* * * * * * * * * * * * * * *
//*------------
//*
//*  become
//*
//*-------------------------------------------------
//*
//*-------------------------------------------------


  C file name uc


//*  specify "file name uc" to convert file names within comments
//*  to upper case
//*
//*  -before-
//*         whimpets are saved in ext01.whimpet.storage.file
//*  -after-
//*         whimpets are saved in EXT01.WHIMPET.STORAGE.FILE
//*


  C move comment                 0006


//*  specify "move comment" to move comments to a specified
//*  location.  the default location is column 6.
//*  allowable locations are 0005 through 0020.
//*  when all the comments in a job/proc are aligned they make
//*  things look clean and organized.
//*
//*  characters up to position 25 signal the move process to select
//*  that line for adjustment.  all items on the line are then moved
//*  together.
//*
//*  this move logic does not attempt to keep disconnected words
//*  'positionally stable.'
//*
//*  -before-
//*         example message     with a five character gap
//*  -after-
//*  example message     with a five character gap
//*
//*  -not-
//*  example message            with trailing chars at original pos
//*
//*
//*  comment lists are often miss-aligned after comments are moved.
//*  get around this by placing list items after column 25.
//*
//*
//*    --1----+----2----+----3--
//*  list items on/before column 25:
//*
//*  -before-
//*     process: run job JOB001 to fix the issue
//*              run job JOB002 to fix issues from JOB001
//*              run job JOB003 to fix issues from JOB002
//*
//*  -after-
//*   process: run job JOB001 to fix the issue
//*   run job JOB002 to fix issues from JOB001
//*   run job JOB003 to fix issues from JOB002
//*
//*
//*    --1----+----2----+----3--
//*  list items on/before column 25:
//*
//*  -before-
//*     process order   run job JOB001
//*                     run job JOB002
//*                     run job JOB003
//*  -after-
//*  process order   run job JOB001
//*  run job JOB002
//*  run job JOB003
//*
//*
//*    --1----+----2----+----3--
//*  list items after column 25:
//*
//*  -before-
//*    process order     run job JOB001
//*                      run job JOB002
//*                      run job JOB003
//*  -after-
//*  process order       run job JOB001
//*                      run job JOB002
//*                      run job JOB003
//*
//*
//*-------------------------------------------------


  C zap star

//*  specify "zap star" to remove trailing asterisks from
//*  comment lines.  alphabetic or numeric characters
//*  stop the right-to-left conversion.  '+', '=', and '-'
//*  do not stop the conversion.
//*  full asterisk lines are not altered.
//*
//*  -before-
//********** WS-ORIGINAL-LOCATION is set on here **********************
//*
//*  -after-
//********** WS-ORIGINAL-LOCATION is set on here
//*
//*  -before-
//*******************************************************
//*  comment boxes can be intrusive                     *
//*******************************************************
//*
//*  -after-
//*
//*  comment boxes can be intrusive
//*
//*
//*  note: "line type R" will replace this asterisk line with a full
//*        asterisk line prior to "zap star" logic eliminating them,
//*        so those in combination result in:
//*  -after-
//*********************************************************************
//*  comment boxes can be intrusive
//*********************************************************************
//*
//*  -before-
//**********************************************************************
//**                                                                  **
//***  trailing asterisks can prevent coders from easily entering     **
//**** additional text.  in some situations the editor will prevent   **
//***  'insert' from pushing non-blank characters past column 72.     **
//**                                                                  **
//**********************************************************************
//*  -after-
//**********************************************************************
//*
//***  trailing asterisks can prevent coders from easily entering
//**** additional text.  in some situations the editor will prevent
//***  'insert' from pushing non-blank characters past column 72.
//*
//**********************************************************************
//*
     -before-

//*****
//******
//*******
//********  .
//*******   +
//******    -
//*****     =
//****      a
//***       .
//**

     -after-

//*
//*
//*
//********  .
//*         +
//*         -
//*         =
//****      A
//***       .
//*

//*-------------------------------------------------


  C zap last c

//*  specify "zap last c" to blank out columns 73-80
//*  within comment lines.
//*  specify "zap last j" to blank out columns 73-80
//*  within jcl.
//*
//*-------------------------------------------------


  C zap last j

//*  specify "zap last j" to blank out columns 73-80
//*  within jcl.
//*  specify "zap last c" to blank out columns 73-80
//*  within comment lines.
//*
//*-------------------------------------------------


  C swap disp

//*  specify "swap disp" to swap DSN= and DISP=SHR
//*  so DISP=SHR occurs in front.  the conversion will not occur
//*  if there are any additional items in the JCL.
//*
//*  -before-
//DD01   DD  DSN=USERID.TEST.FILE,DISP=SHR         *dsn in front
//*  -after-
//DD01   DD  DISP=SHR,DSN=USERID.TEST.FILE         *disp in front
//*
//*  -before-
//DD01   DD  DSN=USERID.TEST.FILE,DISP=SHR,RECFM=FB
//*  -after-
//DD01   DD  DSN=USERID.TEST.FILE,DISP=SHR,RECFM=FB  *no change
//*
//*-------------------------------------------------


  C flag disp                    0069
  C flag pfx

//*  specify "flag disp" to analyze file dispositions and
//*  then place a shortened comment on the line containing
//*  the file name.
//*
//*  the default location is 69.  this can be overridden from
//*  60 to 78.  the location must be blank before the comment is
//*  placed on the line.
//*
//*  note that by specifying "flag disp" the program will loop
//*  through the JCL a second time so the job will run longer.
//*
//*  dispositions:   'new'
//*                  'old'
//*                  'mod'
//*                  'shr'
//*                  'del'
//*
//*  -before-
//         DD  DSN=SYS1.SYSTEM.FILE,DISP=SHR
//*  -after-
//         DD  DSN=SYS1.SYSTEM.FILE,DISP=SHR                        shr
//*
//*  specify "flag pfx" to precede the comment with an asterisk.
//*
//*  -before-
//         DD  DSN=SYS1.SYSTEM.FILE,DISP=SHR
//*  -after-
//         DD  DSN=SYS1.SYSTEM.FILE,DISP=SHR                       *shr
//*
//*-------------------------------------------------


  C renum proc                              S
  C renum pincr                  0010
  C renum pdigit                 0003

//*  specify "renum proc" to renumber proc steps.
//*
//*  "renum proc" turns the renumber process on.
//*  to prevent renumbering, either do not specify this
//*  option or specify option "no renum"
//*
//*  "renum proc" will renumber steps within a proc and will also
//*  alter job step overrides.
//*
//*  specify the step name prefix in field option3 - between
//*    one and four characters long.
//*  "renum pdigit" specifies the number length
//*  "renum pincr" specifies the number increment
//*
//*  note that by specifying "renum" the program will loop
//*  through the JCL a second time so the job will run longer.
//*
//*  given the proc renum attributes above, steps would be
//*  renumbered like this:
//*
//*  -before-
//EXEDI862 PROC
//EX045    EXEC PGM=IEFBR14
//EX099    EXEC PGM=IEFBR14
//EX135    EXEC PGM=IEFBR14
//EX12A    EXEC PGM=IEFBR14
//EX12B    EXEC PGM=IEFBR14
//ABEND1   EXEC PGM=IEFBR14
//EX046    EXEC PGM=IEFBR14
//
//*  -after-
//EXEDI862 PROC
//S010     EXEC PGM=IEFBR14
//S020     EXEC PGM=IEFBR14
//S030     EXEC PGM=IEFBR14
//S040     EXEC PGM=IEFBR14
//S050     EXEC PGM=IEFBR14
//S060     EXEC PGM=IEFBR14
//S070     EXEC PGM=IEFBR14
// ---
//   |
//   pdgit was specified as "0003" so the number portion of the
//   step name is three digits long
//
//*
//*
//*  note: there is logic to try to prevent running over -
//*        for example this combination does not work since 100
//*        is more than two digits:
//*        renum pincr                  0100
//*        renum pdigit                 0002
//*
//*        the number of existing steps in the proc are included
//*        in the above calculation.
//*
//*
//*  job-step override logic:
//*  to alter both a proc and a job with overrides to that proc,
//*  concatenate the job under the proc in the JCL01 DD statement
//*  in JCLNRUN like this:
//*
//JCL01   DD  DSN=ISPF.LIBRARY.WITH.PROC(PROCNAME),DISP=SHR
//        DD  DSN=ISPF.LIBRARY.WITH.JOB(JOBNAME),DISP=SHR
//*
//*
//*  -before-
//E00080   EXEC EXEDI862
//EX045.SYSIN DD DUMMY
//*
//E00090   EXEC EXEDI100
//EX045.SYSIN DD DUMMY
//*
//*  -after-
//E00080   EXEC EXEDI862
//S010.SYSIN DD DUMMY
//*
//E00090   EXEC EXEDI100
//EX045.SYSIN DD DUMMY
//*

     one aspect of this renumber process that is probably
     different than any vendor offering: this process attempts
     to rename steps mentioned within comments.  The step name
     must be wrapped in spaces:  ' step '
     this may present issues if the name of the step is
     english-like - you could end up with comments such as:

//*  -before-
//************************************
//*  SEND THE FILE TO HONDA
//************************************
//FILE     EXEC PGM=IEBGENER

//*  -after-
//************************************
//*  SEND THE S010 TO HONDA
//************************************
//S010     EXEC PGM=IEBGENER

     so after the renumbering is complete you should review
     the JCL and fix any unintended alterations.

//*-------------------------------------------------

  C renum prog                   TAPEEXT    TX
  C renum prog                   IEFBR14    BR
  C renum prog                   IEBGENER   IEBG

  specify up to ten "renum prog" entries.  these will tell JCLNEAT
  to use a different step name prefix for these programs.


//*-------------------------------------------------

  C renum job                               J
  C renum jincr                  0100
  C renum jdigit                 0004

//*  specify "renum job" to renumber job steps.
//*
//*  "renum job" turns the renumber process on.
//*  to prevent renumbering, either do not specify this
//*  option or specify option "no renum"
//*
//*  specify the job step prefix in field option3 - between
//*    one and four characters long.
//*  "renum jdigit" specifies the number length
//*  "renum jincr" specifies the number increment
//*
//*  note that by specifying "renum" the program will loop
//*  through the JCL a second time so the job will run longer.
//*
//*  examples of job step renumbering using the options above:
//*
//*  -before-
//E00080   EXEC EXEDI862
//EX045.SYSIN DD DUMMY
//*
//E00090   EXEC EXEDI100
//
//*  -after-
//J0100    EXEC EXEDI862
//EX045.SYSIN DD DUMMY
//*
//J0200    EXEC EXEDI100
// ----
//    |
//    jdgit was specified as "0004" so the number portion of the
//    step name is four digits long
//*
//*
//*  note: there is logic to try to prevent running over -
//*        see the "renum proc" comments above.
//*        also, there is logic which attempts to change job step
//*        names within comments - see the note under "renum proc"
//*        above.
//*
//*-------------------------------------------------

  C reset steps

    if renumbering multiple jobs and/or procs, specifying
    "reset steps" will cause new numbers to restart for
    each proc or job, rather than continuously incrementing.

    -without "reset steps"-
    //EXEDI100 PROC
    //S010     EXEC PGM=IEBGENER
    //S020     EXEC PGM=IEBGENER
    //S030     EXEC PGM=IEBGENER
    //EXEDI200 PROC
    //S040     EXEC PGM=IEBGENER
    //S050     EXEC PGM=IEBGENER
    //S060     EXEC PGM=IEBGENER

    -with "reset steps"-
    //EXEDI100 PROC
    //S010     EXEC PGM=IEBGENER
    //S020     EXEC PGM=IEBGENER
    //S030     EXEC PGM=IEBGENER
    //EXEDI200 PROC
    //S010     EXEC PGM=IEBGENER
    //S020     EXEC PGM=IEBGENER
    //S030     EXEC PGM=IEBGENER



  ==============
  "I" parm items can be entered in upper or lower case
  ==============

     "I" parms are used to specify where you would like JCL words
     placed.  you can limit which columns are searched - if the item
     resides outside those columns it is not moved.

     the field definitions below are fairly straight-forward except
     for the following:

                                    IF=alter IF with "IF01"
                                    |
     I| IF          004 011 003 020 IF     X

     this logic allows a numeric "prefix" to be placed in front of
     IF statements to help keep track of which ENDIF's belong with
     which IF's in JCL.

     -before-
//   IF (8,NE,S040) THEN
//S050     EXEC PGM=IDCAMS
//   IF (8,NE,S050) THEN
//S060     EXEC PGM=IDCAMS
//  ENDIF
//   IF (8,NE,S060) THEN
//S070     EXEC PGM=IDCAMS
//  ENDIF
//   IF (8,NE,S070) THEN
//  ENDIF
//  ENDIF

     -after-
//IF01  IF (8,NE,S040) THEN
//S050     EXEC PGM=IDCAMS
//IF02  IF (8,NE,S050) THEN
//S060     EXEC PGM=IDCAMS
//  ENDIF
//IF03  IF (8,NE,S060) THEN
//S070     EXEC PGM=IDCAMS
//  ENDIF
//IF04  IF (8,NE,S070) THEN
//  ENDIF
//  ENDIF

                                    ENDIF=alter ENDIF with "END01"
                                    |
     I| ENDIF       006 011 003 016 ENDIF  X

     this logic allows a numeric "prefix" to be placed in front of
     ENDIF statements to help keep track of which ENDIF's belong with
     which IF's in JCL.

     -before-
//   IF (8,NE,S040) THEN
//S050     EXEC PGM=IDCAMS
//   IF (8,NE,S050) THEN
//S060     EXEC PGM=IDCAMS
//  ENDIF
//   IF (8,NE,S060) THEN
//S070     EXEC PGM=IDCAMS
//  ENDIF
//   IF (8,NE,S070) THEN
//  ENDIF
//  ENDIF

     -after-
//   IF (8,NE,S040) THEN
//S050     EXEC PGM=IDCAMS
//   IF (8,NE,S050) THEN
//S060     EXEC PGM=IDCAMS
//END02  ENDIF
//   IF (8,NE,S060) THEN
//S070     EXEC PGM=IDCAMS
//END03  ENDIF
//   IF (8,NE,S070) THEN
//END04  ENDIF
//END01  ENDIF

     using them together and with option "position to place JCL item"
     set to "11" (to include the leading space) results in:

     -after-
----+----1----+----2
//IF01     IF (8,NE,S040) THEN
//S050     EXEC PGM=IDCAMS
//IF02     IF (8,NE,S050) THEN
//S060     EXEC PGM=IDCAMS
//END02    ENDIF
//IF03     IF (8,NE,S060) THEN
//S070     EXEC PGM=IDCAMS
//END03    ENDIF
//IF04     IF (8,NE,S070) THEN
//END04    ENDIF
//END01    ENDIF


                                           X=exclude altering comments
                                           |  if found in pos 4 - 20
     I| EXEC        005 011 004 016        X

     many JCL comments contain words that are similar to reserved
     JCL words such as "IF."  the program contains logic to avoid
     converting commented JCL lines (ie: lines containing JCL
     directives) to lower-case.
     the "X" signals the program to NOT count the specified word
     as a JCL reserved word when tallying JCL words.
     this avoids leaving regular comments as uppercase.


*
*
*   JCL arrangement options
*
*   enter up to 200 items
*
*  bar helps show if spaces precede JCL word
*  |
*  |             search length of JCL item 001-020
*  |             |
*  |             |   position to place JCL item
*  |             |   |
*  |find in JCL  |   |   start search column
*  ||            |   |   |   end search column
*  ||            |   |   |   |
*  ||            |   |   |   |   IF=alter IF with "IF01"
*  ||            |   |   |   |   ENDIF=alter ENDIF with "END01'
*  ||            |   |   |   |   |
*  ||            |   |   |   |   |      X=exclude altering comments if
*  ||            |   |   |   |   |      |  found in pos 4 - 20
* - ----+----+-- --- --- --- --- ------ -
  I| JOB         005 011 004 016        X
  I| DD          004 011 004 020
  I| IF          004 011 003 020 IF     X
  I| ENDIF       006 011 003 016 ENDIF
  I| AMP=        005 015 004 022
  I| DCB=        005 015 004 022
  etc


  ==============
  "W" parm items can be entered in upper or lower case
  ==============

     "W" parms are used to specify words to convert back to
     upper-case within comments converted to lower-case.
     although this is merely cosmetic, it seems to make JCL
     more readable.

     the descriptions below are fairly straight-forward.
*
*
*   If "case     L" specified,
*     convert these words within JCL comments to uppercase
*
*   enter up to 200 items
*
*  bar helps show if spaces precede JCL word
*  |
*  |   search length F=first character uppercase
*  |               | N=whole word if contains any numeric
*  |JCL word       | W=whole word (and connected words) uppercase
*  ||              | |
* - ----+----+-- --- -
  W| dd          003 W
  W| ex          003 N
  W|gxs          003 W
  W|xlt          003 W
  W| ftp         004 W
  W| gdg         004 W
  W| vsam        006 W
  W| chrys       006 F
  W| ford        006 F
  W| honda       006 F
  W| note:       006 F

  examples from above settings:

     -before-
//*  if program exedi050 issues exception code 12 for honda then
//*  add record to vsam file and increment gdg
//*  note: ford and chrysler are exempt for these dd's

     -after-
//*  if program EXEDI050 issues exception code 12 for Honda then
//*  add record to VSAM file and increment GDG
//*  Note: Ford and Chrysler are exempt for these DD's



  ==============
  "S" parm items can be entered in upper or lower case
  ==============

  S start 000000000
  S end   000000000

     "S" parms are used to limit which input file records are
     actually altered.  for example, to be certain only records
     within one proc are altered within a multi-proc input file
     you could specify the starting and ending lines using "S"
     records.


  ==============================================================
  JCLSPLT documentation                               10/09/2019
  ==============================================================

  ==============
  "C" parm items can be entered in upper or lower case
  ==============

  C split start  040

      value 016 through 065.  default value is 40.
      indicates where in the record to look for commas when
      splitting records into separate lines.  splitting does not
      occur prior to this location.  to split all JCL statements
      into separate lines then set the "split start" value to 016.

      note the internal array in this program holds 5 lines, so
      if more splitting needs to occur then run the JCL through
      the program a second time.

      also note that if you run JCLNEAT after JCLSPLT then it may
      move statements to the "split start" location that were
      previously located before that position.  running JCLSPLT
      again may split things that did not split previously.

      example:

      if "split start" is set to 042 then this split occurs:
          ----+----2----+----3----+----4----+----5----+----6----+
      before   DISP=(MOD,DELETE,DELETE),UNIT=LOFDA,SPACE=(TRK,1),

      after    DISP=(MOD,DELETE,DELETE),UNIT=LOFDA,
               SPACE=(TRK,1),

      if "split start" is set to 040 then this split occurs:
          ----+----2----+----3----+----4----+----5----+----6----+
      before   DISP=(MOD,DELETE,DELETE),UNIT=LOFDA,SPACE=(TRK,1),

      after    DISP=(MOD,DELETE,DELETE),
               UNIT=LOFDA,SPACE=(TRK,1),

  C keep disp    050

      value 016 through 063.  default value is 50.
      do not split record when "DISP=SHR" is located at the
      end of the record prior to or at this value.  The idea here
      is to avoid generating extra JCL records when "DISP=SHR"
      is the last item on the JCL line and it is not too far
      to the right on the line.  "DISP=OLD" is also included in
      this logic.

      example:

      if "split start" is set to 040 and "keep disp" is set to 050
          then no change:
          ----+----2----+----3----+----4----+----5----+----6----+
      before   DSN=MISQZY.OUTPUT.STANDARD.FILE,DISP=SHR
      after    DSN=MISQZY.OUTPUT.STANDARD.FILE,DISP=SHR

      if "split start" is set to 036 and "keep disp" is set to 046
          then record is split:
          ----+----2----+----3----+----4----+----5----+----6----+
      before   DSN=MISQZY.OUTPUT.STANDARD.FILE,DISP=SHR

      after    DSN=MISQZY.OUTPUT.STANDARD.FILE,
               DISP=SHR


  C loc 73       x

      C = copy contents of position 73-80 to new line.
      S = move 'jclsplt' to position 73 in new line
          and include a counter ie: "jclsplt3".
      blank = position 73-80 of new line is blank.
          this is the default value.

      example:

      "x" is set to "C"

          ----+----3----+----4----+----5----+----6----+----7----+----8
      before ...OUTPUT,UNIT=SYSDA,DISP=(OLD,DELETE,DELETE)    zzj00034

      after  ...OUTPUT,                                       zzj00034
             UNIT=SYSDA,                                      zzj00034
             DISP=(OLD,DELETE,DELETE)                         zzj00034


      "x" is set to "S"

          ----+----3----+----4----+----5----+----6----+----7----+----8
      before ...OUTPUT,UNIT=SYSDA,DISP=(OLD,DELETE,DELETE)    zzj00034

      after  ...OUTPUT,                                       zzj00034
             UNIT=SYSDA,                                      jclsplt1
             DISP=(OLD,DELETE,DELETE)                         jclsplt2

