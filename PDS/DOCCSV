
      *---------------------------------------
      *    DOCCSV is used to build CSV delimited files - usually
      *    for opening in Excel.
      *    alter WS-CV1-RCD and WS-CV1-RCD-WARN prior to use.
      *
      *    Usage:  basically just move your field to WS-CV1-FIELD
      *    and then PERFORM 6000-ADD-CV1 and it will append it to
      *    a CSV record.
      *
      *    WS-CV1-QUOTE-SW:  set to 'Y' to wrap field in quotes
      *    WS-CV1-SET-LEN:   force a fixed field length
      *    WS-CV1-SKIP-DLM:  skip appending delimiter for this field
      *---------------------------------------
      *    include CV2 fields if creating more than one .CSV file
      *---------------------------------------

      *    WS-TALLY and WS-RETURN-CODE are also defined in DOCWSB
      *    append to regular working storage fields
      *    05  WS-TALLY                PIC S9(05)    VALUE ZERO.
      *    05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.

      *    append to regular subscript fields
           05  WS-CV1A                 PIC S9(05)    VALUE ZERO.
           05  WS-CV1B                 PIC S9(05)    VALUE ZERO.
           05  WS-CV2A                 PIC S9(05)    VALUE ZERO.
           05  WS-CV2B                 PIC S9(05)    VALUE ZERO.

       01  WS-CSV-FIELDS.
           05  WS-CV1-LEN              PIC S9(05)    VALUE ZERO.
           05  WS-CV1-SET-LEN          PIC S9(05)    VALUE ZERO.
           05  WS-CV1-TMP-LEN          PIC S9(05)    VALUE ZERO.
           05  WS-CV1-START            PIC S9(05)    VALUE ZERO.
           05  WS-CV1-QUOTE-SW         PIC  X        VALUE SPACE.
           05  WS-CV1-SKIP-SW          PIC  X        VALUE SPACE.
           05  WS-CV1-SKIP-DLM         PIC  X        VALUE SPACE.
      *    hex X'6B' is a comma ','
           05  WS-CV1-DELIM            PIC  X        VALUE X'6B'.
      *    alter these field lengths and values as needed
           05  WS-CV1-FIELD            PIC  X(60)    VALUE SPACE.
           05  WS-CV1-RCD              PIC  X(300)   VALUE SPACE.
      *    05  WS-CV1-RCD-WARN         PIC  9(05)    VALUE 0297.
           05  WS-CV1-RCD-WARN         PIC  9(05)    VALUE ####.

           05  WS-CV2-LEN              PIC S9(05)    VALUE ZERO.
           05  WS-CV2-SET-LEN          PIC S9(05)    VALUE ZERO.
           05  WS-CV2-TMP-LEN          PIC S9(05)    VALUE ZERO.
           05  WS-CV2-START            PIC S9(05)    VALUE ZERO.
           05  WS-CV2-QUOTE-SW         PIC  X        VALUE SPACE.
           05  WS-CV2-SKIP-SW          PIC  X        VALUE SPACE.
           05  WS-CV2-SKIP-DLM         PIC  X        VALUE SPACE.
      *    hex X'6B' is a comma ','
           05  WS-CV2-DELIM            PIC  X        VALUE X'6B'.
      *    alter these field lengths and values as needed
           05  WS-CV2-FIELD            PIC  X(60)    VALUE SPACE.
           05  WS-CV2-RCD              PIC  X(600)   VALUE SPACE.
      *    05  WS-CV2-RCD-WARN         PIC  9(05)    VALUE 0597.
           05  WS-CV2-RCD-WARN         PIC  9(05)    VALUE ####.


      *==============================================================
      *    CV1 setup
      *==============================================================

       0000-PREPARE-CSV-01.

           read new input record...

      *    for each new CV1 record,
      *    initialize CV1 fields prior to calling 6000-ADD-CV1
           MOVE 1                             TO WS-CV1B.
           MOVE SPACE                         TO VVVVVVVV-RCD.
           MOVE SPACE                         TO WS-CV1-RCD.
           MOVE SPACE                         TO WS-CV1-SKIP-SW.

           PERFORM 0000-BUILD-CSV-01.

      *    after all the input fields are stacked into WS-CV1-RCD,
      *    move WS-CV1-RCD to the output record and write out.
      *
           MOVE WS-CV1-RCD                    TO VVVVVVVV-RCD.
           MOVE WS-CV1B                       TO WS-VVVVVVVV-RCD-LEN.
           SUBTRACT 1 FROM WS-VVVVVVVV-RCD-LEN.
           PERFORM 1500-WRITE-VVVVVVVV.

       0000-BUILD-CSV-01.

      *    main logic to append fields into WS-CV1-RCD -
      *    assume this is within a loop or paragraph where desired
      *    input fields are stacked into the WS-CV1-RCD field
      *    by calling 6000-ADD-CV1 once for each input field

      *    to force the use of quotes
      *    MOVE 'Y'                           TO WS-CV1-QUOTE-SW.
      *    to force field to a set length
      *    MOVE 20                            TO WS-CV1-SET-LEN.

           MOVE INPUT FIELD 1                 TO WS-CV1-FIELD.
           PERFORM 6000-ADD-CV1.
           .
           .
           MOVE INPUT FIELD #                 TO WS-CV1-FIELD.
           PERFORM 6000-ADD-CV1.

      *==============================================================
      *    CV2 setup
      *==============================================================

       0000-PREPARE-CSV-02.

           read new input record...

      *    for each new CV2 record,
      *    initialize CV2 fields prior to calling 6000-ADD-CV2
           MOVE 1                             TO WS-CV2B.
           MOVE SPACE                         TO CCCCCCCC-RCD.
           MOVE SPACE                         TO WS-CV2-RCD.
           MOVE SPACE                         TO WS-CV2-SKIP-SW.

           PERFORM 0000-BUILD-CSV-02.

      *    after all the input fields are stacked into WS-CV2-RCD,
      *    move WS-CV2-RCD to the output record and write out.
      *
           MOVE WS-CV2-RCD                    TO CCCCCCCC-RCD.
           MOVE WS-CV2B                       TO WS-CCCCCCCC-RCD-LEN.
           SUBTRACT 1 FROM WS-CCCCCCCC-RCD-LEN.
           PERFORM 1500-WRITE-CCCCCCCC.

       0000-BUILD-CSV-02.

      *    main logic to append fields into WS-CV2-RCD -
      *    assume this is within a loop or paragraph where desired
      *    input fields are stacked into the WS-CV2-RCD field
      *    by calling 6000-ADD-CV2 once for each input field

      *    to force the use of quotes
      *    MOVE 'Y'                           TO WS-CV2-QUOTE-SW.
      *    to force field to a set length
      *    MOVE 20                            TO WS-CV2-SET-LEN.

           MOVE INPUT FIELD 1                 TO WS-CV2-FIELD.
           PERFORM 6000-ADD-CV2.
           .
           .
           MOVE INPUT FIELD #                 TO WS-CV2-FIELD.
           PERFORM 6000-ADD-CV2.


      *==============================================================
      *    CV1 build output rcd
      *==============================================================

      *---------------------------------------
      *    logic to stack a bunch of fields into CSV delimited format
      *---------------------------------------
       6000-ADD-CV1.
           IF WS-RETURN-CODE > ZERO
               OR WS-CV1-SKIP-SW = 'Y'
               CONTINUE
           ELSE
           IF WS-CV1-FIELD = SPACE
             IF WS-CV1-SET-LEN > ZERO
                 ADD WS-CV1-SET-LEN        TO WS-CV1B
                 IF WS-CV1-SKIP-DLM = SPACE
                     MOVE WS-CV1-DELIM     TO WS-CV1-RCD(WS-CV1B: 1)
                     ADD 1                 TO WS-CV1B
                 ELSE
                     CONTINUE
             ELSE
             IF WS-CV1-SKIP-DLM = SPACE
                 MOVE WS-CV1-DELIM         TO WS-CV1-RCD(WS-CV1B: 1)
                 ADD 1                     TO WS-CV1B
             ELSE
                 CONTINUE
           ELSE
           IF WS-CV1-QUOTE-SW = 'Y'
               PERFORM 6000-APPEND-W-QUOTE-CV1
               MOVE SPACE                  TO WS-CV1-QUOTE-SW
           ELSE
               MOVE ZERO                   TO WS-TALLY
               INSPECT WS-CV1-FIELD TALLYING WS-TALLY
                       FOR ALL WS-CV1-DELIM
               IF WS-TALLY = ZERO
                   PERFORM 6000-APPEND-WO-QUOTE-CV1
               ELSE
                   PERFORM 6000-APPEND-W-QUOTE-CV1.
           MOVE ZERO                       TO WS-CV1-SET-LEN.
           MOVE SPACE                      TO WS-CV1-SKIP-DLM.

           (optional)
           IF WS-CV1B > WS-CV1-RCD-WARN
               DISPLAY '**** AAAAAAAA CV1 record length excessive'
               MOVE +0600                  TO WS-RETURN-CODE.

    ( or )     MOVE 'Y'                    TO WS-CV1-SKIP-SW.

       6000-APPEND-WO-QUOTE-CV1.
           PERFORM 6000-FIND-START-CV1
               VARYING WS-CV1A FROM 1 BY 1
               UNTIL WS-CV1A > LENGTH OF WS-CV1-FIELD.
           PERFORM 6000-FIND-END-CV1
               VARYING WS-CV1A FROM LENGTH OF WS-CV1-FIELD BY -1
               UNTIL WS-CV1A < 1.
           IF WS-CV1-SKIP-DLM = SPACE
               MOVE WS-CV1-DELIM           TO WS-CV1-RCD(WS-CV1B: 1)
               ADD 1                       TO WS-CV1B.

       6000-APPEND-W-QUOTE-CV1.
           MOVE '"'                        TO WS-CV1-RCD(WS-CV1B: 1).
           ADD 1                           TO WS-CV1B.
           PERFORM 6000-FIND-START-CV1
               VARYING WS-CV1A FROM 1 BY 1
               UNTIL WS-CV1A > LENGTH OF WS-CV1-FIELD.
           PERFORM 6000-FIND-END-CV1
               VARYING WS-CV1A FROM LENGTH OF WS-CV1-FIELD BY -1
               UNTIL WS-CV1A < 1.
           MOVE '"'                        TO WS-CV1-RCD(WS-CV1B: 1).
           ADD 1                           TO WS-CV1B.
           IF WS-CV1-SKIP-DLM = SPACE
               MOVE WS-CV1-DELIM           TO WS-CV1-RCD(WS-CV1B: 1)
               ADD 1                       TO WS-CV1B.

       6000-FIND-START-CV1.
           IF WS-CV1-FIELD(WS-CV1A: 1) = SPACE
               CONTINUE
           ELSE
               MOVE WS-CV1A                TO WS-CV1-START
               MOVE LENGTH OF WS-CV1-FIELD TO WS-CV1A.

       6000-FIND-END-CV1.
           IF WS-CV1-FIELD(WS-CV1A: 1) = SPACE
               CONTINUE
           ELSE
               COMPUTE WS-CV1-LEN = (WS-CV1A - WS-CV1-START) + 1
               PERFORM 6000-ADJUST-CV1-LENGTH
               IF WS-CV1-START + WS-CV1-LEN - 1 > WS-CV1-RCD-WARN

      (optional)   DISPLAY '**** VVVVVVVV CV1 record length excessive'
                   DISPLAY '**** POS ' WS-CV1-START ' > '
                                       WS-CV1-RCD-WARN

      ( and )      MOVE +0600                 TO WS-RETURN-CODE
      ( or )       MOVE 'Y'                   TO WS-CV1-SKIP-SW
               ELSE
                   MOVE WS-CV1-FIELD(WS-CV1-START: WS-CV1-LEN)
                                              TO WS-CV1-RCD(WS-CV1B: )
                   ADD WS-CV1-LEN             TO WS-CV1B
                   MOVE ZERO                  TO WS-CV1A.

      *---------------------------------------
      *    logic if a specific length is specified
      *---------------------------------------
       6000-ADJUST-CV1-LENGTH.
           IF WS-CV1-SET-LEN > ZERO
             IF WS-CV1-SET-LEN > WS-CV1-LEN
                 MOVE ZERO                    TO WS-CV1-TMP-LEN
                 COMPUTE WS-CV1-TMP-LEN = WS-CV1-SET-LEN - WS-CV1-LEN
                 ADD WS-CV1-TMP-LEN           TO WS-CV1B
             ELSE
                 MOVE WS-CV1-SET-LEN          TO WS-CV1-LEN.

      *==============================================================
      *    CV2 build output rcd
      *==============================================================

      *---------------------------------------
      *    logic to stack a bunch of fields into CSV delimited format
      *
      *    file #2
      *---------------------------------------
       6000-ADD-CV2.
           IF WS-RETURN-CODE > ZERO
               OR WS-CV2-SKIP-SW = 'Y'
               CONTINUE
           ELSE
           IF WS-CV2-FIELD = SPACE
             IF WS-CV2-SET-LEN > ZERO
                 ADD WS-CV2-SET-LEN        TO WS-CV2B
                 IF WS-CV2-SKIP-DLM = SPACE
                     MOVE WS-CV2-DELIM     TO WS-CV2-RCD(WS-CV2B: 1)
                     ADD 1                 TO WS-CV2B
                 ELSE
                     CONTINUE
             ELSE
             IF WS-CV2-SKIP-DLM = SPACE
                 MOVE WS-CV2-DELIM         TO WS-CV2-RCD(WS-CV2B: 1)
                 ADD 1                     TO WS-CV2B
             ELSE
                 CONTINUE
           ELSE
           IF WS-CV2-QUOTE-SW = 'Y'
               PERFORM 6000-APPEND-W-QUOTE-CV2
               MOVE SPACE                  TO WS-CV2-QUOTE-SW
           ELSE
               MOVE ZERO                   TO WS-TALLY
               INSPECT WS-CV2-FIELD TALLYING WS-TALLY
                       FOR ALL WS-CV2-DELIM
               IF WS-TALLY = ZERO
                   PERFORM 6000-APPEND-WO-QUOTE-CV2
               ELSE
                   PERFORM 6000-APPEND-W-QUOTE-CV2.
           MOVE ZERO                       TO WS-CV2-SET-LEN.
           MOVE SPACE                      TO WS-CV2-SKIP-DLM.

           (optional)
           IF WS-CV2B > WS-CV2-RCD-WARN
               DISPLAY '**** CCCCCCCC CV2 record length excessive'
               MOVE +0600                  TO WS-RETURN-CODE.

    ( or )     MOVE 'Y'                    TO WS-CV2-SKIP-SW.

       6000-APPEND-WO-QUOTE-CV2.
           PERFORM 6000-FIND-START-CV2
               VARYING WS-CV2A FROM 1 BY 1
               UNTIL WS-CV2A > LENGTH OF WS-CV2-FIELD.
           PERFORM 6000-FIND-END-CV2
               VARYING WS-CV2A FROM LENGTH OF WS-CV2-FIELD BY -1
               UNTIL WS-CV2A < 1.
           IF WS-CV2-SKIP-DLM = SPACE
               MOVE WS-CV2-DELIM           TO WS-CV2-RCD(WS-CV2B: 1)
               ADD 1                       TO WS-CV2B.

       6000-APPEND-W-QUOTE-CV2.
           MOVE '"'                        TO WS-CV2-RCD(WS-CV2B: 1).
           ADD 1                           TO WS-CV2B.
           PERFORM 6000-FIND-START-CV2
               VARYING WS-CV2A FROM 1 BY 1
               UNTIL WS-CV2A > LENGTH OF WS-CV2-FIELD.
           PERFORM 6000-FIND-END-CV2
               VARYING WS-CV2A FROM LENGTH OF WS-CV2-FIELD BY -1
               UNTIL WS-CV2A < 1.
           MOVE '"'                        TO WS-CV2-RCD(WS-CV2B: 1).
           ADD 1                           TO WS-CV2B.
           IF WS-CV2-SKIP-DLM = SPACE
               MOVE WS-CV2-DELIM           TO WS-CV2-RCD(WS-CV2B: 1)
               ADD 1                       TO WS-CV2B.

       6000-FIND-START-CV2.
           IF WS-CV2-FIELD(WS-CV2A: 1) = SPACE
               CONTINUE
           ELSE
               MOVE WS-CV2A                TO WS-CV2-START
               MOVE LENGTH OF WS-CV2-FIELD TO WS-CV2A.

       6000-FIND-END-CV2.
           IF WS-CV2-FIELD(WS-CV2A: 1) = SPACE
               CONTINUE
           ELSE
               COMPUTE WS-CV2-LEN = (WS-CV2A - WS-CV2-START) + 1
               PERFORM 6000-ADJUST-CV2-LENGTH
               IF WS-CV2-START + WS-CV2-LEN - 1 > WS-CV2-RCD-WARN

      (optional)   DISPLAY '**** CCCCCCCC CV2 record length excessive'
                   DISPLAY '**** POS ' WS-CV2-START ' > '
                                       WS-CV2-RCD-WARN

      ( and )      MOVE +0600                 TO WS-RETURN-CODE
      ( or )       MOVE 'Y'                   TO WS-CV2-SKIP-SW
               ELSE
                   MOVE WS-CV2-FIELD(WS-CV2-START: WS-CV2-LEN)
                                              TO WS-CV2-RCD(WS-CV2B: )
                   ADD WS-CV2-LEN             TO WS-CV2B
                   MOVE ZERO                  TO WS-CV2A.

      *---------------------------------------
      *    logic if a specific length is specified
      *---------------------------------------
       6000-ADJUST-CV2-LENGTH.
           IF WS-CV2-SET-LEN > ZERO
             IF WS-CV2-SET-LEN > WS-CV2-LEN
                 MOVE ZERO                    TO WS-CV2-TMP-LEN
                 COMPUTE WS-CV2-TMP-LEN = WS-CV2-SET-LEN - WS-CV2-LEN
                 ADD WS-CV2-TMP-LEN           TO WS-CV2B
             ELSE
                 MOVE WS-CV2-SET-LEN          TO WS-CV2-LEN.

      *---------------------------------------
      *    end CSV logic
      *---------------------------------------
