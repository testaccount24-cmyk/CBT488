
SVMMC Mainframe Date processing   May 19, 2000

SYSTEM DATE      Computer operating system date
CURRENT DATE     Actual date
PROCESSING DATE  Date for which processing is occurring
OFFSET DATE      Used when batch processing is delayed such that
                 it runs past midnight.  Offset processing date
                 is derived from system date usually by subtracting
                 one from system date.

Methods for acquiring (getting ORIGINAL rather than passed) dates -
advantages/disadvantages

COBOL 'Accept' statement
 does not provide century (pre COBOL 390)
 does not provide offset date
 no manual intervention other than system date change
 automatic update

COBOL call to STV0400B
 provides century
 does not provide offset date
 no manual intervention other than system date change
 automatic update

STATIC PARM input
 can provide century
 can provide offset date
 allows for manual intervention
 not automatically updated

J-JOB
 can provide century
 can provide offset date
 allows for manual intervention
 automatically updated


WHEN ACQUIRING DATES, CONSIDER IF YOU WILL EVER NEED YOUR DATES TO BE
AUTOMATICALLY OFFSET (SET BACK ONE DAY) WHEN BATCH PROCESSING IS
DELAYED SUCH THAT IT RUNS PAST MIDNIGHT.

If your job is part of a batch cycle that could possibly be delayed such
 that it is running after midnight (where it normally would not), the
 J-JOB method of acquiring dates can provide an offset date
 to your program.  The utilities below can also generate offset dates.

OFFSET DATE PROCESSING has been developed to handle the above scenario -
when batch processing runs past midnight.  The operator 'sets the
offset' in one location and the change is filtered down to all
utilities/procs/programs making use of the offset logic.



Application changes required when requesting offset date

1. Set OFFX= to Y in the J-JOB.
2. If necessary, define OFFX= in your P-JOB.  This symbolic is updated
by the J- JOB to Y or N.  Pass OFFX= to date utilities in their PARM, so
that they can include the offset (if OFFX=Y) when generating dates.

Normally the offset value is -00000 meaning no alteration of system date
is requested.  If batch processing runs past midnight, the operator can
set the offset to -00001.  Then, if OFFX=Y is in your J-JOB, this will
cause the P-JOB date symbolics to be set back one day.

If your batch job runs at the same time every day, or has no need to
 acquire the OFFSET date, leave OFFX= equal to N in the J-JOB.  The
 processing date in this case would always be the system date.


Recommendations for date processing
-  Acquire century from the system using STV0400B or a J-JOB.
-  Use J-JOBS when possible, acquiring dates in CYMD format.
-  If possible, rather than calculate dates in your program, use date
symbolics in the P-JOB and pass a pre-calculated date to your program.
Example: CMD003=20000507, if today is May 10, 2000.
         CMDE03=20000229, if today is May 10, 2000.
-  In the future, and in disaster recovery situations, it is possible
that a mass change to the application processing date may be required.
This can be done using the J-JOB override.  Consider this when
acquiring dates from the system.

























CURRENT J-JOB SYMBOLICS

OFFX=       In P-job, will reflect OFFX= setting in J-job

EOMDATE=    mm/dd/yy  previous end of month
CURDATE=    mm/dd/yy  current date
CURREOM=    mm/dd/yy  current end of month
YESTDAY=    mm/dd/yy  yesterday
EOYDATE=    mm/dd/yy  previous end of year
PREVMON=    mmmccyy   month and year 1 month ago
LASTMON=    mmmccyy   month and year 2 months ago

CYDX=       current ccyy
CYD###=     prev ccyy
CYF###=     future ccyy
QTRX=       quarter:  1, 2, 3, or 4 depending on month
CMDX=       current ccyymmdd
CMD###=     prev ccyymmdd
CMDE##=     prev eom ccyymmdd
CMDEY#=     prev eoy ccyymmdd
CMF###=     future ccyymmdd
CMFE##=     future eom ccyymmdd
CMFEY#=     future eoy ccyymmdd
CDDX=       current ccyyddd
CDD###=     prev ccyyddd
CDDE##=     prev eom ccyyddd
CDDEY#=     prev eoy ccyyddd
CDF###=     future ccyyddd
CDFE##=     future eom ccyyddd
CDFEY#=     future eoy ccyyddd
YMDX=       current yymmdd
YMD###=     prev yymmdd
YMDE##=     prev eom yymmdd
YMDEY#=     prev eoy yymmdd
YMF###=     future yymmdd
YMFE##=     future eom yymmdd
YMFEY#=     future eoy yymmdd
YDDX=       current yyddd
YDD###=     prev yyddd
YDDE##=     prev eom yyddd
YDDEY#=     prev eoy yyddd
YDF###=     future yyddd
YDFE##=     future eom yyddd
YDFEY#=     future eoy yyddd

Note:  To obtain current eom or eoy, pass zero for the numeric value

DAYX=       nbr days between current date and Y--### or C--###
DAYM=       nbr days between current date and Y--E## or C--E##
DAYY=       nbr days between current date and Y--EY# or C--EY#
RUNX=       2 digit sequential counter
HMSX=       hhmms




Utilities using offset date


MIS0500B, MIS0425B, MIS0685B, and CHNGFILE have been altered to handle
'offset date' processing.  This means they can accept an 'offset
override' from operations (such as -00001) and calculate all new dates
based on the offset - in this case, a day previous (-00001) to current
date.

Jobs submitted at the same time every day would not want to include the
offset.  Only jobs which assume PROCESSING date, rather than SYSTEM
date, should make use of the offset date.


DATES WITHOUT OFFSET
--------------------

SYSTEM DATE:     2000/05/01
PROCESSING DATE: 2000/04/30


CHNGFILE

*                               1         2         3         4
*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....
 F00A  00010000  0001
 R00A  00020000  0008  #+00000#CMDE01#

result:

*
*
 20000430


MIS0425B

PARMFX='CMD0810003NCMDE01'

result:

1
2
3          20000430
4


STV0400B
In this example, STV0400B is receiving a date that has not been
'offset altered'.

WS-1-CYMD = 20000501

MOVE SPACE    TO WS-STV0400B-FIELDS.
MOVE WS-1-CYMD   TO STV0400B-CYMD.
MOVE 'CYMD  '    TO STV0400B-IN.
MOVE 'CMDE01'    TO STV0400B-OUT.
CALL 'STV0400B' USING WS-STV0400B-FIELDS.

result:

STV0400B-DATA  =  20000430









DATES WITH OFFSET
-----------------

SYSTEM DATE:     2000/05/01
PROCESSING DATE: 2000/04/30


CHNGFILE
When CHNGFILE is generating dates, rather than altering existing dates,
it can take the offset into account.

*                               1         2         3         4
*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....
 F00A  00010000  0001
 R00A  00020000  0008  #+00000#CMDE01#

result:

*
*
 20000331


MIS0425B
When MIS0425B is generating dates, rather than altering existing dates,
it can take the offset into account.

PARMFX='CMD0810003YCMDE01'

result:

1
2
3          20000331
4


STV0400B
Although STV0400B does not itself include the offset in its
calculations, it will accept a date that has previously been
'offset altered'.

WS-1-CYMD  =  20000430

MOVE SPACE    TO WS-STV0400B-FIELDS.
MOVE WS-1-CYMD   TO STV0400B-CYMD.
MOVE 'CYMD  '    TO STV0400B-IN.
MOVE 'CMDE01'    TO STV0400B-OUT.
CALL 'STV0400B' USING WS-STV0400B-FIELDS.

result:

STV0400B-DATA  =  20000331



















J-DATE offset - example for implementation:

JMIS17D
//JMIS17D  JOB 8231,'UPDATE SYMBOLICS',
//             CLASS=x,MSGCLASS=x,MSGLEVEL=(0,0)
//*--------------------------------------------------
//*  update symbolics in specified job jcl
//*--------------------------------------------------
//J001     EXEC MIS10,JOBJCL='PMIS17D',JOBLOC='SYSP.JCLLIB',OFFX=Y
//*--------------------------------------------------

MIS10
//*--------------------------------------------------
//*   MIS0500B loops through the specified JCL and
//*   updates symbolic strings
//*
//*   see MIS0500B for complete documentation
//*--------------------------------------------------
//*   MIS0500B, MIS0425B, and CHNGFILE all reference the
//*   offset parm mis10010.  when these programs generate
//*   dates (as opposed to altering existing dates), they
//*   can take the offset value into account, if requested.
//*
//*   OFFX=Y    consider offset
//*   OFFX=N    ignore offset, use current date
//*--------------------------------------------------
//S010     EXEC PGM=MIS0500B,REGION=3M,
//             PARM='&OFFX/'
//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ
//SYSOUT   DD  SYSOUT=*
//SYSPRINT DD  SYSOUT=*
//OFFSET   DD  DSN=userid.ISPF.FILE488(MIS10010),DISP=SHR
//JOBJCL   DD  DSN=&JOBLOC(&JOBJCL),DISP=SHR           *UPDATE
//*--------------------------------------------------

PMIS17D
//PMIS17D  JOB (8231,'RMM VOLUME MOVEMENT LIST 2'),
//             'RMM VOL MOVE 2',
//             CLASS=B,TIME=NOLIMIT,
//             MSGCLASS=X,MSGLEVEL=(1,1)
//*---------------------------------------------
//J010     EXEC MIS17,
//             OFFX=Y,
//             CMDX=20000518,
//             PARMFX='CCN0410004'

MIS17
//MIS17    PROC OFF=Y
//S340     EXEC PGM=MIS0425B,
//             REGION=3072K,
//             COND=(0,NE),
//*            RESTART=S340,       COND CODE 4 OK IF NOT THURSDAY
//             PARM='&PARMFX&OFFX/'
//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ
//SYSOUT   DD  SYSOUT=*
//SYSPRINT DD  SYSOUT=*
//OFFSET   DD  DSN=userid.ISPF.FILE488(MIS10010),DISP=SHR
//PARMFX   DD  DUMMY
//*-------------------------------------------
//S390     EXEC PGM=CHNG0080,
//             REGION=3072K,
//*            RESTART=S340,
//             COND=(0,NE),
//             PARM='0080N0000000000&OFFX.     /'
//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ
//SYSOUT   DD  SYSOUT=*
//SYSPRINT DD  SYSOUT=*
//CHANGED  DD  DSN=&&RMML100,DISP=(SHR,PASS,DELETE)
//PARM01   DD  DSN=userid.ISPF.FILE488(MIS17270),DISP=SHR
//OFFSET   DD  DSN=userid.ISPF.FILE488(MIS10010),DISP=SHR






