
  PULLFILE                                          Dec. 7th, 2000
  --------

  PULLFILE is used to pull portions of data (ie: files/members)
  and place in an output file for later sorting/editing/printing.
  The default processing is that a record is only pulled for output
  when specifically found.  See (xsi) to override this.

  limits:  input lrecl: 30 - 9999 bytes
           output lrecl: 10 - 9999 bytes

           parm may hold up to 100 search selections

           search strings may be up to 24 bytes long

   JCL INPUT PARM
   --------------
   format:  PARM='aaaabcddef/'

   aaaa  : the INPUT FILE RECORD LENGTH must be entered here.
               4 digits, numeric, 9999 max.

   b     : Y = place the record number of the input file in the first
               9 bytes of the output file

   c     : depending on the selection values used, sometimes the
           beginning pull position for the output data is higher than
           the ending pull position.  Y = switch the two so that a
           proper starting position/length can be determined.  usually
           this is best left to N.  set to Y if you have a delimiter
           defined for the beginning pull position and a relative (+/-)
           reference to that delimiter in the ending pull position
           that might end up having a lower value than the beginning
           pull position.


   dd    : blank  = use dd OUTFILE without page breaks
           ##     = use dd OUTPRNT and include page breaks
                    specify number of lines per page
                    00 = forty-four lines per page

   e     : test parm.  blank  = skip display
                       0      = display values of variables
                       1      = display contents of line table
                       2      = display contents of sort records
                       3      = display contents of infile
                       9      = display all

   f     : filler


   Directions for using
   --------------------
   1.  copy PULLPARM and PULLPROC to your library and update as needed.
       change run parm parameters in PULLPROC, ESPECIALLY the
       INPUT FILE LENGTH.
   2.  edit PULLCPY1, PULLCPY2, and PULLCPY3 copybooks
         OUTFILE is used when no page breaks are requested
         OUTPRNT is used when page breaks are requested
   3.  compile PULLFILE into your object library using the
         PULLCOMP compile procedure.  Consider renaming the
         output load module to PULL#### where #### is the input
         record length.
   4.  run PULLPROC


   PULLPARM
   --------

**  <-------------------x-- ---------- -------- -------- ---------------
**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j
**  <----+----+----+----i-- ---------- -------- -------- ---------------

 position  01 to 04
   if this is '**  ' then it is considered a documentation line

 position  01 to 24  (a)
   enter a search string in position 1 (though that can be spaces if
   part of the string).  PULLFILE searches through the input file
   and looks for the search string (either at a fixed position or
   anywhere in the record) and, when found, pulls all or portions of
   that record, or following records.  24 digits, alphanumeric

   '#NBR#' means search for numeric characters at a given position,
   rather than an exact string.  ie: search for any numeric tape volser.

   '#SPACE#' means search for spaces at a given position

   '#MAX#' means limit printing of each line (e) nbr of times

 position  25        (xsi)
       note: PULLFILE by default only pulls specified records.
       'X' and 'I' are used to override this logic.
       to pull groups of records (ie: from one string to another),
       use the 'S' (xsi) parm entry below a blank or 'I' (xsi)
       parm entry.
   'X' skip this record when specified string is found
       all 'X' records must be placed at the top of the parm list.
       if an 'X' parm processes, following parms are skipped.
   'I' means include a record regardless of contents of search string
       string length is automatically set to '01'.
       use after 'X' to include all records except those excluded
       by an 'X' record.
       Use before an 'S' (xsi) record to pull all records until
       a specific string is found.
   'S' when the string is found, mark the previous selection
       line to stop pulling records.
       if it follows a blank (xsi) record, this allows pulling when
       a string is found, and stopping when another string is found.
       normally the blank (xsi) parm entry that is above the
       'S' (xsi) parm entry will specify 999 in (e).
       if it follows an 'I' (xsi) record, this allows pulling
       all records until a specific string is found.
       If (d) > 00, include (d) lines past this line,
       or set stop point before this line using (d) and (-).
    #  2-9, allows duplicates when (e) > zero.
       if string 'ABC' is found, and parm (e) is 999,
       then if 'ABC' is again found in another record, this will
       allow the line to print again, up to # times.


**  <-------------------x-- ---------- -------- -------- ---------------
**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j
**  <----+----+----+----i-- ---------- -------- -------- ---------------

 position  26 to 27  (b)
   enter the length of the search string, including any trailing
   spaces.  2 digits, numeric.
   CC = automatically calculate the string length

 position  28        (m)
   if you want to limit the number of duplicate strings pulled
   from a record, enter 'M' here, and value (c) to the maximum
   number of pulled matches in that record.

 position  29 to 32  (c)
   if you only want to select search strings found at a specific
   location, enter that here.
   4 digit, numeric.
   if 29 is 'M' then this is the maximum number of duplicate
   strings to pull from a single line.
   1 digit alpha + 3 digit numeric.

 position  33        (-)
   - means begin pulling (d) records before current record.

 position  34 to 35  (d)
   enter the starting record to pull.  00 means pull the current
   record.  01 means when the string is found, pull starting at the
   next record.  if (e) is greater then 01, then pull those
   records as well.  2 digits, numeric.
   also see (-).

 position  36 to 38  (e)
   if (xsi) = 'S', this parm is ignored.
   pull this many records, beginning with the records selected
   from (d).  the records will be formated as determined by the
   parameters from the search string parm.  3 digits, numeric.
   enter '999' to pull to end of file.


**  <-------------------x-- ---------- -------- -------- ---------------
**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j
**  <----+----+----+----i-- ---------- -------- -------- ---------------

 position  40  (f)  thru  47  (#)
   if (xsi) = 'S', this parm is ignored.
   used to determine the beginning position for pulling data.
   ex: if data is 'abcd5fghi0klmn5pqrs0uvwx5z' and the search
   string is '0k' then the following applies:

   parm for beginning position   data where pull begins
   '  00000 '                    a
   'P 00003 '                    c
   '+ 00004 '                    n
   '+ 00000 '                    0
   '2 5p    '                    5p
   '2E5p    '                    q
   '1E5    3'                    z

 position  40  (f)
   ' '  pull from the beginning of the input data
   'P'  pull from position (g)
   '+'  pull a number of bytes before (-) or past (+) the position
   '-'    determined by (h).
   '1'  the length of the pull delimiter specified from left to right
   '2'   in position 42.  ex: '2 ab    ' will set the beginning
   '3'   pull position to the first occurrence of 'ab' in the input
   '4'   record.
   '5'

 position  41  (.)
   'E'  exclude the delimiter from the calculation of the beginning
         position.  used with options 1 - 5 above.  ex: if the input
         record contains 'dsn=pdsms.svoa.dga6.back' then a pull
         parameter of '4Edsn=  ' will set the ending position to the
         'p' in 'pdsms' rather than the 'd' in 'dsn='.
   'H'  used with options + or - above.  this says 'calculate the
        ending position (either a fixed position or a delimiter),
        set the beginning position to that ending position, then
        alter it plus or minus a set number of bytes.
   ' '  no alteration of the beginning position

 position  42 to 46  (g)
   a 5 byte numeric position or
   a left justified search delimiter for determining the beginning
    pull position.

 position  47  (#)
   if determining the beginning pull position via a delimiter search,
   a value > 0 here says to select the # occurrence of the
   delimiter rather than the first occurrence found.
   ex:  '2 ab   3'  selects the 3rd 'ab' in 'sabdefgabgrdabgthj'
                                                         --


**  <-------------------x-- ---------- -------- -------- ---------------
**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j
**  <----+----+----+----i-- ---------- -------- -------- ---------------

 position  49  (h)  thru  56  (i)
   if (xsi) = 'S', this parm is ignored.
   used to determine the ending position for pulling data.
   the rules are similar to those for (f) except that
   if (f) is relative to (h) then (h) is determined first.
   ex:  if (f) is  '+H00004 ' and (h) is '5 PDSMS ' then the
        ending pull position is determined by searching the
        input record for PDSMS before the beginning pull position
        is calculated (ie: 4 bytes past the 'P' in PDSMS.  Note that
        in this example the beginning pull position ends up
        greater than the ending position: unless the run parm 'c'
        is set to 'Y' (to switch the values of the beginning and
        ending positions when this occurs), this data will not be
        pulled.

 position  49  (h)
   ' '  pull through the ending of the input data
   'P'  pull up to position (i)
   '+'  pull a number of bytes before (-) or past (+) the position
   '-'    determined by (h).
   '1'  the length of the pull delimiter specified from left to right
   '2'   in position 51.  ex: '2 ab    ' will set the ending
   '3'   pull position to the first occurrence of 'ab' in the input
   '4'   record.
   '5'

 position  50  (.)
   'E'  exclude the delimiter from the calculation of the ending
         position.  used with options 1 - 5 above.  ex: if the input
         record contains '....backup.file,disp=shr' then a pull
         parameter of '5E,disp ' will set the ending position to the
         'e' in 'file', rather than the comma.
   'F'  used with options + or - above.  this says 'calculate the
        beginning position (either a fixed position or a delimiter),
        set the ending position to that beginning position, then
        alter it plus or minus a set number of bytes.
   ' '  no alteration of the ending position.

 position  51 to 55  (i)
   a 5 byte numeric position or
   a left justified search delimiter for determining the ending
    pull position.

 position  56  (#)
   if determining the ending pull position via a delimiter search,
   a value > 0 here says to select the # occurrence of the
   delimiter rather than the first occurrence found.
   ex:  '2 ab   3'  selects the 3rd 'ab' in 'sabdefgabgrdabgthj'
                                                         --

**  <-------------------x-- ---------- -------- -------- ---------------
**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j
**  <----+----+----+----i-- ---------- -------- -------- ---------------

 position  58 to 72  (j)
   if (xsi) = 'S', this parm is ignored.
   - enter a title to place in front of the output string
     if run parm option 'b' is a 'Y' for line numbering, output
     location changes
     ex:  'title          '    out:  'title           XXX...'
     ex:  'title          '    out:  '00000001 title           XXX...'
   - entering 'I## ' in positions 58 to 61:
     if the remainder of (j) is space, spaces for a length of ##
       will be inserted in front of the output.
       ex: 'I05            '   out:  '      XXX...          '
     else the remainder of (j) is treated as a title
       ex: 'I06 title      '   out:  'title XXX...          '
     if position 62 of (j) requests case conversion (below), spaces
       are inserted before the output for a length of ##.
       ex: 'I06 L00030009  '   out:  '      XXxxxxxxxXXXXXX...'
   - convert the output to lowercase by entering 'Laaaabbbb'
       in position 58, or precede with an 'I##' parm and place in
       position 62 (above).
       aaaa = starting position (0000 = start at position 1)
       bbbb = ending position (0000 = convert to end-of-record)
       00000000 = convert whole record
       note: case conversion is performed BEFORE titles/spaces are
       inserted in front of the output.  adjust accordingly.
   - convert the output to uppercase by entering 'Uaaaabbbb'
       ex:  U00100030  means convert pos 10 through 30 to uppercase


 -----------------
 PULLPARM examples
 -----------------


**  <-------------------x-- ---------- -------- -------- ---------------
**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j
**  <----+----+----+----i-- ---------- -------- -------- ---------------
S. U. T.                 08 0000 00000 - 00006  P 00050

1.  search for string S. U. T., length 8, anywhere in the input file.
    if found, pull from 6 bytes in front of the find string, up to
    position 50.
input:
00000044176 96.K  S. U. T.                                    11/25/96
output:
96.K  S. U. T.

-----------------------------------------------------------------------

**  <-------------------x-- ---------- -------- -------- ---------------
**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j
**  <----+----+----+----i-- ---------- -------- -------- ---------------
S. U. T.                 08 0000 00000 - 00006  +F00003

2.  search for string S. U. T., length 8, anywhere in the input file.
    if found, pull from 6 bytes in front of the find string, to 3 bytes
    past that.
input:
00000044176 96.K  S. U. T.                                    11/25/96
output:
96.K

-----------------------------------------------------------------------

**  <-------------------x-- ---------- -------- -------- ---------------
**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j
**  <----+----+----+----i-- ---------- -------- -------- ---------------
LISTC                    05 0000 00000 + 00011  3E')     I23

3.  search for string LISTC, length 5, anywhere in the input file.
    if found, pull from 11 bytes after the 'L' in LISTC, up to
    but not including the 3 byte delimiter QUOTE+RIGHT PAREN+SPACE.
    if delimiter is not found, skip pulling for this parm.
    prefix output with 23 spaces.
input:
 LISTC ENT('PDSMS.TMSI.SITE.TAPELEVL')
output:
                       PDSMS.TMSI.SITE.TAPELEVL

-----------------------------------------------------------------------

**  <-------------------x-- ---------- -------- -------- ---------------
**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j
**  <----+----+----+----i-- ---------- -------- -------- ---------------
SYSUT2                   06 0003 00000 3ESN=    1E,      File 01:

4.  search for string SYSUT2, length 6, at position 03 in the input
    file.  if found, search for the 3 byte delimiter SN=.  Reset
    the beginning pull position to not include the delimiter.
    pull up to, but not including, the 1 byte delimiter COMMA.
    prefix output with the title 'File 01:       '.
input:
//SYSUT2   DD  DSN=PDSMS.SMTI.DGA6.BDM92OPT,DISP=SHR
output:
File 01:        PDSMS.SMTI.DGA6.BDM92OPT

-----------------------------------------------------------------------

**  <-------------------x-- ---------- -------- -------- ---------------
**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j
**  <----+----+----+----i-- ---------- -------- -------- ---------------
SYSUT2                   06 0000 00000 3 SN=    +F00044

5.  search for string SYSUT2, length 6, anywhere in the input
    file.  if found, search for the 3 byte delimiter SN=.  determine
    the ending pull position to be 44 bytes after the S in the
    beginning delimiter.
input:
//SYSUT2   DD  DSN=PDSMS.SMTI.DGA6.BDM92OPT,DISP=SHR
output:
SN=PDSMS.SMTI.DGA6.BDM92OPT,DISP=SHR

-----------------------------------------------------------------------

**  <-------------------x-- ---------- -------- -------- ---------------
**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j
**  <----+----+----+----i-- ---------- -------- -------- ---------------
SYSUT2                   06 0000 00000 4 DSN= 2 + 00044  Cash file ->

6.  search for the string SYSUT2, length 6, anywhere in the input
    file.  if found, search for the 2nd occurrence of 4 byte
    delimiter DSN=.  determine the ending pull position to be 44 bytes
    after the S in the find string (since no F was used in position
    50 to base the ending position relative to the beginning position
    instead of the find string).  prefix the output with the title
    'Cash file ->   '.
input:
//SYSUT2   DD  DSN=PDSMS.SMTI.DGA6.TEMP.BDMMTHHI,DISP=SHR
output:
Cash file ->   DSN=PDSMS.SMTI.DGA6.TEMP.BDMMTHH

-----------------------------------------------------------------------

**  <-------------------x-- ---------- -------- -------- ---------------
**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j
**  <----+----+----+----i-- ---------- -------- -------- ---------------
A                        01 0000 01003   00000    00000

7.  search for A, length 1, anywhere in the input record.
    once found, write the next 3 records (full length) to
    the output file (this will not include the current record).


-----------------------------------------------------------------------

**  <-------------------x-- ---------- -------- -------- ---------------
**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j
**  <----+----+----+----i-- ---------- -------- -------- ---------------
BBB                      03 0000 00000 + 00000  + 00000

8.  search for BBB, length 3, anywhere in the input record.
    once found, determine the beginning pull position to be the
    first B, and the ending position to be the first character
    of the search string (in this case, the first B).
input:
ABBBCCDDDEEFFGGHHJJ
output:
B

-----------------------------------------------------------------------

**  <-------------------x-- ---------- -------- -------- ---------------
**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j
**  <----+----+----+----i-- ---------- -------- -------- ---------------
ABC                      01 0000 00000 - 00003  +F00002

9.  search for ABC, length 3, anywhere in the input record.
    once found, determine the beginning pull position to be 3 positions
    before the search string.  determine the ending position to be 2
    positions past the beginning pull position.
input:
ABBBCCQABCEFFGGHHJJ
output:
CCQ

-----------------------------------------------------------------------

**  <-------------------x-- ---------- -------- -------- ---------------
**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j
**  <----+----+----+----i-- ---------- -------- -------- ---------------
                        I01 0000 00000   00000    00000
that                    S04 0000 01000   00000    00000

10. Include all records until 'that' is found.  Include the record
    containing 'that'.
input:
Mary had a little Lamb
Its fleece was white as snow
Everywhere that Mary went
The Lamb was sure to go
output:
Mary had a little Lamb
Its fleece was white as snow
Everywhere that Mary went

-----------------------------------------------------------------------

**  <-------------------x-- ---------- -------- -------- ---------------
**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j
**  <----+----+----+----i-- ---------- -------- -------- ---------------
Mary                     04 0000 00999   00000    00000  U00000000
as                      S02 0000 00000   00000    00000

11. When 'Mary' is found, pull records until 'as' is found.
    Exclude stop line.  Convert pulled records to uppercase.
input:
Mary had a little Lamb
Its fleece was white as snow
Everywhere that Mary went
The Lamb was sure to go
It followed her to school one day
Which was against the rules
It made the children laugh and play
To see a lamb in school
output:
MARY HAD A LITTLE LAMB
EVERYWHERE THAT MARY WENT

-----------------------------------------------------------------------

**  <-------------------x-- ---------- -------- -------- ---------------
**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j
**  <----+----+----+----i-- ---------- -------- -------- ---------------
NUMBER  458              12 0009-03999   00000    00000
NUMBER  460             S12 0009-04000   00000    00000

12. Searching for 'NUMBER 458' in position 9 of a report,
    begin pulling from 3 records ABOVE the found string
    (to include the report headers).  Pull until 4 records before
    'NUMBER 460' (to include all records for ledger 459 but to
    exclude the report headers for ledger 460).

-----------------------------------------------------------------------

**  <-------------------x-- ---------- -------- -------- ---------------
**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j
**  <----+----+----+----i-- ---------- -------- -------- ---------------
 DEPT                    06 0002-04999   00000    00000
END OF                  S06 0002 00000   00000    00000

13. Search for " DEPT " length 6 in position 2.
    When found, begin pulling from four records previous, and pull
    until "END OF" is found in position 2.
    999 = pull until EOF

-----------------------------------------------------------------------
