
       TITLE '  MIS0655B: batch job delay utility'.
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    MIS0655B.
      ******************************************************************
      *@@@ C3 hold batch jobs until event occurs
      ******************************************************************
      *
      *  I am interested in knowing if/where these programs
      *  are in use.     Email:  jiannon@me.com
      *
      ******************************************************************
      * Date written: 11/29/2001
      * Author      : Jim Iannone
      *
      *    Test a parm to determine if a batch event has occurred.
      *    For example, a CICS region might be down.  If down,
      *    issue a message to the operator that the job is held
      *    until CICS comes back up, or until some other event
      *    causes the parm to be reset.
      *
      *    Used for jobs requiring batch cics access, or for jobs
      *    dependent on other jobs.
      *
      *    When jobs waiting for CICS restart, use a delay system
      *    so they don't all restart at the same time, to avoid
      *    excessive VSDM or other contention.
      *
      *    Simply stated, this job waits for a static parm
      *    to be changed from 'N' (in the first position) to 'Y'.
      *
      *    To cause MIS0655B to issue a cond code:
      *             place '0' in PARM01 to issue cond code 0
      *             place '4' in PARM01 to issue cond code 4
      *             place '6' in PARM01 to issue cond code 16
      *             place '8' in PARM01 to issue cond code 8
      *
      *    'H' means that the task is 'held' until being set to
      *    Y' or 'N'.  Set manually using the >HOLDXXXX command
      *    (where XXXX = CICS name) about 10 minutes before
      *    dropping CICS.
      *
      *    This allows jobs requiring CICS to start waiting even
      *    before the region is down, and jobs that wait for CICS
      *    to terminate (using the REVERSE option) to wait until
      *    the region is down.
      *
      *    You can also specify an interval (see the interval table
      *    below).  This will force all jobs using interval logic
      *    to run ## minutes after the previous job.
      *
      *    NOTE:  this program calls delay program "NEWWAIT"
      *           which resides on CBT tape #270 and requires
      *           MACLIB from same tape number when compiling
      *
      ******************************************************************
      * Date changed: 10/24/2006
      * Programmer  : Jim Iannone
      *
      *    Allow the program to wait until a specified time of day
      *    is met.  This works with the other parameters: if PARM01
      *    is 'N' then program will still wait for it to change
      *    to 'Y' regardless of the time of day.  Once that condition
      *    is met, the time of day condition then applies.
      *
      *    To terminate this program while waiting for a certain time,
      *    set PARM01 to one of the values listed above.
      ******************************************************************
      * Date changed: 02/08/2010
      * Programmer  : Jim Iannone
      *
      *    Allow the program to wait until a specified string is found
      *    in PARM01, either at a specified position and/or record
      *    or anywhere
      ******************************************************************
      * Date changed: 10/30/2019
      * Programmer  : Jim Iannone
      *
      *    Add symbolic replacement capability in PARM02 message:
      *    replace TTTTT with wait time and JJJJJJJJ with job name.
      *    Revamp matching loop and improve display statements.
      ******************************************************************

       ENVIRONMENT DIVISION.

       CONFIGURATION SECTION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.

           SELECT PARM01               ASSIGN TO PARM01
                                       ORGANIZATION IS SEQUENTIAL
                                       ACCESS MODE IS SEQUENTIAL
                                       FILE STATUS IS WS-STAT.

           SELECT PARM02               ASSIGN TO PARM02
                                       ORGANIZATION IS SEQUENTIAL
                                       ACCESS MODE IS SEQUENTIAL
                                       FILE STATUS IS WS-STAT.

           SELECT TRACK1               ASSIGN TO TRACK1
                                       ORGANIZATION IS SEQUENTIAL
                                       ACCESS MODE IS SEQUENTIAL
                                       FILE STATUS IS WS-STAT.

       DATA DIVISION.
       FILE SECTION.

       FD  PARM01
           RECORDING MODE F.
       01  PARM01-RECORD.
           05  PARM01-UP-DOWN          PIC  X.
           05  FILLER                  PIC  X.
           05  PARM01-REGION           PIC  X(04).
           05  FILLER                  PIC  X(66).
           05  FILLER                  PIC  X(08).

       FD  PARM02
           RECORDING MODE F.
       01  PARM02-RECORD.
           05  PARM02-DOCU             PIC  X.
           05  PARM02-CMD              PIC  X(13).
           05  FILLER                  PIC  X(04).
           05  PARM02-VALUE            PIC  X(50).
           05  FILLER REDEFINES PARM02-VALUE.
               10  PARM02-01-VALUE     PIC  X.
               10  FILLER              PIC  X(49).
           05  FILLER REDEFINES PARM02-VALUE.
               10  PARM02-02-VALUE     PIC  XX.
               10  FILLER              PIC  X(48).
           05  FILLER REDEFINES PARM02-VALUE.
               10  PARM02-03-VALUE     PIC  XXX.
               10  FILLER              PIC  X.
               10  PARM02-03-5X7       PIC  XXX.
               10  FILLER              PIC  X.
               10  PARM02-03-9X11      PIC  XXX.
               10  FILLER              PIC  X.
               10  PARM02-STRING       PIC  X(30).
               10  FILLER              PIC  X(08).
           05  FILLER REDEFINES PARM02-VALUE.
               10  PARM02-04-VALUE     PIC  X(04).
               10  FILLER              PIC  X(46).
           05  FILLER REDEFINES PARM02-VALUE.
               10  PARM02-05-VALUE     PIC  X(05).
               10  FILLER              PIC  X(45).
           05  FILLER                  PIC  X(04).
           05  FILLER                  PIC  X(08).

       FD  TRACK1
           RECORDING MODE F.
       01  TRACK1-RECORD.
           05  TRACK1-REGION           PIC  X(04).
           05  FILLER                  PIC  X.
           05  TRACK1-NBR              PIC  XXX.
           05  FILLER                  PIC  X.
           05  TRACK1-TIME             PIC  X(06).
           05  FILLER                  PIC  X(65).

       WORKING-STORAGE SECTION.

       01  WS-START.
           05  FILLER                  PIC  X(32)    VALUE
               ' Working storage MIS0655B start '.

       01  WS-WORK-FIELDS.
           05  WS-STAT                 PIC  99       VALUE ZERO.
           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.
           05  WS-SET-CODE             PIC S9(04)    VALUE ZERO COMP.
           05  WS-LS-DATA              PIC  X(10)    VALUE SPACE.
           05  FILLER REDEFINES WS-LS-DATA.
               10  WS-LS-JOB           PIC  X(08).
               10  WS-LS-EXTRA         PIC  XX.
           05  WS-TIME                 PIC  X(05)    VALUE SPACE.
           05  WS-REGION               PIC  X(04)    VALUE SPACE.
           05  WS-CICS                 PIC  X        VALUE SPACE.
           05  WS-CONSOLE              PIC  X        VALUE SPACE.
           05  WS-MESSAGE              PIC  X(50)    VALUE SPACE.
           05  WS-STRING               PIC  X(30)    VALUE SPACE.
           05  WS-REVERSE              PIC  X        VALUE SPACE.
           05  WS-DDD                  PIC  XXX      VALUE SPACE.
           05  WS-CALL-STV0400B        PIC  X(08)    VALUE 'STV0400B'.
           05  WS-LOOP-CODE            PIC  X(04)    VALUE '0000'.
           05  WS-LOOP-CODE-N REDEFINES WS-LOOP-CODE
                                       PIC  9(04).
           05  WS-TRACK1-RCD-CNT       PIC  999      VALUE ZERO.
           05  WS-STR-POS              PIC  999      VALUE ZERO.
           05  WS-STR-LEN              PIC  999      VALUE ZERO.
           05  WS-STR-MAX              PIC  999      VALUE ZERO.
           05  WS-STR-TOP              PIC  999      VALUE ZERO.
           05  WS-STR-BOT              PIC  999      VALUE ZERO.
           05  WS-SEARCH-CNT           PIC  9(05)    VALUE ZERO.
           05  WS-DOWN-CNT             PIC  99       VALUE ZERO.
           05  WS-HIGH-NBR             PIC  999      VALUE ZERO.
           05  WS-HIGH-LONG            PIC  9(05)    VALUE ZERO.
           05  WS-WAIT-SECONDS         PIC  9(07)    VALUE ZERO.
           05  WS-WAIT-MINUTES         PIC  9(07)    VALUE ZERO.
           05  WS-WAIT-REMAIN          PIC  9(05)    VALUE ZERO.
           05  WS-MSGCNT               PIC  99       VALUE ZERO.
           05  WS-DELAY                PIC  9(05)    VALUE ZERO.
           05  WS-TEMP-DELAY           PIC  9(05)    VALUE ZERO.
           05  WS-INTERVAL             PIC  999      VALUE ZERO.
           05  WS-1-HMS                PIC  9(06)    VALUE ZERO.
           05  WS-2-HMS                PIC  9(06)    VALUE ZERO.
           05  FILLER REDEFINES WS-2-HMS.
               10  WS-2-HM             PIC  9(04).
               10  WS-2-S              PIC  99.
           05  WS-STAGMULT             PIC  999      VALUE ZERO.
           05  WS-MAX-LOOP             PIC  999      VALUE ZERO.
           05  WS-ABEND1               PIC  9(04)    VALUE 1.
           05  WS-ABEND2               PIC  9(04)    VALUE 1.
           05  WS-ABEND3               PIC  9(04)    VALUE ZERO.
           05  WS-LOOP-CNT             PIC  9(05)    VALUE ZERO.
           05  WS-POSTWAIT             PIC  9(05)    VALUE ZERO.
           05  WS-CURR-TIME            PIC  9(11)    VALUE ZERO.
           05  FILLER REDEFINES WS-CURR-TIME.
               10  WS-CURR-CY          PIC  9(04).
               10  WS-CURR-DDD         PIC  999.
               10  WS-CURR-HM.
                   15  WS-CURR-H       PIC  99.
                   15  WS-CURR-M       PIC  99.
           05  WS-TIME-RANGE-1         PIC  9(11)    VALUE ZERO.
           05  WS-TIME-RANGE-2         PIC  9(11)    VALUE ZERO.
           05  WS-TIME-RANGE-3         PIC  9(11)    VALUE ZERO.
           05  WS-DIFF-CURR            PIC  9(06)    VALUE ZERO.
           05  FILLER REDEFINES WS-DIFF-CURR.
               10  WS-DIFF-CURR-H      PIC  99.
               10  WS-DIFF-CURR-M      PIC  99.
               10  WS-DIFF-CURR-S      PIC  99.
           05  WS-DIFF-TGT             PIC  9(06)    VALUE ZERO.
           05  FILLER REDEFINES WS-DIFF-TGT.
               10  WS-DIFF-TGT-H       PIC  99.
               10  WS-DIFF-TGT-M       PIC  99.
               10  WS-DIFF-TGT-S       PIC  99.
           05  WS-DIFF-CURR-SEC        PIC  9(05)    VALUE ZERO.
           05  WS-DIFF-TGT-SEC         PIC  9(05)    VALUE ZERO.
           05  WS-DIFF-SEC             PIC  9(05)    VALUE ZERO.

      *    Year 2000 compatible date routine
       01  WS-STV0400B-FIELDS.
           05  STV0400B-DATA           PIC  X(10)    VALUE SPACE.
           05  FILLER REDEFINES STV0400B-DATA.
               10  STV0400B-ERROR      PIC  X(06).
               10  STV0400B-NBR        PIC  X(04).
           05  FILLER REDEFINES STV0400B-DATA.
               10  STV0400B-1X8        PIC  X(08).
               10  FILLER              PIC  XX.
           05  FILLER REDEFINES STV0400B-DATA.
               10  STV0400B-DAYS       PIC  X(05).
               10  FILLER              PIC  X(05).
           05  FILLER REDEFINES STV0400B-DATA.
               10  STV0400B-DAY        PIC  X(09).
               10  STV0400B-DAY-NBR    PIC  X.
           05  STV0400B-DATA2          PIC  X(10)    VALUE SPACE.
           05  STV0400B-IN             PIC  X(06)    VALUE SPACE.
           05  STV0400B-OUT            PIC  X(06)    VALUE SPACE.

       01 NEWWAIT-DATA.
           05  NEWWAIT-LEN             PIC S9999     VALUE +5 COMP.
           05  NEWWAIT-DELAY           PIC  9(05).

       01  WS-SUBSCRIPTS               COMP.
           05  WS-SUB1                 PIC S9(05)    VALUE ZERO.
           05  WS-SUB2                 PIC S9(05)    VALUE ZERO.

       01  WS-SWITCHES.
           05  WS-FIRST-STR-SW         PIC  X        VALUE SPACE.
           05  WS-PAUSE-SW             PIC  X        VALUE SPACE.
           05  WS-TIME-SW              PIC  X        VALUE SPACE.
           05  WS-TIME-MET-SW          PIC  X        VALUE SPACE.
           05  WS-FIRST-PAUSE-SW       PIC  X        VALUE SPACE.
           05  WS-CONDITION-MET-SW     PIC  X        VALUE SPACE.
           05  WS-TRACK1-SW            PIC  X        VALUE SPACE.
           05  WS-STR-FND-SW           PIC  X        VALUE SPACE.
           05  WS-INTERVAL-SW          PIC  X        VALUE SPACE.
           05  WS-INT-DELAYED-SW       PIC  X        VALUE SPACE.
           05  WS-COND-TIME-SW         PIC  X        VALUE SPACE.
           05  WS-COND-STRING-SW       PIC  X        VALUE SPACE.
           05  WS-COND-PARM01-SW       PIC  X        VALUE SPACE.
           05  WS-MSG-TIME-SW          PIC  X        VALUE SPACE.
           05  WS-MSG-STRING-SW        PIC  X        VALUE SPACE.
           05  WS-MSG-PARM01-SW        PIC  X        VALUE SPACE.

       01  WS-TABLES.
           05  WS-ALPHA-TABLE          PIC  X(57)    VALUE
           'A01B02C03D04E05F07G10I12J15K18L20M25O30P35Q40R45S50T55U60'.
           05  WS-ALPHA-ITEM REDEFINES WS-ALPHA-TABLE
                                       OCCURS 19 TIMES.
               10  WS-ALPHA            PIC  X.
               10  WS-MIN              PIC  99.

       01  WS-END.
           05  FILLER                  PIC  X(16)    VALUE
               '  MIS0655B END  '.

       LINKAGE SECTION.

       01  LS-FIELD.
           05  LS-LENGTH               PIC S9(04)    COMP.
           05  LS-DATA                 PIC  X(10).
           05  FILLER REDEFINES LS-DATA.
               10  LS-JOB              PIC  X(08).
               10  LS-FILLER           PIC  XX.

      /
       PROCEDURE DIVISION USING LS-FIELD.

       0100-PROGRAM-ENTRY.
           DISPLAY '    '.
           DISPLAY '**** MIS0655B wait for CICS or parm entry'.
           PERFORM 0420-SHOW-CURRENT-TIME.
           PERFORM 1200-OPEN-PARM01.

           MOVE ZERO                          TO WS-LOOP-CNT.
           MOVE ZERO                          TO WS-MAX-LOOP.
           MOVE ZERO                          TO WS-LOOP-CODE-N.
           MOVE SPACE                         TO WS-CONDITION-MET-SW.
           MOVE SPACE                         TO WS-INTERVAL-SW.
           MOVE SPACE                         TO WS-COND-TIME-SW.
           MOVE SPACE                         TO WS-COND-STRING-SW.
           MOVE SPACE                         TO WS-COND-PARM01-SW.
           MOVE SPACE                         TO WS-FIRST-PAUSE-SW.
           MOVE SPACE                         TO WS-TIME-SW.
           MOVE SPACE                         TO WS-TIME-MET-SW.
           MOVE SPACE                         TO WS-STR-FND-SW.
           MOVE SPACE                         TO WS-STRING.
           IF WS-RETURN-CODE = ZERO
               PERFORM 0400-GET-PARM.
           IF WS-RETURN-CODE = ZERO
               PERFORM 1000-LOAD-PARM02.
           IF WS-RETURN-CODE = ZERO
               PERFORM 0500-PROCESS THRU
                       0500-PROCESS-EXIT.

           IF WS-PAUSE-SW = 'Y'
               MOVE ZERO                      TO WS-WAIT-REMAIN
               DIVIDE WS-WAIT-SECONDS BY 60 GIVING WS-WAIT-MINUTES
                   REMAINDER WS-WAIT-REMAIN
               DISPLAY '**** Delay min/sec       ' WS-WAIT-MINUTES
                                               ' ' WS-WAIT-REMAIN
               IF WS-CONDITION-MET-SW = 'Y'
                   CONTINUE
               ELSE
               IF WS-LS-JOB > SPACE
                   DISPLAY '**** Job                 ' WS-LS-JOB
               ELSE
                   CONTINUE
           ELSE
               DISPLAY '**** No delay required'.

           IF WS-RETURN-CODE = ZERO
               PERFORM 1300-CLOSE-PARM01
               IF WS-SET-CODE NOT = ZERO
                   MOVE WS-SET-CODE           TO WS-WAIT-REMAIN
                   IF WS-SET-CODE > 4
                       MOVE WS-SET-CODE           TO RETURN-CODE
                       IF WS-CONSOLE = 'Y'
                           DISPLAY 'CAWU151I ' WS-LS-JOB
                                   ' issuing cond code '
                                    WS-WAIT-REMAIN UPON CONSOLE
                       ELSE
                           DISPLAY '**** ' WS-LS-JOB
                                   '            issuing cond code '
                                    WS-WAIT-REMAIN
                   ELSE
                       MOVE WS-SET-CODE           TO RETURN-CODE
                       DISPLAY '**** ' WS-LS-JOB
                               '            issuing cond code '
                                WS-WAIT-REMAIN
               ELSE
                   CONTINUE
           ELSE
               DISPLAY '**** MIS0655B cond code ' WS-RETURN-CODE
                       ' set by program'
               MOVE WS-RETURN-CODE            TO RETURN-CODE.

           DISPLAY '**** MIS0655B EOJ encountered '.
           DISPLAY '    '.

           STOP RUN.

       0400-GET-PARM.
           IF LS-LENGTH = ZERO
               DISPLAY '**** Parm length is zero '
               MOVE +0400                     TO WS-RETURN-CODE
           ELSE
           IF LS-LENGTH > LENGTH OF WS-LS-DATA
               DISPLAY '**** Parm length is excessive '
               MOVE +0400                     TO WS-RETURN-CODE
           ELSE
               MOVE LS-DATA(1: LS-LENGTH)     TO WS-LS-DATA.

       0420-SHOW-CURRENT-TIME.
           MOVE SPACE                         TO WS-STV0400B-FIELDS.
           MOVE 'CYDDD '                      TO STV0400B-OUT.
           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.
           DISPLAY '**** Current            '
                   ' ' FUNCTION CURRENT-DATE(1: 4)
                   ' ' STV0400B-DATA(5: 3)
                   ' ' FUNCTION CURRENT-DATE(9: 2)
                   ':' FUNCTION CURRENT-DATE(11: 2)
                   ':' FUNCTION CURRENT-DATE(13: 2).
           DISPLAY '                         '.

      *---------------------------------------
      *    WS-CONDITION-MET-SW
      *      SPACE   first pass - if all conditions met, skip
      *              0900-FINAL-MESSAGE-AND-WAIT
      *      Y       conditions met
      *      N       conditions not met
      *      E       exit normal condition tests
      *---------------------------------------
      *    H = hold (causes job to wait regardless if waiting
      *              for parm to change to 'N' or 'Y'.  Used to pause
      *              jobs BEFORE CICS is brought down)
      *---------------------------------------
      *    WS-REVERSE = 'Y' will change MIS0655B to wait while
      *    the parm is 'Y', and continue when it switches to 'N'.
      *---------------------------------------
       0500-PROCESS.
           READ PARM01.
           IF WS-STAT = 10
               GO TO 0500-PROCESS-EXIT
           ELSE
           IF WS-STAT > ZERO
               DISPLAY '**** MIS0655B read error on PARM01'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0500                     TO WS-RETURN-CODE
               GO TO 0500-PROCESS-EXIT.

           MOVE PARM01-REGION                 TO WS-REGION.
      *---------------------------------------
      *    user requested to limit number of delay loops.
      *    issue cond code WS-LOOP-CODE when reached
      *    or ABEND program with a divide-by-zero.
      *---------------------------------------
           IF WS-MAX-LOOP > ZERO
               ADD 1                          TO WS-LOOP-CNT
               IF WS-LOOP-CNT > WS-MAX-LOOP
                   DISPLAY '**** MIS0655B max loop cnt '
                       WS-MAX-LOOP ' reached'
                   IF WS-LOOP-CODE = 'ABND'
                       DISPLAY '**** MIS0655B abend requested - '
                       DISPLAY '**** terminating with divide-by-zero'
                       COMPUTE WS-ABEND1 = WS-ABEND2 / WS-ABEND3
                       GO TO 0500-PROCESS-EXIT
                   ELSE
                       MOVE WS-LOOP-CODE-N    TO WS-RETURN-CODE
                       GO TO 0500-PROCESS-EXIT.

      *---------------------------------------
      *    check for time-of-day processing.
      *    once time-of-day matches, do not check again.
      *---------------------------------------
           IF WS-TIME-SW NOT = SPACE
             IF WS-TIME-MET-SW = SPACE
                 PERFORM 0600-CHECK-TIME-OF-DAY
                 IF WS-TIME-MET-SW = SPACE
                     MOVE 'N'                 TO WS-COND-TIME-SW
                 ELSE
                     MOVE 'Y'                 TO WS-COND-TIME-SW
             ELSE
                 MOVE 'Y'                     TO WS-COND-TIME-SW.

      *---------------------------------------
      *    check for string in PARM01.
      *    once string found, do not check again.
      *    if string specified, skip remaining PARM01 settings.
      *---------------------------------------
           IF WS-STRING NOT = SPACE
             IF WS-STR-FND-SW = SPACE
                 MOVE ZERO                    TO WS-SEARCH-CNT
                 PERFORM 1600-SEARCH-PARM01 THRU
                         1600-SEARCH-PARM01-EXIT
                 IF WS-STR-FND-SW = SPACE
                     MOVE 'N'                 TO WS-COND-STRING-SW
                 ELSE
                 IF WS-REVERSE = 'Y'
                     MOVE 'N'                 TO WS-COND-STRING-SW
                 ELSE
                     MOVE 'Y'                 TO WS-COND-STRING-SW
             ELSE
                 MOVE 'Y'                     TO WS-COND-STRING-SW
           ELSE
           IF PARM01-UP-DOWN = '0'
               MOVE ZERO                      TO WS-SET-CODE
               MOVE 'E'                       TO WS-COND-PARM01-SW
               DISPLAY '**** PARM01 override 0 specified'
           ELSE
           IF PARM01-UP-DOWN = '4'
               MOVE +0004                     TO WS-SET-CODE
               MOVE 'E'                       TO WS-COND-PARM01-SW
               DISPLAY '**** PARM01 override 4 specified'
           ELSE
           IF PARM01-UP-DOWN = '6'
               MOVE +0016                     TO WS-SET-CODE
               MOVE 'E'                       TO WS-COND-PARM01-SW
               DISPLAY '**** PARM01 override 6 specified'
           ELSE
           IF PARM01-UP-DOWN = '8'
               MOVE +0008                     TO WS-SET-CODE
               MOVE 'E'                       TO WS-COND-PARM01-SW
               DISPLAY '**** PARM01 override 8 specified'
           ELSE
      *---------------------------------------
      *    check value of PARM01
      *---------------------------------------
           IF PARM01-UP-DOWN = 'H'
               MOVE 'N'                       TO WS-COND-PARM01-SW
           ELSE
           IF PARM01-UP-DOWN = 'Y'
             IF WS-REVERSE = 'Y'
                 MOVE 'N'                     TO WS-COND-PARM01-SW
             ELSE
                 MOVE 'Y'                     TO WS-COND-PARM01-SW
           ELSE
           PERFORM 0610-TEST-INTERVAL
           IF WS-INTERVAL-SW = 'Y'
             IF WS-INT-DELAYED-SW = SPACE
                 PERFORM 0610-DELAY-INTERVAL
                 IF WS-TEMP-DELAY > ZERO
                     MOVE 'N'                 TO WS-COND-PARM01-SW
                 ELSE
                     MOVE 'Y'                 TO WS-COND-PARM01-SW
             ELSE
                 MOVE 'Y'                     TO WS-COND-PARM01-SW
           ELSE
           IF WS-REVERSE = 'Y'
               MOVE 'Y'                       TO WS-COND-PARM01-SW
           ELSE
               MOVE 'N'                       TO WS-COND-PARM01-SW.

      *---------------------------------------
      *    summarize condition switches into WS-CONDITION-MET-SW
      *    but leave as space if all conditions initially met
      *---------------------------------------
           IF WS-COND-PARM01-SW = 'E'
               GO TO 0500-PROCESS-EXIT.

           IF WS-COND-TIME-SW = SPACE OR 'Y'
             IF WS-COND-STRING-SW = SPACE OR 'Y'
               IF WS-COND-PARM01-SW = SPACE OR 'Y'
                 IF WS-CONDITION-MET-SW = 'N'
                     MOVE 'Y'                 TO WS-CONDITION-MET-SW
                 ELSE
                     CONTINUE
               ELSE
                   MOVE 'N'                   TO WS-CONDITION-MET-SW
             ELSE
                 MOVE 'N'                     TO WS-CONDITION-MET-SW
           ELSE
               MOVE 'N'                       TO WS-CONDITION-MET-SW.

           PERFORM 0605-SHOW-LOOP-STATUS-MSG.

           IF WS-CONDITION-MET-SW = 'Y'
               PERFORM 0900-FINAL-MESSAGE-AND-WAIT.

           IF WS-CONDITION-MET-SW = 'N'
               PERFORM 0600-PAUSE
               GO TO 0500-PROCESS.

       0500-PROCESS-EXIT. EXIT.

      *---------------------------------------
      *    if a time of day was specified
      *       if running within 12 hours before time of day
      *           wait for time of day
      *       if running within 12 hours after time of day
      *           flag as able to run
      *---------------------------------------
       0600-CHECK-TIME-OF-DAY.
      *    get current julian day
           MOVE SPACE                         TO WS-TIME-MET-SW.
           MOVE SPACE                         TO WS-STV0400B-FIELDS.
           MOVE 'CYDDD '                      TO STV0400B-OUT.
           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.
           MOVE STV0400B-DATA(1: 4)           TO WS-CURR-CY.
           MOVE STV0400B-DATA(5: 3)           TO WS-CURR-DDD.
      *    get current military time
           MOVE SPACE                         TO WS-STV0400B-FIELDS.
           MOVE 'HMM   '                      TO STV0400B-OUT.
           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.
           MOVE STV0400B-DATA(1: 4)           TO WS-CURR-HM.
           IF WS-CURR-TIME < WS-TIME-RANGE-1
               PERFORM 0607-CHECK-SECONDS-RANGE1
           ELSE
           IF WS-CURR-TIME < WS-TIME-RANGE-2
               MOVE 'Y'                       TO WS-TIME-MET-SW
           ELSE
           IF WS-CURR-TIME < WS-TIME-RANGE-3
               PERFORM 0607-CHECK-SECONDS-RANGE3
           ELSE
               MOVE 'Y'                       TO WS-TIME-MET-SW.

      *---------------------------------------
      *    If cics is flagged as being down, or a required event
      *    has not yet occurred, issue a message to the operator
      *    that the job is waiting.
      *---------------------------------------
       0600-PAUSE.
           MOVE 'N'                           TO WS-CONDITION-MET-SW.
           ADD 1                              TO WS-DOWN-CNT.
           IF WS-DOWN-CNT < WS-MSGCNT
               CONTINUE
           ELSE
               MOVE ZERO                      TO WS-DOWN-CNT
               IF WS-CICS = 'Y'
                   PERFORM 0605-SHOW-CICS-MSG
               ELSE
               IF WS-INTERVAL-SW = 'Y'
                   AND WS-COND-PARM01-SW = 'N'
                   PERFORM 0605-SHOW-INT-MSG
               ELSE
               IF WS-MESSAGE = SPACE
                 IF WS-COND-TIME-SW = 'N'
                   IF WS-LS-JOB > SPACE
                       PERFORM 0605-SHOW-TIME-MSG
                   ELSE
                       CONTINUE
                 ELSE
                     CONTINUE
               ELSE
                   PERFORM 0605-REPLACE-SYMBOLICS
                   PERFORM 0605-SHOW-PARM02-MSG.

           PERFORM 0650-DELAY.

           PERFORM 1300-CLOSE-PARM01.
           PERFORM 1200-OPEN-PARM01.

       0605-SHOW-CICS-MSG.
           IF WS-CONSOLE = 'Y'
               DISPLAY 'CAWU151I ' WS-LS-JOB ' waiting for '
                        WS-REGION UPON CONSOLE
           ELSE
               DISPLAY '**** ' WS-LS-JOB
                       '            waiting for '  WS-REGION.

       0605-SHOW-INT-MSG.
           IF WS-CONSOLE = 'Y'
               DISPLAY 'CAWU151I ' WS-LS-JOB ' waiting for '
                       'interval time' UPON CONSOLE
           ELSE
               DISPLAY '**** ' WS-LS-JOB
                       '            waiting for interval time'.

       0605-SHOW-TIME-MSG.
           IF WS-CONSOLE = 'Y'
               DISPLAY 'CAWU151I ' WS-LS-JOB ' waiting for '
                       WS-TIME UPON CONSOLE
           ELSE
               DISPLAY '**** ' WS-LS-JOB
                       '            waiting for ' WS-TIME.

       0605-SHOW-PARM02-MSG.
           IF WS-CONSOLE = 'Y'
               DISPLAY WS-MESSAGE UPON CONSOLE
           ELSE
               DISPLAY '         '
               DISPLAY '**** ' WS-MESSAGE
               DISPLAY '         '.

       0605-SHOW-LOOP-STATUS-MSG.
           IF WS-CONDITION-MET-SW = 'N'
             IF WS-FIRST-PAUSE-SW = SPACE
                 MOVE 'N'                     TO WS-FIRST-PAUSE-SW
                 PERFORM 0610-DISPLAY.

           IF WS-TEMP-DELAY > ZERO
               DISPLAY '**** Delay adjusted to   ' WS-TEMP-DELAY
                       ' as of ' WS-DIFF-CURR(1: 2)
                       ':' WS-DIFF-CURR(3: 2) ':' WS-DIFF-CURR(5: 2).

           IF WS-COND-TIME-SW = 'Y'
             IF WS-MSG-TIME-SW = SPACE
                 MOVE 'N'                     TO WS-MSG-TIME-SW
                 IF WS-CONDITION-MET-SW = 'Y' OR SPACE
                     DISPLAY '**** Specified time ' WS-TIME ' reached'
                 ELSE
                 IF WS-COND-STRING-SW = 'N'
                     DISPLAY '**** Specified time ' WS-TIME ' reached'
                             ' but still waiting to find PARM01 string'
                 ELSE
                     DISPLAY '**** Specified time ' WS-TIME ' reached'
                             ' but still waiting on PARM01 criteria'.
           IF WS-COND-STRING-SW = 'Y'
             IF WS-MSG-STRING-SW = SPACE
                 MOVE 'N'                     TO WS-MSG-STRING-SW
                 IF WS-CONDITION-MET-SW = 'Y' OR SPACE
                     DISPLAY '**** Specified string '
                             WS-STRING(1: WS-STR-LEN) ' found'
                 ELSE
                     DISPLAY '**** Specified string found but still'
                             ' waiting on time criteria'.
           IF WS-COND-PARM01-SW = 'Y'
             IF WS-MSG-PARM01-SW = SPACE
                 MOVE 'N'                     TO WS-MSG-PARM01-SW
                 IF WS-CONDITION-MET-SW = 'Y' OR SPACE
                     DISPLAY '**** Specified PARM01 criteria met'
                 ELSE
                     DISPLAY '**** PARM01 criteria met but still'
                             ' waiting on time criteria'.

      *---------------------------------------
      *    in message, replace TTTTT with requested time
      *                replace JJJJJJJJ with job name
      *---------------------------------------
       0605-REPLACE-SYMBOLICS.
           IF WS-TIME = SPACE
               INSPECT WS-MESSAGE REPLACING ALL 'TTTTT' BY '?????'
           ELSE
               INSPECT WS-MESSAGE REPLACING ALL 'TTTTT' BY WS-TIME.
           IF WS-LS-JOB = SPACE
               INSPECT WS-MESSAGE REPLACING ALL 'JJJJJJJJ'
                       BY '????????'
           ELSE
               INSPECT WS-MESSAGE REPLACING ALL 'JJJJJJJJ'
                       BY WS-LS-JOB.

      *---------------------------------------
      *    the goal here is to have the process continue execution
      *    at the specified time, not specified time + remaining
      *    delay time.  ie: continue at the '00' second mark.
      *---------------------------------------
       0607-CHECK-SECONDS-RANGE1.
           IF WS-CURR-TIME(1: 7) = WS-TIME-RANGE-1(1: 7)
               MOVE WS-TIME-RANGE-1(8: 4)     TO WS-DIFF-TGT(1: 4)
               PERFORM 0607-CALC-SECONDS-TO-TIME.

       0607-CHECK-SECONDS-RANGE3.
           IF WS-CURR-TIME(1: 7) = WS-TIME-RANGE-3(1: 7)
               MOVE WS-TIME-RANGE-3(8: 4)     TO WS-DIFF-TGT(1: 4)
               PERFORM 0607-CALC-SECONDS-TO-TIME.

       0607-CALC-SECONDS-TO-TIME.
           MOVE FUNCTION CURRENT-DATE(9: 6)   TO WS-DIFF-CURR.
           MOVE '00'                          TO WS-DIFF-TGT(5: 2).

      *    target difference 124412  124600 = 60 + 48 = 108 secs
           COMPUTE WS-DIFF-CURR-SEC = (WS-DIFF-CURR-H * 3600)
                                    + (WS-DIFF-CURR-M * 60)
                                    + (WS-DIFF-CURR-S).
           COMPUTE WS-DIFF-TGT-SEC = (WS-DIFF-TGT-H * 3600)
                                   + (WS-DIFF-TGT-M * 60).
           COMPUTE WS-DIFF-SEC = WS-DIFF-TGT-SEC - WS-DIFF-CURR-SEC.
           IF WS-DIFF-SEC < WS-DELAY
               MOVE WS-DIFF-SEC               TO WS-TEMP-DELAY.

       0610-DISPLAY.
           IF WS-CICS = 'Y'
               DISPLAY '**** CICS delay          ' WS-CICS.
           DISPLAY '**** Delay seconds       ' WS-DELAY.
           DISPLAY '**** Delays per message  ' WS-MSGCNT.
           IF WS-REVERSE = 'Y'
               DISPLAY '**** Reverse switch      ' WS-REVERSE.
           IF WS-CICS = 'Y'
               DISPLAY '**** CICS stagger        ' WS-STAGMULT
               PERFORM 0700-INCREMENT-TRACKING-NBR.
           IF WS-STRING NOT = SPACE
               PERFORM 0610-DISPLAY-STRING.

       0610-DISPLAY-STRING.
           DISPLAY '**** Search string       ' WS-STRING.
           IF WS-STR-POS > ZERO
               DISPLAY '****   at position       ' WS-STR-POS.
           DISPLAY '****    for length       ' WS-STR-LEN.
           IF WS-STR-TOP > ZERO
               DISPLAY '****     from record     ' WS-STR-TOP.
           IF WS-STR-BOT > ZERO
               DISPLAY '****       to record     ' WS-STR-BOT.

       0610-TEST-INTERVAL.
           IF WS-INTERVAL-SW = SPACE
               PERFORM 0610-READ-INTERVAL-TABLE
                   VARYING WS-SUB1 FROM 1 BY 1
                   UNTIL WS-SUB1 > 19.

       0610-READ-INTERVAL-TABLE.
           IF WS-ALPHA(WS-SUB1) = PARM01-UP-DOWN
              MOVE WS-MIN(WS-SUB1)            TO WS-INTERVAL
              MOVE 'Y'                        TO WS-INTERVAL-SW.

      *---------------------------------------
      *    If interval processing requested via an alphabetic value
      *    in PARM01, calculate the time such that each job does
      *    not run closer than ## minutes apart as specified in the
      *    interval table.
      *---------------------------------------
       0610-DELAY-INTERVAL.
           MOVE FUNCTION CURRENT-DATE(9: 6)   TO WS-DIFF-CURR.
           MOVE 'Y'                           TO WS-INT-DELAYED-SW.
           MOVE ZERO                          TO WS-TEMP-DELAY.
      *    get current time
           MOVE SPACE                         TO WS-STV0400B-FIELDS.
           MOVE 'HMSM  '                      TO STV0400B-OUT.
           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.
           MOVE STV0400B-ERROR                TO WS-1-HMS.
      *    get julian day
           MOVE SPACE                         TO WS-STV0400B-FIELDS.
           MOVE 'DDD   '                      TO STV0400B-OUT.
           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.
           MOVE STV0400B-DATA(1: 3)           TO WS-DDD.
           DISPLAY '**** Interval processing '.
           DISPLAY '****   Julian day        ' WS-DDD.
           PERFORM 1200-OPEN-TRACK1.
           IF WS-RETURN-CODE = ZERO
               MOVE 'Y'                       TO WS-TRACK1-SW
               PERFORM 0620-READ-TRACK1
                   UNTIL WS-TRACK1-SW = 'N'
               PERFORM 1300-CLOSE-TRACK1
               PERFORM 0620-CHECK-EMPTY-TRACK1.

       0620-READ-TRACK1.
           READ TRACK1.
           IF WS-STAT = 10
               MOVE 'N'                       TO WS-TRACK1-SW
           ELSE
           IF TRACK1-REGION = 'WAIT'
             IF TRACK1-TIME NUMERIC
                 ADD 1                        TO WS-TRACK1-RCD-CNT
                 PERFORM 0630-ADVANCE-TIME
                 DISPLAY '****   Jobtrack time     '
                         TRACK1-TIME(1: 2) ':' TRACK1-TIME(3: 2)
                         ':' TRACK1-TIME(5: 2)
                 DISPLAY '****   Delay interval    ' WS-INTERVAL
                 MOVE WS-1-HMS(5: 2)          TO WS-2-S
                 DISPLAY '****   Delay target      '
                         WS-2-HMS(1: 2) ':' WS-2-HMS(3: 2)
                         ':' WS-2-HMS(5: 2)
      *    New day - reset values
                 IF WS-DDD NOT = TRACK1-NBR
                     MOVE WS-1-HMS            TO TRACK1-TIME
                     MOVE WS-DDD              TO TRACK1-NBR
                     REWRITE TRACK1-RECORD
                     MOVE 'N'                 TO WS-TRACK1-SW
                     DISPLAY '****   New day - tracking time reset'
                 ELSE
      *    Running after calc'd delay timeout
                 IF WS-1-HMS > WS-2-HMS
                     MOVE WS-1-HMS            TO TRACK1-TIME
                     REWRITE TRACK1-RECORD
                     MOVE 'N'                 TO WS-TRACK1-SW
                 ELSE
      *    Running before calc'd delay timeout
                     PERFORM 0640-GET-TIME-DIFF
                     MOVE WS-2-HMS            TO TRACK1-TIME
                     REWRITE TRACK1-RECORD
                     MOVE 'N'                 TO WS-TRACK1-SW
             ELSE
                 ADD 1                        TO WS-TRACK1-RCD-CNT
           ELSE
               ADD 1                          TO WS-TRACK1-RCD-CNT
               IF TRACK1-REGION = SPACE
                   MOVE 'WAIT'                TO TRACK1-REGION
                   MOVE WS-1-HMS              TO TRACK1-TIME
                   MOVE WS-DDD                TO TRACK1-NBR
                   MOVE 'N'                   TO WS-TRACK1-SW
                   REWRITE TRACK1-RECORD
                   DISPLAY '****   TRACK1 empty - tracking time'
                           ' initialized'.

       0620-CHECK-EMPTY-TRACK1.
           IF WS-TRACK1-RCD-CNT = ZERO
               DISPLAY '****   TRACK1 empty - manually add a single'
                       ' blank record to TRACK1'.

       0630-ADVANCE-TIME.
           MOVE SPACE                         TO WS-STV0400B-FIELDS.
           MOVE TRACK1-TIME                   TO STV0400B-ERROR.
           MOVE 'HMSM  '                      TO STV0400B-IN.
           MOVE 'I00000'                      TO STV0400B-OUT.
           MOVE WS-INTERVAL                   TO STV0400B-OUT(4: 3).
           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.
           MOVE STV0400B-ERROR                TO WS-2-HMS.

       0640-GET-TIME-DIFF.
           MOVE SPACE                         TO WS-STV0400B-FIELDS.
           MOVE WS-1-HMS                      TO STV0400B-ERROR.
           MOVE WS-2-HMS                      TO STV0400B-DATA2.
           MOVE 'HMSM  '                      TO STV0400B-IN.
           MOVE 'MIN   '                      TO STV0400B-OUT.
           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.
           MOVE STV0400B-ERROR                TO WS-TEMP-DELAY.
           IF WS-TEMP-DELAY > 10
             IF WS-CONSOLE = 'Y'
                 DISPLAY 'CAWU151I ' WS-LS-JOB ' delaying '
                         WS-TEMP-DELAY ' minutes ' UPON CONSOLE
                 COMPUTE WS-TEMP-DELAY = WS-TEMP-DELAY * 60
             ELSE
                 DISPLAY '****   ' WS-LS-JOB '          delaying '
                         WS-TEMP-DELAY ' minutes '
                 COMPUTE WS-TEMP-DELAY = WS-TEMP-DELAY * 60
           ELSE
           IF WS-TEMP-DELAY > ZERO
               COMPUTE WS-TEMP-DELAY = WS-TEMP-DELAY * 60.

       0650-DELAY.
           IF WS-TEMP-DELAY > ZERO
               MOVE WS-TEMP-DELAY             TO NEWWAIT-DELAY
               CALL 'NEWWAIT' USING NEWWAIT-DATA
               ADD WS-TEMP-DELAY              TO WS-WAIT-SECONDS
               MOVE ZERO                      TO WS-TEMP-DELAY
           ELSE
               MOVE WS-DELAY                  TO NEWWAIT-DELAY
               CALL 'NEWWAIT' USING NEWWAIT-DATA
               ADD WS-DELAY                   TO WS-WAIT-SECONDS.
           MOVE 'Y'                           TO WS-PAUSE-SW.

      *---------------------------------------
      *    Increment the high-nbr.  This is used when calculating
      *    a delay time after cics comes back up, so that all
      *    jobs do not run at once.
      *---------------------------------------
       0700-INCREMENT-TRACKING-NBR.
           MOVE ZERO                          TO WS-HIGH-NBR.
           PERFORM 1200-OPEN-TRACK1.
           IF WS-RETURN-CODE = ZERO
               MOVE 'Y'                       TO WS-TRACK1-SW
               PERFORM 0800-READ-TRACK1
                   UNTIL WS-TRACK1-SW = 'N'
               PERFORM 1300-CLOSE-TRACK1.

       0800-READ-TRACK1.
           READ TRACK1.
           IF WS-STAT = 10
               MOVE 'N'                       TO WS-TRACK1-SW
           ELSE
           IF TRACK1-REGION = WS-REGION
             IF TRACK1-NBR NUMERIC
                 MOVE TRACK1-NBR              TO WS-HIGH-NBR
                 ADD 1                        TO WS-HIGH-NBR
                 MOVE WS-HIGH-NBR             TO TRACK1-NBR
                 REWRITE TRACK1-RECORD
                 MOVE 'N'                     TO WS-TRACK1-SW
                 DISPLAY '**** Restart sequence    ' WS-HIGH-NBR.

      *---------------------------------------
      *    let the operator know that the job will continue
      *    (once the job knows that it can)
      *
      *    calculate total time program was in wait state
      *    wait 'postwait' time if specified
      *---------------------------------------
       0900-FINAL-MESSAGE-AND-WAIT.
           IF WS-CICS = 'N'
               MOVE WS-POSTWAIT               TO NEWWAIT-DELAY
           ELSE
           IF WS-HIGH-NBR = ZERO
               MOVE WS-DELAY                  TO NEWWAIT-DELAY
           ELSE
               COMPUTE WS-HIGH-LONG = WS-HIGH-NBR * WS-STAGMULT
               MOVE WS-HIGH-LONG              TO NEWWAIT-DELAY.
           IF NEWWAIT-DELAY > 120
               DIVIDE NEWWAIT-DELAY BY 60 GIVING WS-WAIT-REMAIN
               IF WS-CONSOLE = 'Y'
                   DISPLAY 'CAWU152I ' WS-LS-JOB ' will continue in '
                            WS-WAIT-REMAIN ' minutes' UPON CONSOLE
               ELSE
                   DISPLAY '**** ' WS-LS-JOB
                           '            will continue in '
                           WS-WAIT-REMAIN ' minutes'
           ELSE
           IF WS-LS-JOB > SPACE
             IF NEWWAIT-DELAY > ZERO
               IF WS-CONSOLE = 'Y'
                   DISPLAY 'CAWU151I ' WS-LS-JOB ' continuing '
                           'after ' NEWWAIT-DELAY ' seconds'
                           UPON CONSOLE
               ELSE
                   DISPLAY '**** ' WS-LS-JOB
                           '            continuing '
                           'after ' NEWWAIT-DELAY ' seconds'
             ELSE
             IF WS-CONSOLE = 'Y'
                 DISPLAY 'CAWU151I ' WS-LS-JOB ' continuing '
                     UPON CONSOLE
             ELSE
                 DISPLAY '**** ' WS-LS-JOB '            continuing '.

           IF NEWWAIT-DELAY > ZERO
               CALL 'NEWWAIT' USING NEWWAIT-DATA.
           ADD NEWWAIT-DELAY                  TO WS-WAIT-SECONDS.

      *---------------------------------------
      *    Load PARM02 (whose values are used only
      *    when waiting is required)
      *---------------------------------------
       1000-LOAD-PARM02.
           PERFORM 1200-OPEN-PARM02.
           IF WS-RETURN-CODE = ZERO
               PERFORM 1400-LOAD-PARM02 THRU
                       1400-LOAD-PARM02-EXIT
               PERFORM 1400-FINISH-PARM02-VALUES
               PERFORM 1300-CLOSE-PARM02.

       1200-OPEN-PARM01.
           OPEN INPUT PARM01.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** MIS0655B open error on PARM01'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0200                     TO WS-RETURN-CODE.

       1200-OPEN-PARM02.
           OPEN INPUT PARM02.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** MIS0655B open error on PARM02'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0200                     TO WS-RETURN-CODE.

       1200-OPEN-TRACK1.
           OPEN I-O   TRACK1.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** MIS0655B open error on TRACK1'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0201                     TO WS-RETURN-CODE.

       1300-CLOSE-TRACK1.
           CLOSE TRACK1.

       1300-CLOSE-PARM01.
           CLOSE PARM01.

       1300-CLOSE-PARM02.
           CLOSE PARM02.

       1400-LOAD-PARM02.
           READ PARM02.
           IF WS-STAT = 10
               GO TO 1400-LOAD-PARM02-EXIT
           ELSE
           IF WS-STAT > ZERO
               DISPLAY '**** MIS0655B read error on PARM02'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +1400                     TO WS-RETURN-CODE
               GO TO 1400-LOAD-PARM02-EXIT.

           IF PARM02-DOCU = '*'
               GO TO 1400-LOAD-PARM02.

           INSPECT PARM02-CMD
               CONVERTING 'abcdefghijklmnopqrstuvwxyz' TO
                          'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.
           IF PARM02-CMD = 'CICS'
             IF PARM02-01-VALUE = 'Y' OR 'N' OR 'y' OR 'n'
                 MOVE PARM02-01-VALUE         TO WS-CICS
             ELSE
                 MOVE 'Y'                     TO WS-CICS.
           IF PARM02-CMD = 'MSGCNT'
             IF PARM02-02-VALUE NUMERIC
                 MOVE PARM02-02-VALUE         TO WS-MSGCNT
             ELSE
                 MOVE 30                      TO WS-MSGCNT.
           IF PARM02-CMD = 'DELAY'
             IF PARM02-05-VALUE NUMERIC
                 MOVE PARM02-05-VALUE         TO WS-DELAY
             ELSE
                 MOVE 00120                   TO WS-DELAY.
           IF PARM02-CMD = 'MESSAGE'
               MOVE PARM02-VALUE              TO WS-MESSAGE.
           IF PARM02-CMD = 'STAGMULT'
             IF PARM02-03-VALUE NUMERIC
                 MOVE PARM02-03-VALUE         TO WS-STAGMULT
             ELSE
                 MOVE 400                     TO WS-STAGMULT.
           IF PARM02-CMD = 'MAXLOOP'
             IF PARM02-03-VALUE NUMERIC
                 MOVE PARM02-03-VALUE         TO WS-MAX-LOOP
             ELSE
                 MOVE ZERO                    TO WS-MAX-LOOP.
           IF PARM02-CMD = 'MAXLOOPCODE'
             IF PARM02-04-VALUE NUMERIC
                 MOVE PARM02-04-VALUE         TO WS-LOOP-CODE-N
                 IF WS-LOOP-CODE-N > 4095
                     DISPLAY '**** Maxloopcode > 4095 '
                     MOVE 0008                TO WS-LOOP-CODE-N
                 ELSE
                     CONTINUE
             ELSE
             IF PARM02-04-VALUE = 'ABND'
                 MOVE PARM02-04-VALUE         TO WS-LOOP-CODE
             ELSE
                 MOVE ZERO                    TO WS-LOOP-CODE-N.
           IF PARM02-CMD = 'POSTWAIT'
             IF PARM02-05-VALUE NUMERIC
                 MOVE PARM02-05-VALUE         TO WS-POSTWAIT
             ELSE
                 MOVE ZERO                    TO WS-POSTWAIT.
           IF PARM02-CMD = 'REVERSE'
             IF PARM02-01-VALUE = 'Y' OR 'y'
                 MOVE 'Y'                     TO WS-REVERSE
             ELSE
                 MOVE SPACE                   TO WS-REVERSE.
           IF PARM02-CMD = 'TIME'
               MOVE SPACE                     TO WS-TIME-SW
               IF PARM02-05-VALUE = SPACE
                   CONTINUE
               ELSE
                   PERFORM 1500-DETERMINE-TIME-RANGE THRU
                           1500-TIME-RANGE-EXIT.
           IF PARM02-CMD = 'STRING'
             IF PARM02-03-VALUE NUMERIC
                 AND PARM02-03-5X7 NUMERIC
                 AND PARM02-03-9X11 NUMERIC
                 MOVE PARM02-03-VALUE         TO WS-STR-POS
                 MOVE PARM02-03-5X7           TO WS-STR-TOP
                 MOVE PARM02-03-9X11          TO WS-STR-BOT
                 IF WS-STR-POS > 80
                     DISPLAY '**** String position > 80 ...'
                     DISPLAY '**** ignoring string statement'
                     MOVE SPACE               TO WS-STRING
                 ELSE
                     MOVE PARM02-STRING       TO WS-STRING.
           IF PARM02-CMD = 'CONSOLE'
             IF PARM02-01-VALUE = 'Y' OR 'N' OR 'y' OR 'n'
                 MOVE PARM02-01-VALUE         TO WS-CONSOLE
             ELSE
                 MOVE 'Y'                     TO WS-CONSOLE.

           GO TO 1400-LOAD-PARM02.

       1400-LOAD-PARM02-EXIT. EXIT.

       1400-FINISH-PARM02-VALUES.
           IF WS-DELAY < 20
               MOVE 20                        TO WS-DELAY.
           IF WS-STAGMULT < 60
               MOVE 60                        TO WS-STAGMULT.
           INSPECT WS-CICS
               CONVERTING 'ny' TO 'NY'.
           INSPECT WS-CONSOLE
               CONVERTING 'ny' TO 'NY'.
           MOVE WS-MSGCNT                     TO WS-DOWN-CNT.

       1500-DETERMINE-TIME-RANGE.
      *    get current julian day
           MOVE PARM02-05-VALUE               TO WS-TIME.
           MOVE SPACE                         TO WS-STV0400B-FIELDS.
           MOVE 'CYDDD '                      TO STV0400B-OUT.
           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.
           MOVE STV0400B-DATA(1: 4)           TO WS-CURR-CY.
           MOVE STV0400B-DATA(5: 3)           TO WS-CURR-DDD.
      *    capture hour from static parm
           IF PARM02-05-VALUE(1: 2) NUMERIC
               MOVE PARM02-05-VALUE(1: 2)     TO WS-CURR-H
               IF WS-CURR-H > 23
                   DISPLAY '**** MIS0655B hour > 23 '
                   MOVE +1500                 TO WS-RETURN-CODE
                   GO TO 1500-TIME-RANGE-EXIT
               ELSE
                   CONTINUE
           ELSE
               DISPLAY '**** MIS0655B time not numeric '
               MOVE +1500                     TO WS-RETURN-CODE
               GO TO 1500-TIME-RANGE-EXIT.
      *    capture minute from static parm
           IF PARM02-05-VALUE(4: 2) NUMERIC
               MOVE PARM02-05-VALUE(4: 2)     TO WS-CURR-M
               IF WS-CURR-M > 59
                   DISPLAY '**** MIS0655B minute > 59 '
                   MOVE +1500                 TO WS-RETURN-CODE
                   GO TO 1500-TIME-RANGE-EXIT
               ELSE
                   CONTINUE
           ELSE
               DISPLAY '**** MIS0655B time not numeric '
               MOVE +1500                     TO WS-RETURN-CODE
               GO TO 1500-TIME-RANGE-EXIT.
           MOVE WS-CURR-TIME                  TO WS-TIME-RANGE-1.
           PERFORM 1500-FIND-12-HOURS-FORWARD.
           MOVE WS-CURR-TIME                  TO WS-TIME-RANGE-2.
           PERFORM 1500-FIND-12-HOURS-FORWARD.
           MOVE WS-CURR-TIME                  TO WS-TIME-RANGE-3.
           MOVE 'Y'                           TO WS-TIME-SW.
           DISPLAY '                         cy   ddd time'.
           DISPLAY '**** Wait if before      ' WS-TIME-RANGE-1(1: 4)
                 ' ' WS-TIME-RANGE-1(5: 3) ' ' WS-TIME-RANGE-1(8: 2)
                 ':' WS-TIME-RANGE-1(10: 2).
           DISPLAY '**** Run if before       ' WS-TIME-RANGE-2(1: 4)
                 ' ' WS-TIME-RANGE-2(5: 3) ' ' WS-TIME-RANGE-2(8: 2)
                 ':' WS-TIME-RANGE-2(10: 2).
           DISPLAY '**** Wait if before      ' WS-TIME-RANGE-3(1: 4)
                 ' ' WS-TIME-RANGE-3(5: 3) ' ' WS-TIME-RANGE-3(8: 2)
                 ':' WS-TIME-RANGE-3(10: 2).

       1500-TIME-RANGE-EXIT. EXIT.

      *---------------------------------------
      *    calculate time 12 hours forward.
      *    returns WS-CURR-TIME with julian day and hour/minute.
      *---------------------------------------
       1500-FIND-12-HOURS-FORWARD.
           MOVE SPACE                         TO WS-STV0400B-FIELDS.
           MOVE WS-CURR-HM                    TO STV0400B-DATA(1: 4).
           MOVE '00'                          TO STV0400B-DATA(5: 2).
           MOVE 'HMSM  '                      TO STV0400B-IN.
           MOVE 'I00720'                      TO STV0400B-OUT.
           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.
           MOVE STV0400B-DATA(1: 4)           TO WS-CURR-HM.
           IF STV0400B-DATA(7: 2) = '01'
               MOVE SPACE                     TO WS-STV0400B-FIELDS
               MOVE '+00001'                  TO STV0400B-OUT
               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS
               MOVE 'CYMD  '                  TO STV0400B-IN
               MOVE 'CYDDD '                  TO STV0400B-OUT
               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS
               MOVE STV0400B-DATA(1: 4)       TO WS-CURR-CY
               MOVE STV0400B-DATA(5: 3)       TO WS-CURR-DDD.

      *---------------------------------------
      *    search PARM01 for a string - read all parm01
      *    records to eof.
      *---------------------------------------
       1600-SEARCH-PARM01.
           ADD 1                              TO WS-SEARCH-CNT.
           MOVE SPACE                         TO WS-STR-FND-SW.
           IF WS-FIRST-STR-SW = SPACE
               MOVE 'N'                       TO WS-FIRST-STR-SW
               PERFORM 1600-FIND-TRAILING-SPACES
               COMPUTE WS-STR-MAX = 81 - WS-STR-LEN
               IF WS-STR-POS + WS-STR-LEN > 81
                   DISPLAY '**** String position + length goes past'
                           ' end of record'
                   DISPLAY '**** ignoring string statement'
                   MOVE SPACE                 TO WS-STRING
                   GO TO 1600-SEARCH-PARM01-EXIT.

           IF WS-STR-TOP = ZERO
               AND WS-STR-BOT = ZERO
               PERFORM 1600-SEARCH-RCD
           ELSE
           IF WS-STR-TOP = ZERO
             IF WS-SEARCH-CNT > WS-STR-BOT
                 CONTINUE
             ELSE
                 PERFORM 1600-SEARCH-RCD
           ELSE
           IF WS-STR-BOT = ZERO
             IF WS-SEARCH-CNT < WS-STR-TOP
                 CONTINUE
             ELSE
                 PERFORM 1600-SEARCH-RCD
           ELSE
           IF WS-SEARCH-CNT < WS-STR-TOP
               OR WS-SEARCH-CNT > WS-STR-BOT
               CONTINUE
           ELSE
               PERFORM 1600-SEARCH-RCD.

           IF WS-STR-FND-SW = SPACE
               READ PARM01
               IF WS-STAT = ZERO
                   GO TO 1600-SEARCH-PARM01.

       1600-SEARCH-PARM01-EXIT. EXIT.

       1600-SEARCH-RCD.
           IF WS-STR-POS = ZERO
               PERFORM VARYING WS-SUB1 FROM 1 BY 1
                   UNTIL WS-SUB1 > WS-STR-MAX
                   IF PARM01-RECORD(WS-SUB1: WS-STR-LEN)
                                          = WS-STRING(1: WS-STR-LEN)
                       MOVE 'Y'               TO WS-STR-FND-SW
                   END-IF
               END-PERFORM
           ELSE
           IF PARM01-RECORD(WS-STR-POS: WS-STR-LEN)
                                          = WS-STRING(1: WS-STR-LEN)
               MOVE 'Y'                       TO WS-STR-FND-SW.

       1600-FIND-TRAILING-SPACES.
           PERFORM VARYING WS-SUB1 FROM 30 BY -1
               UNTIL WS-SUB1 < 1
               IF WS-STRING(WS-SUB1: 1) NOT = SPACE
                   MOVE WS-SUB1               TO WS-STR-LEN
                   MOVE ZERO                  TO WS-SUB1
               END-IF
           END-PERFORM.

      ************************************ END MIS0655B
