
       TITLE '  MIS0133B: after 133 byte lrecl files'.
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    MIS0133B.
      ******************************************************************
      *@@@ II alter printed reports
      ******************************************************************
      *
      *  I am interested in knowing if/where these programs
      *  are in use.     Email:  jiannon@me.com
      *
      ******************************************************************
      * Date written: 04/18/2000
      * Author      : Jim Iannone
      *
      *      Alter report data so that the Xerox laser printer
      *      will correctly handle the offset
      *
      *      Load a 100 line table of report lines from the bottom
      *      to the top until full.  While doing so, scan the data to
      *      find a string specified in the parm.  If found, either
      *      update the same or a different record in the table
      *      (above or below where the string was found), or
      *      insert a record from another file.
      *
      *      Continue to read INFILE, insert INFILE record at
      *      bottom of table, and search for strings, etc.
      *
      *      As the table fills, write the lines from the top of
      *      the table to OUTFILE.  When EOF is reached on INFILE,
      *      place '*EOF*' in the table  - check for '*EOF*' when
      *      writing OUTFILE - end processing when found.
      *
      ******************************************************************
      *
      * Example:   Search for ' 1 ' in pos 83
      *            when found, place '.' in pos 85 of line minus 2
      *
      *123456789012 LL PPP  OF+ 123456789012 LL PPP I
      * 1           03 083  02- .            01 085 0
      *
      *
      * Example:   Search for 'TIME:'
      *            when found, insert record 2 from dd inrcd
      *
      *123456789012 LL PPP  OF+ 123456789012 LL PPP I
      *TIME:        05 000  00+              00 000 2
      *
      *
      ******************************************************************

       ENVIRONMENT DIVISION.

       CONFIGURATION SECTION.
       SPECIAL-NAMES.

       INPUT-OUTPUT SECTION.
       FILE-CONTROL.

           SELECT INFILE               ASSIGN TO INFILE
                                       ORGANIZATION IS SEQUENTIAL
                                       ACCESS MODE IS SEQUENTIAL
                                       FILE STATUS IS WS-STAT.

           SELECT INRCD                ASSIGN TO INRCD
                                       ORGANIZATION IS SEQUENTIAL
                                       ACCESS MODE IS SEQUENTIAL
                                       FILE STATUS IS WS-STAT.

           SELECT OUTFILE              ASSIGN TO OUTFILE
                                       ORGANIZATION IS SEQUENTIAL
                                       ACCESS MODE IS SEQUENTIAL
                                       FILE STATUS IS WS-STAT.

           SELECT PARM01               ASSIGN TO PARM01
                                       ORGANIZATION IS SEQUENTIAL
                                       ACCESS MODE IS SEQUENTIAL
                                       FILE STATUS IS WS-STAT.

       DATA DIVISION.
       FILE SECTION.

       FD  INFILE
           RECORDING MODE F.
       01  INFILE-RECORD.
           05  INFILE-RCD              PIC  X(133).

       FD  INRCD
           RECORDING MODE F.
       01  INRCD-RECORD.
           05  INRCD-RCD               PIC  X(133).

       FD  OUTFILE
           RECORDING MODE F.
       01  OUTFILE-RECORD.
           05  OUTFILE-RCD             PIC  X(133).

       FD  PARM01
           RECORDING MODE F.
       01  PARM01-RECORD.
           05  PARM01-DOCU             PIC  X.
           05  PARM01-DATA             PIC  X(12).
           05  FILLER                  PIC  X.
           05  PARM01-LEN              PIC  XX.
           05  FILLER                  PIC  X.
           05  PARM01-POS              PIC  XXX.
           05  FILLER                  PIC  XX.
           05  PARM01-OFFSET           PIC  XX.
           05  PARM01-REL-LOC          PIC  X.
           05  FILLER                  PIC  X.
           05  PARM01-INS-DATA         PIC  X(12).
           05  FILLER                  PIC  X.
           05  PARM01-INS-LEN          PIC  XX.
           05  FILLER                  PIC  X.
           05  PARM01-INS-POS          PIC  XXX.
           05  FILLER                  PIC  X.
           05  PARM01-INS-RCD          PIC  X.
           05  FILLER                  PIC  X(25).
           05  FILLER                  PIC  X(08).

       WORKING-STORAGE SECTION.

       01  WS-START.
           05  FILLER                  PIC  X(32)    VALUE
               ' Working storage MIS0133B start '.

       01  WS-WORK-FIELDS.
           05  WS-STAT                 PIC  99       VALUE ZERO.
           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.
           05  WS-PARM01-MAX           PIC  9(05)    VALUE ZERO.
           05  WS-INRCD-MAX            PIC  9(05)    VALUE ZERO.
           05  WS-F-MAX                PIC  9(05)    VALUE ZERO.
           05  WS-HLEN                 PIC  99       VALUE ZERO.
           05  WS-HPOS                 PIC  999      VALUE ZERO.
           05  WS-HOFF                 PIC  99       VALUE ZERO.
           05  WS-HILEN                PIC  99       VALUE ZERO.
           05  WS-HIPOS                PIC  999      VALUE ZERO.
           05  WS-HIRCD                PIC  9        VALUE ZERO.
           05  WS-HREL                 PIC  X        VALUE SPACE.
           05  WS-HDATA                PIC  X(12)    VALUE SPACE.
           05  WS-HIDATA               PIC  X(12)    VALUE SPACE.
           05  WS-INFILE-RCD           PIC  X(133)   VALUE SPACE.

       01  WS-COUNT-FIELDS             COMP-3.
           05  WS-READ-RCD-CNT         PIC S9(07)    VALUE ZERO.
           05  WS-WRITE-RCD-CNT        PIC S9(07)    VALUE ZERO.
           05  WS-INS-RCD-CNT          PIC S9(07)    VALUE ZERO.
           05  WS-OVERLAY-CNT          PIC S9(07)    VALUE ZERO.

       01  WS-SUBSCRIPTS               COMP.
           05  WS-SUB1                 PIC S9(05)    VALUE ZERO.
           05  WS-SUB2                 PIC S9(05)    VALUE ZERO.
           05  WS-SUB3                 PIC S9(05)    VALUE ZERO.
           05  WS-LOW                  PIC S9(05)    VALUE ZERO.
           05  WS-MAX                  PIC S9(05)    VALUE ZERO.
           05  WS-MIN                  PIC S9(05)    VALUE ZERO.
           05  WS-HIGH                 PIC S9(05)    VALUE ZERO.
           05  WS-FROM                 PIC S9(05)    VALUE ZERO.
           05  WS-TO                   PIC S9(05)    VALUE ZERO.
           05  WS-WORK1                PIC S9(05)    VALUE ZERO.

       01  WS-TABLES.
           05  WS-LINE-TABLE                         VALUE SPACE.
               10  WS-PAGE             OCCURS 100 TIMES.
                   15  WS-FLAG         PIC  X.
                   15  WS-CHNG         PIC  X.
                   15  WS-LINE         PIC  X(133).
           05  WS-INRCD-TABLE                        VALUE SPACE.
               10  WS-INRCD            PIC  X(133)
                                       OCCURS 9 TIMES.
           05  WS-PARM-TABLE                         VALUE SPACE.
               10  WS-PARM             OCCURS 20 TIMES.
                   15  WS-DATA         PIC  X(12).
                   15  WS-LEN          PIC  99.
                   15  WS-POS          PIC  999.
                   15  WS-OFF          PIC  99.
                   15  WS-REL          PIC  X.
                   15  WS-IDATA        PIC  X(12).
                   15  WS-ILEN         PIC  99.
                   15  WS-IPOS         PIC  999.
                   15  WS-IRCD         PIC  9.

       01  WS-SWITCHES.
           05  WS-END-INFILE-SW        PIC  X        VALUE 'N'.
               88  END-OF-INFILE                     VALUE 'Y'.
               88  MORE-INFILE-RCDS                  VALUE 'N'.
           05  WS-END-OUTFILE-SW       PIC  X        VALUE 'N'.
               88  END-OF-OUTFILE                    VALUE 'Y'.
               88  MORE-OUTFILE-RCDS                 VALUE 'N'.
           05  WS-FOUND-SW             PIC  X        VALUE 'N'.
           05  WS-OVERLAY-SW           PIC  X        VALUE 'N'.
           05  WS-INSERT-SW            PIC  X        VALUE 'N'.

       01  WS-STV0400B-FIELDS.
           05  STV0400B-DATA           PIC  X(10)   VALUE SPACE.
           05  FILLER REDEFINES STV0400B-DATA.
               10  STV0400B-ERROR      PIC  X(06).
               10  STV0400B-NBR        PIC  X(04).
           05  FILLER REDEFINES STV0400B-DATA.
               10  STV0400B-CYMD       PIC  X(08).
               10  FILLER              PIC  XX.
           05  FILLER REDEFINES STV0400B-DATA.
               10  STV0400B-DAYS       PIC  X(05).
               10  FILLER              PIC  X(05).
           05  FILLER REDEFINES STV0400B-DATA.
               10  STV0400B-DAY        PIC  X(09).
               10  STV0400B-DAY-NBR    PIC  X.
           05  STV0400B-DATA2          PIC  X(10)   VALUE SPACE.
           05  STV0400B-IN             PIC  X(06)   VALUE SPACE.
           05  STV0400B-OUT            PIC  X(06)   VALUE SPACE.

       01  WS-END.
           05  FILLER                  PIC  X(16)    VALUE
               '  MIS0133B END  '.

       LINKAGE SECTION.

       01  PARM-FIELD.
           05  PARM-LENGTH             PIC S9(04)    COMP.
           05  PARM-PARM               PIC  X(10).

      /
       PROCEDURE DIVISION USING PARM-FIELD.

       0100-PROGRAM-ENTRY.
           DISPLAY '      '.
           DISPLAY '**** MIS0133B alter lrecl 133 records'.
           PERFORM 0200-OPEN-FILES.

           IF WS-RETURN-CODE = ZERO
               PERFORM 0000-PROCESS-INFILE.

           DISPLAY '**** Records in INFILE   ' WS-READ-RCD-CNT.
           DISPLAY '**** Records written     ' WS-WRITE-RCD-CNT.
           DISPLAY '**** Records overlayed   ' WS-OVERLAY-CNT.
           DISPLAY '**** Records inserted    ' WS-INS-RCD-CNT.
           DISPLAY '**** Records in INRCD    ' WS-INRCD-MAX.

           IF WS-RETURN-CODE = ZERO
               PERFORM 0300-CLOSE-FILES
           ELSE
               DISPLAY '**** MIS0133B cond code ' WS-RETURN-CODE
                       ' sent by program'
               MOVE WS-RETURN-CODE            TO RETURN-CODE.

           DISPLAY '**** MIS0133B EOJ encountered '.
           DISPLAY '      '.

           STOP RUN.

       0200-OPEN-FILES.
           OPEN INPUT  INFILE.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** MIS0133B open error on INFILE'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0200                     TO WS-RETURN-CODE.
           OPEN INPUT  INRCD.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** MIS0133B open error on INRCD'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0201                     TO WS-RETURN-CODE.
           OPEN INPUT  PARM01.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** MIS0133B open error on PARM01'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0202                     TO WS-RETURN-CODE.
           OPEN OUTPUT OUTFILE.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** MIS0133B open error on OUTFILE'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0201                     TO WS-RETURN-CODE.

       0300-CLOSE-FILES.
           CLOSE OUTFILE.
           CLOSE PARM01.
           CLOSE INRCD.
           CLOSE INFILE.

       0000-PROCESS-INFILE.
           IF WS-RETURN-CODE = ZERO
               MOVE ZERO                      TO WS-SUB1
               PERFORM 0000-LOAD-INRCD THRU
                       0000-LOAD-INRCD-EXIT.
           IF WS-RETURN-CODE = ZERO
               MOVE ZERO                      TO WS-SUB1
               PERFORM 0000-LOAD-PARM01 THRU
                       0000-LOAD-PARM01-EXIT.
           MOVE ZERO                          TO WS-READ-RCD-CNT.
           IF WS-RETURN-CODE = ZERO
               MOVE ZERO                      TO WS-SUB1 WS-SUB2
               MOVE 1                         TO WS-HIGH
               MOVE 2                         TO WS-LOW
               MOVE 80                        TO WS-MAX
               MOVE 2                         TO WS-MIN
               PERFORM 0000-SELECT THRU
                       0000-SELECT-EXIT
                       UNTIL END-OF-OUTFILE.

      ****************************************
      *    load INRCD
      ****************************************
       0000-LOAD-INRCD.
           READ INRCD.
           IF WS-STAT = 10
               MOVE WS-SUB1                   TO WS-INRCD-MAX
               GO TO 0000-LOAD-INRCD-EXIT
           ELSE
           IF WS-STAT > ZERO
               DISPLAY '**** MIS0133B read error on INRCD'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0300                     TO WS-RETURN-CODE
               GO TO 0000-LOAD-INRCD-EXIT.

           IF WS-SUB1 < 9
               ADD 1                          TO WS-SUB1
               MOVE INRCD-RCD                 TO WS-INRCD(WS-SUB1).

           GO TO 0000-LOAD-INRCD.

       0000-LOAD-INRCD-EXIT. EXIT.

      ****************************************
      *    load PARM01
      ****************************************
       0000-LOAD-PARM01.
           READ PARM01.
           IF WS-STAT = 10
               MOVE WS-SUB1                   TO WS-PARM01-MAX
               GO TO 0000-LOAD-PARM01-EXIT
           ELSE
           IF WS-STAT > ZERO
               DISPLAY '**** MIS0133B read error on PARM01'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0700                     TO WS-RETURN-CODE
               GO TO 0000-LOAD-PARM01-EXIT.

           ADD 1                              TO WS-READ-RCD-CNT.
           IF PARM01-DOCU = '*'
               GO TO 0000-LOAD-PARM01.
           IF WS-SUB1 < 20
               ADD 1                          TO WS-SUB1
           ELSE
               DISPLAY '**** MIS0133B 10 parm limit reached'
               GO TO 0000-LOAD-PARM01-EXIT.

           MOVE PARM01-DATA                   TO WS-DATA(WS-SUB1).
           IF PARM01-LEN NUMERIC
               MOVE PARM01-LEN                TO WS-LEN(WS-SUB1)
           ELSE
               DISPLAY '**** parm len is not numeric '
               DISPLAY '**** parm rcd: ' WS-READ-RCD-CNT
               MOVE +0400                     TO WS-RETURN-CODE.
           IF WS-LEN(WS-SUB1) < 1
               OR WS-LEN(WS-SUB1) > 12
               DISPLAY '**** parm len: 01 - 12 '
               DISPLAY '**** parm rcd: ' WS-READ-RCD-CNT
               MOVE +0400                     TO WS-RETURN-CODE.
           IF PARM01-POS NUMERIC
               MOVE PARM01-POS                TO WS-POS(WS-SUB1)
           ELSE
               DISPLAY '**** parm pos is not numeric '
               DISPLAY '**** parm rcd: ' WS-READ-RCD-CNT
               MOVE +0400                     TO WS-RETURN-CODE.
           COMPUTE WS-F-MAX = WS-LEN(WS-SUB1) + WS-POS(WS-SUB1) - 1.
           IF WS-F-MAX > 133
               DISPLAY '**** len + pos > file length'
               DISPLAY '**** parm rcd  ' WS-READ-RCD-CNT
               MOVE +0400                     TO WS-RETURN-CODE.
           IF PARM01-OFFSET NUMERIC
               MOVE PARM01-OFFSET             TO WS-OFF(WS-SUB1)
           ELSE
               DISPLAY '**** parm offset is not numeric '
               DISPLAY '**** parm rcd: ' WS-READ-RCD-CNT
               MOVE +0400                     TO WS-RETURN-CODE.
           IF WS-OFF(WS-SUB1) > 78
               DISPLAY '**** parm offset: 00 - 78'
               DISPLAY '**** parm rcd: ' WS-READ-RCD-CNT
               MOVE +0400                     TO WS-RETURN-CODE.
           IF PARM01-REL-LOC = '+' OR '-' OR SPACE
               MOVE PARM01-REL-LOC            TO WS-REL(WS-SUB1)
           ELSE
               DISPLAY '**** parm rel loc: +/-/blank'
               DISPLAY '**** parm rcd: ' WS-READ-RCD-CNT
               MOVE +0400                     TO WS-RETURN-CODE.

           MOVE PARM01-INS-DATA               TO WS-IDATA(WS-SUB1).
           IF PARM01-INS-LEN NUMERIC
               MOVE PARM01-INS-LEN            TO WS-ILEN(WS-SUB1)
           ELSE
               DISPLAY '**** parm ins-len is not numeric '
               DISPLAY '**** parm rcd: ' WS-READ-RCD-CNT
               MOVE +0400                     TO WS-RETURN-CODE.
           IF PARM01-INS-DATA > SPACE
               OR WS-ILEN(WS-SUB1) > ZERO
               IF WS-ILEN(WS-SUB1) < 1
                   OR WS-ILEN(WS-SUB1) > 12
                   DISPLAY '**** parm ins len: 01 - 12 '
                   DISPLAY '**** parm rcd: ' WS-READ-RCD-CNT
                   MOVE +0400                 TO WS-RETURN-CODE.
           IF PARM01-INS-POS NUMERIC
               MOVE PARM01-INS-POS            TO WS-IPOS(WS-SUB1)
           ELSE
               DISPLAY '**** parm ins-pos is not numeric '
               DISPLAY '**** parm rcd: ' WS-READ-RCD-CNT
               MOVE +0400                     TO WS-RETURN-CODE.
           COMPUTE WS-F-MAX = WS-ILEN(WS-SUB1) + WS-IPOS(WS-SUB1) - 1.
           IF WS-F-MAX > 133
               DISPLAY '**** ins len + ins pos > file length'
               DISPLAY '**** parm rcd  ' WS-READ-RCD-CNT
               MOVE +0400                     TO WS-RETURN-CODE.
           IF PARM01-INS-RCD NUMERIC
               MOVE PARM01-INS-RCD            TO WS-IRCD(WS-SUB1)
           ELSE
               DISPLAY '**** parm ins-rcd is not numeric '
               DISPLAY '**** parm rcd  ' WS-READ-RCD-CNT
               MOVE +0400                     TO WS-RETURN-CODE.
           IF WS-IRCD(WS-SUB1) > WS-INRCD-MAX
               DISPLAY '**** parm ins-rcd > actual ins-rcds '
               DISPLAY '**** parm rcd: ' WS-READ-RCD-CNT
               MOVE +0400                     TO WS-RETURN-CODE.

           GO TO 0000-LOAD-PARM01.

       0000-LOAD-PARM01-EXIT. EXIT.

       0000-SELECT.
           IF MORE-INFILE-RCDS
               PERFORM 0000-READ-INFILE.
           IF WS-RETURN-CODE > ZERO
               MOVE 'Y'                       TO WS-END-OUTFILE-SW
               GO TO 0000-SELECT-EXIT.

      *---------------------------------------
      *     place INFILE record into table
      *     loop through table, top to bottom, comparing
      *       parms against record contents.
      *     if string found, insert INRCD records or overlay
      *       with parm string as requested.
      *---------------------------------------
           PERFORM 0000-ADVANCE-TABLE.
           PERFORM 0000-DETERMINE-INSERT
               VARYING WS-SUB3 FROM WS-HIGH BY -1
               UNTIL WS-SUB3 < WS-LOW.

       0000-SELECT-EXIT. EXIT.

       0000-READ-INFILE.
           READ INFILE.
           IF WS-STAT = ZERO
               ADD 1                          TO WS-READ-RCD-CNT
               MOVE INFILE-RCD                TO WS-INFILE-RCD
           ELSE
           IF WS-STAT = 10
               MOVE 'Y'                       TO WS-END-INFILE-SW
               MOVE '*EOF*'                   TO WS-INFILE-RCD
           ELSE
               DISPLAY '**** MIS0133B read error on INFILE '
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +1200                     TO WS-RETURN-CODE.

      *---------------------------------------
      *     1.  if table has room, move INFILE line to table,
      *          inserting at bottom
      *     2.  if table full, write top line, advance rest,
      *           write INFILE line at bottom
      *     3.  if table overflow at top, write extra top rcds,
      *           advance rest, write INFILE line at bottom
      *     4.  if table overflow at bottom, write top rcds
      *           until room, write INFILE line at bottom
      *---------------------------------------
       0000-ADVANCE-TABLE.
           IF WS-LOW < WS-MIN
               PERFORM UNTIL WS-LOW > WS-MIN
                   MOVE WS-LINE(WS-HIGH)      TO OUTFILE-RCD
                   PERFORM 0000-WRITE-OUTFILE
                   MOVE WS-HIGH               TO WS-TO WS-FROM
                   SUBTRACT 1 FROM WS-FROM
                   PERFORM 0000-ADVANCE-POSITIONS
                       UNTIL WS-FROM < WS-LOW
                   ADD 1                      TO WS-LOW
               END-PERFORM
               SUBTRACT 1 FROM WS-LOW
               MOVE WS-INFILE-RCD             TO WS-LINE(WS-LOW)
               MOVE SPACE                     TO WS-CHNG(WS-LOW)
               MOVE SPACE                     TO WS-FLAG(WS-LOW)
           ELSE
           IF WS-HIGH < WS-MAX
               MOVE WS-HIGH                   TO WS-FROM WS-TO
               ADD 1                          TO WS-TO
               PERFORM 0000-ADVANCE-POSITIONS
                   UNTIL WS-FROM < WS-LOW
               ADD 1                          TO WS-HIGH
               MOVE WS-INFILE-RCD             TO WS-LINE(WS-LOW)
               MOVE SPACE                     TO WS-CHNG(WS-LOW)
               MOVE SPACE                     TO WS-FLAG(WS-LOW)
           ELSE
           IF WS-HIGH > WS-MAX
               PERFORM UNTIL WS-HIGH < WS-MAX
                   MOVE WS-LINE(WS-HIGH)      TO OUTFILE-RCD
                   PERFORM 0000-WRITE-OUTFILE
                   SUBTRACT 1 FROM WS-HIGH
               END-PERFORM
               MOVE WS-MAX                    TO WS-TO
               MOVE WS-HIGH                   TO WS-FROM
               PERFORM 0000-ADVANCE-POSITIONS
                   UNTIL WS-FROM < WS-LOW
               ADD 1                          TO WS-HIGH
               MOVE WS-INFILE-RCD             TO WS-LINE(WS-LOW)
               MOVE SPACE                     TO WS-CHNG(WS-LOW)
               MOVE SPACE                     TO WS-FLAG(WS-LOW)
           ELSE
               MOVE WS-LINE(WS-HIGH)          TO OUTFILE-RCD
               PERFORM 0000-WRITE-OUTFILE
               MOVE WS-HIGH                   TO WS-FROM WS-TO
               SUBTRACT 1 FROM WS-FROM
               PERFORM 0000-ADVANCE-POSITIONS
                   UNTIL WS-FROM < WS-LOW
               MOVE WS-INFILE-RCD             TO WS-LINE(WS-LOW)
               MOVE SPACE                     TO WS-CHNG(WS-LOW)
               MOVE SPACE                     TO WS-FLAG(WS-LOW)
           END-IF
           END-IF
           END-IF.

       0000-DETERMINE-INSERT.
           MOVE 'N'                           TO WS-FOUND-SW.
           IF WS-FLAG(WS-SUB3) = SPACE
               PERFORM 0000-PARM-LOOP
                   VARYING WS-SUB1 FROM 1 BY 1
                   UNTIL WS-SUB1 > WS-PARM01-MAX
               IF WS-FOUND-SW = 'N'
                   MOVE 'N'                   TO WS-FLAG(WS-SUB3).

      *                \\|//
      *                (. .)
      *------------O00O-(_)-O00O--------------

      *---------------------------------------
      *    WS-SUB1  parm table reference
      *    WS-SUB2  data reference
      *    WS-SUB3  line table reference
      *
      *    WS-FLAG  space  compare parms to line
      *             N      no parms matched this line -
      *                    skip future parm comparisons
      *    WS-CHNG  O      parm data was placed on this rcd
      *             I      insertion record
      *+--------------------------------------

       0000-PARM-LOOP.
           MOVE WS-DATA(WS-SUB1)              TO WS-HDATA.
           MOVE WS-LEN(WS-SUB1)               TO WS-HLEN.
           MOVE WS-POS(WS-SUB1)               TO WS-HPOS.
           MOVE 'N'                           TO WS-OVERLAY-SW.
           MOVE 'N'                           TO WS-INSERT-SW.

           IF WS-HPOS > ZERO
               MOVE WS-HPOS                   TO WS-SUB2
               PERFORM 0000-SEARCH-INFILE
           ELSE
               COMPUTE WS-F-MAX = 133 - WS-HLEN + 1
               PERFORM 0000-SEARCH-INFILE
                   VARYING WS-SUB2 FROM 1 BY 1
                   UNTIL WS-SUB2 > WS-F-MAX.

           IF WS-OVERLAY-SW = 'Y'
               MOVE 'O'                       TO WS-CHNG(WS-WORK1)
               MOVE 'N'                       TO WS-FLAG(WS-SUB3)
               ADD 1                          TO WS-OVERLAY-CNT.
           IF WS-INSERT-SW = 'Y'
               MOVE 'I'                       TO WS-CHNG(WS-WORK1)
               MOVE 'N'                       TO WS-FLAG(WS-SUB3)
               ADD 1                          TO WS-INS-RCD-CNT.

       0000-SEARCH-INFILE.
           IF WS-LINE(WS-SUB3)(WS-SUB2: WS-HLEN) =
               WS-HDATA(1: WS-HLEN)
               MOVE 'Y'                       TO WS-FOUND-SW
               PERFORM 0000-PROCESS-PARM THRU
                       0000-PROCESS-PARM-EXIT
               MOVE WS-F-MAX                  TO WS-SUB2.

      *---------------------------------------
      *     search string if file was found
      *     place replacement string on record in table
      *       at offset location (if requested)
      *       place at requested location or found string location
      *     insert record from INRCD into table at offset
      *       location (if requested)
      *---------------------------------------
       0000-PROCESS-PARM.
           MOVE WS-OFF(WS-SUB1)               TO WS-HOFF.
           MOVE WS-REL(WS-SUB1)               TO WS-HREL.
           MOVE WS-IDATA(WS-SUB1)             TO WS-HIDATA.
           MOVE WS-ILEN(WS-SUB1)              TO WS-HILEN.
           MOVE WS-IPOS(WS-SUB1)              TO WS-HIPOS.
           IF WS-HIPOS = ZERO
               MOVE WS-SUB2                   TO WS-HIPOS.
           MOVE WS-IRCD(WS-SUB1)              TO WS-HIRCD.
           IF WS-HREL = '-'
               COMPUTE WS-WORK1 = WS-SUB3 + WS-HOFF
           ELSE
               COMPUTE WS-WORK1 = WS-SUB3 - WS-HOFF.
           IF WS-WORK1 < WS-LOW
               OR WS-WORK1 > WS-HIGH
               GO TO 0000-PROCESS-PARM-EXIT.
           IF WS-HILEN > ZERO
               MOVE WS-HIDATA(1: WS-HILEN) TO
                    WS-LINE(WS-WORK1)(WS-HIPOS: WS-HILEN)
               MOVE 'Y'                       TO WS-OVERLAY-SW.
           IF WS-HIRCD > ZERO
               IF WS-HIGH > 99
                   DISPLAY '**** Access beyond top of table'
                   DISPLAY '**** Insert skipped at ' WS-READ-RCD-CNT
               ELSE
                   MOVE WS-HIGH               TO WS-FROM WS-TO
                   ADD 1                      TO WS-TO WS-HIGH
                   PERFORM 0000-ADVANCE-POSITIONS
                       UNTIL WS-FROM < WS-WORK1
                   MOVE WS-INRCD(WS-HIRCD)    TO WS-LINE(WS-WORK1)
                   MOVE SPACE                 TO WS-CHNG(WS-WORK1)
                   MOVE SPACE                 TO WS-FLAG(WS-WORK1)
                   ADD 1                      TO WS-SUB3
                   MOVE 'Y'                   TO WS-INSERT-SW.

       0000-PROCESS-PARM-EXIT. EXIT.

       0000-ADVANCE-POSITIONS.
           MOVE WS-LINE(WS-FROM)              TO WS-LINE(WS-TO).
           MOVE WS-CHNG(WS-FROM)              TO WS-CHNG(WS-TO).
           MOVE WS-FLAG(WS-FROM)              TO WS-FLAG(WS-TO).
           SUBTRACT 1 FROM WS-FROM.
           SUBTRACT 1 FROM WS-TO.

       0000-WRITE-OUTFILE.
           IF OUTFILE-RCD = '*EOF*'
               MOVE 'Y'                       TO WS-END-OUTFILE-SW
           ELSE
           WRITE OUTFILE-RECORD
           IF WS-STAT > ZERO
               DISPLAY '**** MIS0133B write error on OUTFILE'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +1200                     TO WS-RETURN-CODE
           ELSE
               ADD 1                          TO WS-WRITE-RCD-CNT.

      ************************************ END MIS0133B
