
       TITLE '  COBNEAT:  clean-up Cobol programs'.
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    COBNEAT.
      **********************************************************CX003B
      *@@@ C3 clean-up Cobol programs
      *************************************************************
      *
      *  I am interested in knowing if/where these programs
      *  are in use.     Email:  jiannon@me.com
      *
      ****************************************************************
      * Date written: 01/16/2019
      * Author      : Jim Iannone
      *               loop through Cobol programs and line things up
      ****************************************************************
      * Date changed: mm/dd/yyyy username
      *               comments...
      ****************************************************************

       ENVIRONMENT DIVISION.

       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           C01 IS PAGE-TOP.

       INPUT-OUTPUT SECTION.
       FILE-CONTROL.

           SELECT COBIN                ASSIGN TO COBIN
                                       ORGANIZATION IS SEQUENTIAL
                                       ACCESS MODE IS SEQUENTIAL
                                       FILE STATUS IS WS-STAT.

           SELECT COBOUT               ASSIGN TO COBOUT
                                       ORGANIZATION IS SEQUENTIAL
                                       ACCESS MODE IS SEQUENTIAL
                                       FILE STATUS IS WS-STAT.

           SELECT PARM01               ASSIGN TO PARM01
                                       ORGANIZATION IS SEQUENTIAL
                                       ACCESS MODE IS SEQUENTIAL
                                       FILE STATUS IS WS-STAT.

       DATA DIVISION.
       FILE SECTION.

       FD  COBIN
           RECORDING MODE F.
       01  COBIN-RECORD.
           05  COBIN-RCD               PIC  X(80).

       FD  COBOUT
           RECORDING MODE F.
       01  COBOUT-RECORD.
           05  COBOUT-RCD              PIC  X(80).

       FD  PARM01
           RECORDING MODE F.
       01  PARM01-RECORD.
           05  PARM01-DOCU             PIC  X.
           05  FILLER                  PIC  X.
           05  PARM01-FLAG             PIC  X.
           05  FILLER                  PIC  X.
           05  PARM01-ITEM             PIC  X(32).
           05  FILLER                  PIC  X.
           05  PARM01-LEN              PIC  XX.
           05  FILLER                  PIC  X.
           05  PARM01-OPTION           PIC  X(06).
           05  FILLER                  PIC  X(26).
           05  FILLER                  PIC  X(08).


       WORKING-STORAGE SECTION.

       01  WS-START.
           05  FILLER                  PIC  X(32)    VALUE
               ' Working storage COBNEAT start '.

       01  WS-WORK-FIELDS.
           05  WS-STAT                 PIC  99       VALUE ZERO.
           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.
           05  WS-TALLY                PIC S9(04)    VALUE ZERO COMP.
           05  WS-LS-DATA              PIC  X(10)    VALUE SPACE.
           05  FILLER REDEFINES WS-LS-DATA.
               10  WS-LS-TEST          PIC  X.
               10  WS-LS-EXTRA         PIC  X(09).
           05  WS-QUOTE                PIC  X        VALUE X'7D'.
           05  WS-HOLD-RCD             PIC  X(80)    VALUE SPACE.
           05  FILLER REDEFINES WS-HOLD-RCD.
               10  WS-RCD-1X7          PIC  X(07).
               10  WS-RCD-8X72         PIC  X(65).
               10  WS-RCD-73X80        PIC  X(08).
           05  WS-HOLD-RCD2            PIC  X(80)    VALUE SPACE.
           05  WS-HOLD-RCD3            PIC  X(80)    VALUE SPACE.
           05  WS-LOGIC-PLACE          PIC  X(30)    VALUE SPACE.
           05  WS-HOLD-32-TEMP         PIC  X(32)    VALUE SPACE.
           05  WS-HOLD-32              PIC  X(32)    VALUE SPACE.
           05  FILLER REDEFINES WS-HOLD-32.
               10  WS-HOLD-10.
                   15  WS-HOLD-04      PIC  X(04).
                   15  WS-HOLD-5X10    PIC  X(06).
               10  FILLER              PIC  X(22).
           05  WS-HOLD-08              PIC  X(08)    VALUE SPACE.
           05  WS-HOLD-50              PIC  X(50)    VALUE SPACE.
           05  WS-ITEM                 PIC  X(32)    VALUE SPACE.
           05  FILLER REDEFINES WS-ITEM.
               10  WS-ITEM-1X2         PIC  XX.
               10  WS-ITEM-3           PIC  X.
               10  FILLER              PIC  X(29).
           05  WS-ITEM2                PIC  X(32)    VALUE SPACE.
           05  WS-LC-ITEM              PIC  X(32)    VALUE SPACE.
           05  WS-WORD                 PIC  X(32)    VALUE SPACE.
           05  WS-UNSTR1               PIC  X(20)    VALUE SPACE.
           05  WS-UNSTR2               PIC  X(20)    VALUE SPACE.
           05  WS-PFX                  PIC  X(08)    VALUE SPACE.
           05  WS-PFX-NEW              PIC  X(08)    VALUE SPACE.
           05  WS-PROGRAM              PIC  X(08)    VALUE SPACE.
           05  WS-PREV-ITEM            PIC  X(32)    VALUE SPACE.
           05  WS-PAR-INCREMENT        PIC  9(04)    VALUE ZERO.
           05  WS-PAR-INIT-LEN         PIC  9(04)    VALUE ZERO.
           05  WS-PROGRAM-CNT          PIC  9(04)    VALUE ZERO.
           05  WS-PAR-WRK              PIC  9(06)    VALUE ZERO.
           05  WS-HOLD-SUB3            PIC  999      VALUE ZERO.
           05  WS-P1-MAX               PIC  999      VALUE ZERO.
           05  WS-R1-MAX               PIC  999      VALUE ZERO.
           05  WS-W1-MAX               PIC  999      VALUE ZERO.
           05  WS-IF-CNT               PIC  999      VALUE ZERO.
           05  WS-IF-LOC               PIC  999      VALUE ZERO.
           05  WS-COMMENT-POS          PIC  999      VALUE ZERO.
           05  WS-MAX-LOOK             PIC  999      VALUE ZERO.
           05  WS-AFTER-TO-LOC         PIC  99       VALUE ZERO.
           05  WS-ALIGN-TO-LOC         PIC  99       VALUE ZERO.
           05  WS-BLANK                PIC  99       VALUE ZERO.
           05  WS-CHECK                PIC  99       VALUE ZERO.
           05  WS-CONTINUE-POS         PIC  99       VALUE ZERO.
           05  WS-DIFF                 PIC  99       VALUE ZERO.
           05  WS-DOC-08-POS           PIC  99       VALUE ZERO.
           05  WS-END-POS              PIC  99       VALUE ZERO.
           05  WS-EVAL-POS             PIC  99       VALUE ZERO.
           05  WS-FND-POS              PIC  99       VALUE ZERO.
           05  WS-GAP-ADJ              PIC  99       VALUE ZERO.
           05  WS-HOLD-LEN             PIC  99       VALUE ZERO.
           05  WS-HOLD-NLEN            PIC  99       VALUE ZERO.
           05  WS-IF-POS               PIC  99       VALUE ZERO.
           05  WS-INCR-WRK             PIC  99       VALUE ZERO.
           05  WS-INDENT               PIC  99       VALUE ZERO.
           05  WS-INDENT-IF            PIC  99       VALUE ZERO.
           05  WS-ITEM-LEN             PIC  99       VALUE ZERO.
           05  WS-ITEM-POS             PIC  99       VALUE ZERO.
           05  WS-LEN                  PIC  99       VALUE ZERO.
           05  WS-LEVEL-INCR           PIC  99       VALUE ZERO.
           05  WS-LEVEL-POS            PIC  99       VALUE ZERO.
           05  WS-MOVE                 PIC  99       VALUE ZERO.
           05  WS-MOVE-POS             PIC  99       VALUE ZERO.
           05  WS-ORIG-INCR            PIC  99       VALUE ZERO.
           05  WS-ORIG-LOC             PIC  99       VALUE ZERO.
           05  WS-PAR-LEN              PIC  99       VALUE ZERO.
           05  WS-PERFORM-POS          PIC  99       VALUE ZERO.
           05  WS-PFX-LEN              PIC  99       VALUE ZERO.
           05  WS-PFX-NLEN             PIC  99       VALUE ZERO.
           05  WS-PIC-LOC              PIC  99       VALUE ZERO.
           05  WS-POS                  PIC  99       VALUE ZERO.
           05  WS-PREFIX               PIC  99       VALUE ZERO.
           05  WS-PREFIX-POS           PIC  99       VALUE ZERO.
           05  WS-PREV-POS             PIC  99       VALUE ZERO.
           05  WS-SPACE-LEN            PIC  99       VALUE ZERO.
           05  WS-SPACE-LOC            PIC  99       VALUE ZERO.
           05  WS-START-POS            PIC  99       VALUE ZERO.
           05  WS-VALUE-LOC            PIC  99       VALUE ZERO.
           05  WS-D-START-RCD          PIC  9(09)    VALUE ZERO.
           05  WS-D-END-RCD            PIC  9(09)    VALUE ZERO.
           05  WS-S-START-RCD          PIC  9(09)    VALUE ZERO.
           05  WS-S-END-RCD            PIC  9(09)    VALUE ZERO.

       01  WS-COUNT-FIELDS             COMP-3.
           05  WS-READ-COBIN-CNT       PIC S9(09)    VALUE ZERO.
           05  WS-TRACK-COBIN-CNT      PIC S9(09)    VALUE ZERO.
           05  WS-ELSE-IF-CNT          PIC S9(09)    VALUE ZERO.
           05  WS-WRITE-COBOUT-CNT     PIC S9(09)    VALUE ZERO.

       01  WS-SUBSCRIPTS               COMP.
           05  WS-SUB1                 PIC S9(04)    VALUE ZERO.
           05  WS-SUB2                 PIC S9(04)    VALUE ZERO.
           05  WS-SUB3                 PIC S9(04)    VALUE ZERO.
           05  WS-STR1                 PIC S9(04)    VALUE ZERO.
           05  WS-STR2                 PIC S9(04)    VALUE ZERO.

       01  WS-TABLES.
           05  WS-IF-TABLE             PIC  X(1000)  VALUE SPACE.
           05  WS-IF-ITEM REDEFINES WS-IF-TABLE
                                       OCCURS 200 TIMES.
               10  WS-I1-POS           PIC  XX.
               10  WS-I1-ELSE          PIC  X.
               10  WS-I1-ENDIF         PIC  X.
               10  WS-I1-NOT           PIC  X.
           05  WS-P1-TABLE             PIC  X(6400)  VALUE SPACE.
           05  WS-P1-ROW REDEFINES WS-P1-TABLE
                                       OCCURS 200 TIMES.
               10  WS-P1-ITEM          PIC  X(32).
           05  WS-L1-TABLE             PIC  X(200)   VALUE SPACE.
           05  WS-L1-ROW REDEFINES WS-L1-TABLE
                                       OCCURS 50 TIMES.
               10  WS-L1-LVL           PIC  XX.
               10  WS-L1-NEW-LVL       PIC  XX.
           05  WS-WORDS-TABLE          PIC  X(3000)  VALUE SPACE.
           05  WS-WORDS-ITEM REDEFINES WS-WORDS-TABLE
                                       OCCURS 200 TIMES.
               10  WS-W1-ITEM          PIC  X(12).
               10  WS-W1-LEN           PIC  99.
               10  WS-W1-HANDLE        PIC  X.
           05  WS-RENUM-TABLE          PIC  X(14500) VALUE SPACE.
           05  WS-RENUM-ITEM REDEFINES WS-RENUM-TABLE
                                       OCCURS 500 TIMES.
               10  WS-R1-PROG          PIC  X(08).
               10  WS-R1-PFX           PIC  X(08).
               10  WS-R1-LEN           PIC  99.
               10  WS-R1-NEW           PIC  X(08).
               10  WS-R1-NLEN          PIC  99.
               10  WS-R1-MATCH         PIC  X.

       01  WS-SWITCHES.
           05  WS-END-COBIN-SW         PIC  X        VALUE 'N'.
               88  END-OF-COBIN                      VALUE 'Y'.
               88  MORE-COBIN-RCDS                   VALUE 'N'.
           05  WS-FLIP-SW              PIC  X        VALUE 'Y'.
               88  NO-FLIP                           VALUE 'N'.
           05  WS-ACTUAL-PAR-SW        PIC  X        VALUE SPACE.
           05  WS-AFTER-DOT            PIC  X        VALUE SPACE.
           05  WS-AFTER-SW             PIC  X        VALUE SPACE.
           05  WS-ALIGN-PIC-SW         PIC  X        VALUE SPACE.
           05  WS-ALIGN-TO-SW          PIC  X        VALUE SPACE.
           05  WS-ALIGN-VALUE-SW       PIC  X        VALUE SPACE.
           05  WS-ANOTHER-RCD-SW       PIC  X        VALUE SPACE.
           05  WS-ANY-ITEMS-SW         PIC  X        VALUE SPACE.
           05  WS-AT-SW                PIC  X        VALUE SPACE.
           05  WS-CAP-FIRST            PIC  X        VALUE SPACE.
           05  WS-COBOL-UPPER-SW       PIC  X        VALUE SPACE.
           05  WS-COBOL-06             PIC  X        VALUE SPACE.
           05  WS-COBOL-08             PIC  X        VALUE SPACE.
           05  WS-COMMENT-CASE         PIC  X        VALUE SPACE.
           05  WS-COMMENT-06           PIC  X        VALUE SPACE.
           05  WS-COMMENT-08           PIC  X        VALUE SPACE.
           05  WS-CONVERT-PIC-SW       PIC  X        VALUE SPACE.
           05  WS-DOC-08               PIC  X        VALUE SPACE.
           05  WS-DOT-SW               PIC  X        VALUE SPACE.
           05  WS-ELSE-IF-SW           PIC  X        VALUE SPACE.
           05  WS-ENVIRONMENT-SW       PIC  X        VALUE SPACE.
           05  WS-EVALUATE-SW          PIC  X        VALUE SPACE.
           05  WS-FIG-CONSTANT-SW      PIC  X        VALUE SPACE.
           05  WS-FIRST-LINE-SW        PIC  X        VALUE SPACE.
           05  WS-HOLD-LEVEL           PIC  X        VALUE SPACE.
           05  WS-ITEMS-MOVED-SW       PIC  X        VALUE SPACE.
           05  WS-LEVEL-INCR-SW        PIC  X        VALUE SPACE.
           05  WS-LINE-TYPE            PIC  X        VALUE SPACE.
           05  WS-NBR-PAR-SW           PIC  X        VALUE SPACE.
           05  WS-NO-COMMENT-SW        PIC  X        VALUE SPACE.
           05  WS-NO-LINEUP-SW         PIC  X        VALUE SPACE.
           05  WS-NO-RENUM-SW          PIC  X        VALUE SPACE.
           05  WS-OTHER-CHAR-SW        PIC  X        VALUE SPACE.
           05  WS-OVERLAY-SW           PIC  X        VALUE SPACE.
           05  WS-PERF-GROUP-SW        PIC  X        VALUE SPACE.
           05  WS-PERFORM-SW           PIC  X        VALUE SPACE.
           05  WS-POST-THRU-SW         PIC  X        VALUE SPACE.
           05  WS-PRE-THRU-SW          PIC  X        VALUE SPACE.
           05  WS-PROCEDURE-SW         PIC  X        VALUE SPACE.
           05  WS-QUOTE-SW             PIC  X        VALUE SPACE.
           05  WS-RENUM-MAX-MET        PIC  X        VALUE SPACE.
           05  WS-RENUM-SW             PIC  X        VALUE SPACE.
           05  WS-RESERVED-SW          PIC  X        VALUE SPACE.
           05  WS-RESET-POS-SW         PIC  X        VALUE SPACE.
           05  WS-SKIP-RCD-BY-REQ      PIC  X        VALUE SPACE.
           05  WS-SHOW-SKIP-SW         PIC  X        VALUE SPACE.
           05  WS-SHOW-RENUM-SW        PIC  X        VALUE SPACE.
           05  WS-SHOW-LEVEL           PIC  X        VALUE SPACE.
           05  WS-WHEN-SW              PIC  X        VALUE SPACE.
           05  WS-WORKING-SW           PIC  X        VALUE SPACE.
           05  WS-ZAP-EJECT-SW         PIC  X        VALUE SPACE.
           05  WS-ZAP-LEAD-STAR        PIC  X        VALUE SPACE.
           05  WS-ZAP-TRAIL-STAR       PIC  X        VALUE SPACE.

       01  WS-END.
           05  FILLER                  PIC  X(16)    VALUE
               '  COBNEAT END  '.

       LINKAGE SECTION.

       01  LS-FIELD.
           05  LS-LENGTH               PIC S9(04)    COMP.
           05  LS-DATA                 PIC  X(10).
           05  FILLER REDEFINES LS-DATA.
               10  LS-TEST             PIC  X.
               10  LS-EXTRA            PIC  X(09).

      /

       PROCEDURE DIVISION USING LS-FIELD.

       0100-PROGRAM-ENTRY.
           MOVE +0000                         TO WS-RETURN-CODE.
           MOVE 199999                        TO WS-TRACK-COBIN-CNT.
           PERFORM 0200-OPEN-FILES.
           DISPLAY '    '.
           DISPLAY '**** COBNEAT clean-up Cobol programs'.

           IF WS-RETURN-CODE = ZERO
               PERFORM 0400-PROCESS-COBIN.

           DISPLAY '**** Records in COBIN         '
                                             WS-READ-COBIN-CNT.
           IF WS-ELSE-IF-CNT > ZERO
               DISPLAY '**** ELSE IF rcds added       '
                                             WS-ELSE-IF-CNT.
           DISPLAY '**** Records written          '
                                             WS-WRITE-COBOUT-CNT.

           IF WS-RETURN-CODE = ZERO
               PERFORM 0300-CLOSE-FILES
           ELSE
               DISPLAY '**** COBNEAT cond code ' WS-RETURN-CODE
                       ' set by program'
               MOVE WS-RETURN-CODE            TO RETURN-CODE.

           DISPLAY '**** COBNEAT EOJ encountered '.
           DISPLAY '    '.
           STOP RUN.

       0200-OPEN-FILES.
           OPEN INPUT  PARM01.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** COBNEAT open error on PARM01'
               DISPLAY '**** File stat           ' WS-STAT
               MOVE +0200                     TO WS-RETURN-CODE.
           OPEN OUTPUT COBOUT.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** COBNEAT open error on COBOUT'
               DISPLAY '**** File stat           ' WS-STAT
               MOVE +0200                     TO WS-RETURN-CODE.

       0200-OPEN-COBIN-INPUT.
           OPEN INPUT  COBIN.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** COBNEAT open error on COBIN'
               DISPLAY '**** File stat           ' WS-STAT
               MOVE +0200                     TO WS-RETURN-CODE.

       0300-CLOSE-FILES.
           CLOSE COBOUT.
           CLOSE PARM01.
           CLOSE COBIN.

      *---------------------------------------
      *    X
      *---------------------------------------
       0400-PROCESS-COBIN.

           PERFORM 0500-GET-LINKAGE.

           PERFORM 2900-SHOW-BLANK-LINE.
           PERFORM VARYING WS-SUB1 FROM 1 BY 1
               UNTIL WS-SUB1 > 200
               MOVE SPACE                     TO WS-W1-ITEM(WS-SUB1)
               MOVE ZERO                      TO WS-W1-LEN(WS-SUB1)
               MOVE SPACE                     TO WS-W1-HANDLE(WS-SUB1)
           END-PERFORM.

           IF WS-RETURN-CODE = ZERO
               MOVE SPACE                     TO WS-P1-TABLE
               MOVE ZERO                      TO WS-SUB1
               MOVE ZERO                      TO WS-SUB2
               MOVE 'load PARM01'             TO WS-LOGIC-PLACE
               PERFORM 0500-SET-DEFAULT-VALUES
               PERFORM 0700-LOAD-PARM01 THRU
                       0700-LOAD-PARM01-EXIT
               PERFORM 0500-SET-DEFAULT-POS.

           IF WS-RETURN-CODE = ZERO
             IF WS-LEVEL-INCR-SW = 'Y'
                 MOVE 'load INCR table'       TO WS-LOGIC-PLACE
                 PERFORM 1500-LOAD-INCR-TABLE.

           IF WS-NO-LINEUP-SW = 'Y'
               OR WS-NO-COMMENT-SW = 'Y'
               MOVE 'Y'                       TO WS-NO-RENUM-SW.
           IF WS-SHOW-RENUM-SW = 'Y'
               DISPLAY '**** Generating renum table by request'
               DISPLAY '****   and skipping other processing'
               MOVE 'Y'                       TO WS-RENUM-SW.
           IF WS-RETURN-CODE = ZERO
             IF WS-NO-RENUM-SW = SPACE
               IF WS-RENUM-SW = 'Y'
                   MOVE ZERO                  TO WS-SUB2
                   MOVE ZERO                  TO WS-PAR-WRK
                   MOVE 'build renum table'   TO WS-LOGIC-PLACE
                   PERFORM 0200-OPEN-COBIN-INPUT
                   PERFORM 2000-READ-COBIN
                       UNTIL END-OF-COBIN
                   MOVE WS-SUB2               TO WS-R1-MAX
                   CLOSE COBIN.

           IF WS-RETURN-CODE = ZERO
             IF WS-SHOW-RENUM-SW = SPACE
                 MOVE 'N'                     TO WS-END-COBIN-SW
                 MOVE SPACE                   TO WS-PROCEDURE-SW
                 MOVE ZERO                    TO WS-PROGRAM-CNT
                 MOVE ZERO                    TO WS-READ-COBIN-CNT
                 PERFORM 0200-OPEN-COBIN-INPUT
                 PERFORM 1100-READ-COBIN THRU
                         1100-READ-COBIN-EXIT
                         UNTIL END-OF-COBIN.

           IF WS-RETURN-CODE = ZERO
               PERFORM 0500-SHOW-FINAL-STATS.

       0500-SET-DEFAULT-VALUES.
           MOVE 40                            TO WS-PIC-LOC.
           MOVE 54                            TO WS-VALUE-LOC.
           MOVE 5                             TO WS-LEVEL-INCR.
           MOVE 4                             TO WS-INDENT.
           MOVE 2                             TO WS-INDENT-IF.
           MOVE 12                            TO WS-ORIG-LOC.
           MOVE 47                            TO WS-ALIGN-TO-LOC.
           MOVE 'Y'                           TO WS-LEVEL-INCR-SW.
           MOVE 'Y'                           TO WS-ALIGN-TO-SW.
           MOVE 'Y'                           TO WS-ALIGN-VALUE-SW.
           MOVE 'Y'                           TO WS-ALIGN-PIC-SW.
           MOVE 100                           TO WS-PAR-INCREMENT.
           MOVE 5                             TO WS-PAR-INIT-LEN.

       0500-SET-DEFAULT-POS.
           MOVE WS-ORIG-LOC                   TO WS-EVAL-POS
                                                 WS-PERFORM-POS.

       0500-SHOW-FINAL-STATS.
           IF WS-SHOW-RENUM-SW = 'Y'
               PERFORM 0500-SHOW-RENUM-TABLE
           ELSE
               PERFORM 0500-SHOW-MOST-STUFF
               PERFORM 0500-SHOW-RENUM-TABLE.

       0500-SHOW-MOST-STUFF.
           IF WS-INDENT NOT = 4
               DISPLAY '**** INDENT overridden with     ' WS-INDENT.
           IF WS-INDENT-IF NOT = 2
               DISPLAY '**** INDENT IF overridden with  ' WS-INDENT-IF.
           IF WS-ORIG-LOC NOT = 12
               DISPLAY '**** ORIG LOC overridden with   ' WS-ORIG-LOC.
           IF WS-ALIGN-TO-SW = 'N'
               DISPLAY '**** TO LOC adjustments set off'
           ELSE
           IF WS-ALIGN-TO-LOC NOT = 47
               DISPLAY '**** TO LOC overridden with     '
                                                   WS-ALIGN-TO-LOC.
           IF WS-ALIGN-PIC-SW = 'N'
               DISPLAY '**** PIC LOC adjustments set off'
           ELSE
           IF WS-PIC-LOC NOT = 40
               DISPLAY '**** PIC LOC overridden with    '
                                                   WS-PIC-LOC.
           IF WS-ALIGN-VALUE-SW = 'N'
               DISPLAY '**** VALUE LOC adjustments set off'
           ELSE
           IF WS-VALUE-LOC NOT = 54
               DISPLAY '**** VALUE LOC overridden with  '
                                                   WS-VALUE-LOC.
           IF WS-COMMENT-CASE = 'I'
               DISPLAY '**** Comments will be converted to lower case'
           ELSE
           IF WS-COMMENT-CASE = 'L'
               DISPLAY '**** WS/procedure comments will be converted '
                       'to lower case'
           ELSE
           IF WS-COMMENT-CASE = 'U'
               DISPLAY '**** Comments will be converted to upper case'.

           IF WS-P1-MAX > ZERO
               DISPLAY '**** Reserved words            ' WS-P1-MAX
                       ' of 200'.
           IF WS-ELSE-IF-SW = 'Y'
               DISPLAY '**** ELSE IF specified '.
           IF WS-CONVERT-PIC-SW = 'Y'
               DISPLAY '**** CONVERT PIC specified '.
           IF WS-FIG-CONSTANT-SW = 'Y'
               DISPLAY '**** FIG CONSTANT specified '.
           IF WS-LEVEL-INCR-SW = 'N'
               DISPLAY '**** LEVEL INCR adjustments set off'
           ELSE
               DISPLAY '**** LEVEL INCR value           '
                                                    WS-ORIG-INCR.
           IF WS-D-START-RCD > ZERO
               DISPLAY '**** Skipped displays before  '
                                                    WS-D-START-RCD.
           IF WS-D-END-RCD > ZERO
               DISPLAY '**** Skipped displays after   '
                                                    WS-D-END-RCD.

           IF WS-S-START-RCD > ZERO
               OR WS-S-END-RCD > ZERO
               PERFORM 0500-SHOW-SKIPPED.

       0500-SHOW-SKIPPED.
           DISPLAY '                   '.
           DISPLAY ' !!  SKIPPED altering records as specified'
                   ' by "I" parm entries'.
           IF WS-S-START-RCD > ZERO
               DISPLAY ' !!  SKIPPED records before   '
                                                    WS-S-START-RCD.
           IF WS-S-END-RCD > ZERO
               DISPLAY ' !!  SKIPPED records after    '
                                                    WS-S-END-RCD.
           DISPLAY '                   '.

       0500-SHOW-RENUM-TABLE.
           IF WS-R1-MAX > ZERO
               DISPLAY '**** Paragraph increment      '
                                                    WS-PAR-INCREMENT
               DISPLAY '**** Paragraph init length    '
                                                    WS-PAR-INIT-LEN.

           IF WS-R1-MAX > ZERO
             IF WS-PROGRAM-CNT > 1
                 DISPLAY '**** Programs encountered     '
                                                    WS-PROGRAM-CNT
             ELSE
             IF WS-R1-MAX = 1
                 DISPLAY '**** Paragraph to alter        ' WS-R1-MAX
                         ' prefix  ' WS-R1-NEW(WS-R1-MAX)
             ELSE
                 DISPLAY '**** Paragraphs to alter       ' WS-R1-MAX
                         '  prefix ' WS-R1-NEW(1) ' through '
                                     WS-R1-NEW(WS-R1-MAX).
           IF WS-SHOW-LEVEL = '1' OR '2' OR '3'
             IF WS-RENUM-SW = 'Y'
                 DISPLAY '   '
                 DISPLAY '     Renum paragraph table'
                 DISPLAY '     --------   -------- --   -------- --'
                         '   ----'
                 PERFORM VARYING WS-SUB3 FROM 1 BY 1
                     UNTIL WS-SUB3 > WS-R1-MAX
                     DISPLAY '     ' WS-R1-PROG(WS-SUB3)
                             '   '   WS-R1-PFX(WS-SUB3)
                             ' '     WS-R1-LEN(WS-SUB3)
                             '   '   WS-R1-NEW(WS-SUB3)
                             ' '     WS-R1-NLEN(WS-SUB3)
                             '   '   WS-SUB3
                 END-PERFORM
                 DISPLAY '     --------   -------- --   -------- --'
                         '   ----'
                 DISPLAY '   '.

       0500-GET-LINKAGE.
           IF LS-LENGTH = ZERO
               DISPLAY '**** Parm length is zero '
               MOVE +0500                     TO WS-RETURN-CODE
           ELSE
           IF LS-LENGTH > LENGTH OF WS-LS-DATA
               DISPLAY '**** Parm length is excessive '
               MOVE +0500                     TO WS-RETURN-CODE
           ELSE
               MOVE LS-DATA(1: LS-LENGTH)     TO WS-LS-DATA.

           IF WS-LS-TEST = 'T'
               MOVE 'Y'                       TO WS-SHOW-RENUM-SW
               MOVE '1'                       TO WS-SHOW-LEVEL
           ELSE
               MOVE WS-LS-TEST                TO WS-SHOW-LEVEL.
           MOVE WS-SHOW-LEVEL                 TO WS-HOLD-LEVEL.

      *---------------------------------------
      *    load parm fields
      *---------------------------------------
       0700-LOAD-PARM01.
           READ PARM01.
           IF WS-STAT = 10
               MOVE WS-SUB1                   TO WS-P1-MAX
               MOVE WS-SUB2                   TO WS-W1-MAX
               GO TO 0700-LOAD-PARM01-EXIT
           ELSE
           IF WS-STAT > ZERO
               DISPLAY '**** COBNEAT read error on PARM01'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0700                     TO WS-RETURN-CODE
               GO TO 0700-LOAD-PARM01-EXIT.

           IF PARM01-DOCU = '*'
               GO TO 0700-LOAD-PARM01.

           IF PARM01-FLAG = 'C'
               PERFORM 0700-LOAD-FLAGS
           ELSE
           IF PARM01-FLAG = 'R'
               PERFORM 0700-LOAD-RESERVED
           ELSE
           IF PARM01-FLAG = 'W'
               PERFORM 0700-LOAD-WORDS
           ELSE
           IF PARM01-FLAG = 'D' OR 'S'
               PERFORM 0700-LOAD-LIMITS.

           GO TO 0700-LOAD-PARM01.

       0700-LOAD-PARM01-EXIT. EXIT.

       0700-LOAD-FLAGS.
           MOVE FUNCTION UPPER-CASE(PARM01-ITEM) TO WS-ITEM.
           IF WS-ITEM = 'INDENT'
             IF PARM01-LEN NUMERIC
                 MOVE PARM01-LEN              TO WS-INDENT
                 IF WS-INDENT = ZERO
                     MOVE 4                   TO WS-INDENT
                 ELSE
                 IF WS-INDENT > 6
                     MOVE 6                   TO WS-INDENT
                 ELSE
                     CONTINUE
             ELSE
             IF PARM01-LEN = SPACE
                 MOVE 4                       TO WS-INDENT
             ELSE
                 DISPLAY '**** COBNEAT PARM01 indent not numeric'
                 MOVE +0700                   TO WS-RETURN-CODE.
           IF WS-ITEM = 'INDENT IF'
             IF PARM01-LEN NUMERIC
                 MOVE PARM01-LEN              TO WS-INDENT-IF
                 IF WS-INDENT-IF = ZERO
                     MOVE 2                   TO WS-INDENT-IF
                 ELSE
                 IF WS-INDENT-IF > 6
                     MOVE 6                   TO WS-INDENT-IF
                 ELSE
                     CONTINUE
             ELSE
             IF PARM01-LEN = SPACE
                 MOVE 2                       TO WS-INDENT-IF
             ELSE
                 DISPLAY '**** COBNEAT PARM01 indent if not numeric'
                 MOVE +0700                   TO WS-RETURN-CODE.
           IF WS-ITEM = 'ORIG LOC'
             IF PARM01-LEN NUMERIC
                 MOVE PARM01-LEN              TO WS-ORIG-LOC
                 IF WS-ORIG-LOC = ZERO
                     MOVE 12                  TO WS-ORIG-LOC
                 ELSE
                 IF WS-ORIG-LOC < 8
                     MOVE 8                   TO WS-ORIG-LOC
                 ELSE
                 IF WS-ORIG-LOC > 16
                     MOVE 16                  TO WS-ORIG-LOC
                 ELSE
                     CONTINUE
             ELSE
             IF PARM01-LEN = SPACE
                 MOVE 12                      TO WS-ORIG-LOC
             ELSE
                 DISPLAY '**** COBNEAT PARM01 original pos not numeric'
                 MOVE +0700                   TO WS-RETURN-CODE.
           IF WS-ITEM = 'TO LOC'
             IF PARM01-LEN NUMERIC
                 MOVE PARM01-LEN              TO WS-ALIGN-TO-LOC
                 IF WS-ALIGN-TO-LOC = ZERO
                     MOVE 47                  TO WS-ALIGN-TO-LOC
                     MOVE 'N'                 TO WS-ALIGN-TO-SW
                 ELSE
                 IF WS-ALIGN-TO-LOC < 35
                     MOVE 35                  TO WS-ALIGN-TO-LOC
                 ELSE
                 IF WS-ALIGN-TO-LOC > 55
                     MOVE 55                  TO WS-ALIGN-TO-LOC
                 ELSE
                     CONTINUE
             ELSE
             IF PARM01-LEN = SPACE
                 MOVE 47                      TO WS-ALIGN-TO-LOC
             ELSE
                 DISPLAY '**** COBNEAT PARM01 to location not numeric'
                 MOVE +0700                   TO WS-RETURN-CODE.
           IF WS-ITEM = 'LEVEL INCR'
             IF PARM01-LEN NUMERIC
                 MOVE PARM01-LEN              TO WS-LEVEL-INCR
                 IF WS-LEVEL-INCR = ZERO
                     MOVE 5                   TO WS-LEVEL-INCR
                     MOVE 'N'                 TO WS-LEVEL-INCR-SW
                 ELSE
                 IF WS-LEVEL-INCR > 10
                     MOVE 10                  TO WS-LEVEL-INCR
                 ELSE
                     CONTINUE
             ELSE
             IF PARM01-LEN = SPACE
                 MOVE 5                       TO WS-LEVEL-INCR
             ELSE
                 DISPLAY '**** COBNEAT PARM01 level incr not numeric'
                 MOVE +0700                   TO WS-RETURN-CODE.
           MOVE WS-LEVEL-INCR                 TO WS-ORIG-INCR.
           IF WS-ITEM = 'PIC LOC'
             IF PARM01-LEN NUMERIC
                 MOVE PARM01-LEN              TO WS-PIC-LOC
                 IF WS-PIC-LOC = ZERO
                     MOVE 40                  TO WS-PIC-LOC
                     MOVE 'N'                 TO WS-ALIGN-PIC-SW
                 ELSE
                 IF WS-PIC-LOC < 34
                     MOVE 34                  TO WS-PIC-LOC
                 ELSE
                 IF WS-PIC-LOC > 50
                     MOVE 50                  TO WS-PIC-LOC
                 ELSE
                     CONTINUE
             ELSE
             IF PARM01-LEN = SPACE
                 MOVE 40                      TO WS-PIC-LOC
             ELSE
                 DISPLAY '**** COBNEAT PARM01 pic loc not numeric'
                 MOVE +0700                   TO WS-RETURN-CODE.
           IF WS-ITEM = 'VALUE LOC'
             IF PARM01-LEN NUMERIC
                 MOVE PARM01-LEN              TO WS-VALUE-LOC
                 IF WS-VALUE-LOC = ZERO
                     MOVE 54                  TO WS-VALUE-LOC
                     MOVE 'N'                 TO WS-ALIGN-VALUE-SW
                 ELSE
                 IF WS-VALUE-LOC < 42
                     MOVE 42                  TO WS-VALUE-LOC
                 ELSE
                 IF WS-VALUE-LOC > 60
                     MOVE 60                  TO WS-VALUE-LOC
                 ELSE
                     CONTINUE
             ELSE
             IF PARM01-LEN = SPACE
                 MOVE 54                      TO WS-VALUE-LOC
             ELSE
                 DISPLAY '**** COBNEAT PARM01 value loc not numeric'
                 MOVE +0700                   TO WS-RETURN-CODE.
           IF WS-ITEM = 'ELSE IF'
               MOVE 'Y'                       TO WS-ELSE-IF-SW.
           IF WS-ITEM = 'CONVERT PIC'
               MOVE 'Y'                       TO WS-CONVERT-PIC-SW.
           IF WS-ITEM = 'FIG CONSTANT'
               MOVE 'Y'                       TO WS-FIG-CONSTANT-SW.

           IF WS-ITEM = 'NO RENUM'
             IF WS-SHOW-RENUM-SW = SPACE
                 DISPLAY ' Parm option "no renum" specified'
                 MOVE 'Y'                     TO WS-NO-RENUM-SW.
           IF WS-ITEM = 'NO LINEUP'
               DISPLAY ' Parm option "no lineup" specified'
               MOVE 'Y'                       TO WS-NO-LINEUP-SW.
           IF WS-ITEM = 'NO COMMENT'
               DISPLAY ' Parm option "no comment" specified'
               MOVE 'Y'                       TO WS-NO-COMMENT-SW.
           IF WS-ITEM = 'AFTER DOT'
               MOVE 'Y'                       TO WS-AFTER-DOT.
           IF WS-ITEM = 'CAP FIRST'
               MOVE FUNCTION UPPER-CASE(PARM01-OPTION) TO WS-CAP-FIRST.
           IF WS-ITEM = 'CASE'
               MOVE FUNCTION UPPER-CASE(PARM01-OPTION)
                                              TO WS-COMMENT-CASE.
           IF WS-ITEM = 'LINE TYPE'
               MOVE FUNCTION UPPER-CASE(PARM01-OPTION)
                                              TO WS-LINE-TYPE.
           IF WS-ITEM = 'MOVE COMMENT'
               MOVE PARM01-OPTION             TO WS-HOLD-32
               PERFORM 2800-SHIFT-LEFT
               IF WS-HOLD-04 NUMERIC
                   MOVE WS-HOLD-04            TO WS-COMMENT-POS
                   IF WS-COMMENT-POS = ZERO
                       MOVE 0012              TO WS-COMMENT-POS
                   ELSE
                   IF WS-COMMENT-POS < 8
                       MOVE 0008              TO WS-COMMENT-POS
                   ELSE
                   IF WS-COMMENT-POS > 20
                       MOVE 0020              TO WS-COMMENT-POS
                   ELSE
                       CONTINUE
               ELSE
                   MOVE 0012                  TO WS-COMMENT-POS.
           IF WS-ITEM = 'ZAP STAR E'
               MOVE 'Y'                       TO WS-ZAP-TRAIL-STAR.
           IF WS-ITEM = 'ZAP STAR L'
               MOVE 'Y'                       TO WS-ZAP-LEAD-STAR.
           IF WS-ITEM = 'ZAP LAST C'
               MOVE 'Y'                       TO WS-COMMENT-08.
           IF WS-ITEM(1: 9)  = 'DOC LAST '
               MOVE FUNCTION LOWER-CASE(WS-ITEM(10: 1))
                                              TO WS-DOC-08
               IF WS-DOC-08 NOT = 'b'
                 IF WS-ITEM(12: 2) NUMERIC
                     MOVE WS-ITEM(12: 2)      TO WS-DOC-08-POS
                     IF WS-DOC-08-POS < 73
                         MOVE 73              TO WS-DOC-08-POS
                     ELSE
                     IF WS-DOC-08-POS > 80
                         MOVE 80              TO WS-DOC-08-POS
                     ELSE
                         CONTINUE
                 ELSE
                     MOVE 80                  TO WS-DOC-08-POS.
           IF WS-ITEM = 'ZAP LAST B'
               MOVE 'Y'                       TO WS-COBOL-08.
           IF WS-ITEM = 'ZAP FIRST B'
               MOVE 'Y'                       TO WS-COBOL-06.
           IF WS-ITEM = 'ZAP FIRST C'
               MOVE 'Y'                       TO WS-COMMENT-06.
           IF WS-ITEM = 'ZAP EJECT'
               MOVE 'Y'                       TO WS-ZAP-EJECT-SW.
           IF WS-ITEM = 'COBOL UPPER'
               MOVE 'Y'                       TO WS-COBOL-UPPER-SW.
           IF WS-ITEM = 'RENUM PAR'
               MOVE 'Y'                       TO WS-RENUM-SW.
           IF WS-ITEM = 'RENUM PINCR'
               MOVE PARM01-OPTION             TO WS-HOLD-32
               PERFORM 2800-SHIFT-LEFT
               IF WS-HOLD-04 NUMERIC
                   MOVE WS-HOLD-04            TO WS-PAR-INCREMENT
                   IF WS-PAR-INCREMENT = ZERO
                       MOVE 0100              TO WS-PAR-INCREMENT
                   ELSE
                   IF WS-PAR-INCREMENT > 1000
                       MOVE 1000              TO WS-PAR-INCREMENT
                   ELSE
                       CONTINUE
               ELSE
                   DISPLAY '**** COBNEAT renum pincr not numeric'
                   MOVE +0700                 TO WS-RETURN-CODE.
           IF WS-ITEM = 'RENUM INIT'
               MOVE PARM01-OPTION             TO WS-HOLD-32
               PERFORM 2800-SHIFT-LEFT
               IF WS-HOLD-04 NUMERIC
                   MOVE WS-HOLD-04            TO WS-PAR-INIT-LEN
                   IF WS-PAR-INIT-LEN < 2
                       MOVE 2                 TO WS-PAR-INIT-LEN
                   ELSE
                   IF WS-PAR-INIT-LEN > 5
                       MOVE 5                 TO WS-PAR-INIT-LEN
                   ELSE
                       CONTINUE
               ELSE
                   DISPLAY '**** COBNEAT renum init not numeric'
                   MOVE +0700                 TO WS-RETURN-CODE.

       0700-LOAD-RESERVED.
           IF WS-SUB1 < 200
               ADD 1                          TO WS-SUB1
               PERFORM 0700-PARM-RESERVED.

       0700-PARM-RESERVED.
           MOVE FUNCTION UPPER-CASE(PARM01-ITEM) TO WS-ITEM.
           MOVE WS-ITEM                       TO WS-P1-ITEM(WS-SUB1).

       0700-LOAD-WORDS.
           IF WS-SUB2 < 200
               ADD 1                          TO WS-SUB2
               PERFORM 0700-PARM-WORDS.

       0700-PARM-WORDS.
           MOVE PARM01-ITEM                   TO WS-W1-ITEM(WS-SUB2).
           IF PARM01-LEN NUMERIC
               MOVE PARM01-LEN                TO WS-W1-LEN(WS-SUB2)
               IF WS-W1-LEN(WS-SUB2) = ZERO
                   DISPLAY '**** COBNEAT PARM01 word len = zero'
                   MOVE +0700                 TO WS-RETURN-CODE
               ELSE
               IF WS-W1-LEN(WS-SUB2) > 20
                   DISPLAY '**** COBNEAT PARM01 word len > 20'
                   MOVE +0700                 TO WS-RETURN-CODE
               ELSE
                   CONTINUE
           ELSE
               DISPLAY '**** COBNEAT word len not numeric'
               MOVE +0700                     TO WS-RETURN-CODE.
           IF PARM01-OPTION = 'F' OR 'W' OR 'f' OR 'w'
               MOVE FUNCTION UPPER-CASE(PARM01-OPTION)
                                              TO WS-W1-HANDLE(WS-SUB2)
           ELSE
               DISPLAY '**** COBNEAT word option not F/W'
               MOVE +0700                     TO WS-RETURN-CODE.

       0700-LOAD-LIMITS.
           MOVE FUNCTION UPPER-CASE(PARM01-ITEM) TO WS-ITEM.
           IF PARM01-FLAG = 'D'
             IF WS-ITEM(1: 5) = 'START'
               IF WS-ITEM(7: 9) NUMERIC
                   MOVE WS-ITEM(7: 9)         TO WS-D-START-RCD.
           IF PARM01-FLAG = 'D'
             IF WS-ITEM(1: 3) = 'END'
               IF WS-ITEM(7: 9) NUMERIC
                   MOVE WS-ITEM(7: 9)         TO WS-D-END-RCD.
           IF PARM01-FLAG = 'S'
             IF WS-ITEM(1: 5) = 'START'
               IF WS-ITEM(7: 9) NUMERIC
                   MOVE WS-ITEM(7: 9)         TO WS-S-START-RCD.
           IF PARM01-FLAG = 'S'
             IF WS-ITEM(1: 3) = 'END'
               IF WS-ITEM(7: 9) NUMERIC
                   MOVE WS-ITEM(7: 9)         TO WS-S-END-RCD.

      *---------------------------------------

       1100-READ-COBIN.
           READ COBIN.
           IF WS-STAT = ZERO
               ADD 1                          TO WS-READ-COBIN-CNT
               PERFORM 1200-SELECT THRU
                       1200-SELECT-EXIT
           ELSE
           IF WS-STAT = 10
               MOVE 'Y'                       TO WS-END-COBIN-SW
           ELSE
               DISPLAY '**** COBNEAT read error on COBIN '
               DISPLAY '**** File stat           ' WS-STAT
               MOVE +1100                     TO WS-RETURN-CODE.

       1100-READ-COBIN-EXIT. EXIT.

      *---------------------------------------
      *    x
      *---------------------------------------
       1200-SELECT.
           IF WS-READ-COBIN-CNT > WS-TRACK-COBIN-CNT
               DISPLAY ' Records read ...        ' WS-READ-COBIN-CNT
               ADD 200000                     TO WS-TRACK-COBIN-CNT.

           MOVE COBIN-RCD                     TO WS-HOLD-RCD.
           MOVE COBIN-RCD                     TO WS-HOLD-RCD2.

           PERFORM 1200-DETERMINE-SKIP-BY-REQ.
           PERFORM 1200-SETUP-DEBUG-SWITCH.

           IF WS-HOLD-RCD(1: 14) = './  ADD  NAME='
               DISPLAY '**** New program break   '
                                        WS-HOLD-RCD(15: 8)
               MOVE WS-HOLD-RCD               TO COBOUT-RCD
               PERFORM 3000-WRITE-COBOUT
           ELSE
           IF WS-HOLD-RCD(7: 1) = '*'
             IF WS-NO-COMMENT-SW = SPACE
                 MOVE 'comments'              TO WS-LOGIC-PLACE
                 PERFORM 1500-CONVERT-COMMENTS THRU
                         1500-CONVERT-EXIT
             ELSE
                 MOVE WS-HOLD-RCD             TO COBOUT-RCD
                 PERFORM 3000-WRITE-COBOUT
           ELSE
           IF WS-NO-LINEUP-SW = SPACE
               MOVE SPACE                     TO WS-FIRST-LINE-SW
               MOVE SPACE                     TO WS-DOT-SW
               MOVE SPACE                     TO WS-ANY-ITEMS-SW
               MOVE 'main adjustments'        TO WS-LOGIC-PLACE
               PERFORM 1200-ADJUST-COBOL-STUFF THRU
                       1200-ADJUST-COBOL-STUFF-EXIT
           ELSE
               MOVE WS-HOLD-RCD               TO COBOUT-RCD
               PERFORM 3000-WRITE-COBOUT.

       1200-SELECT-EXIT. EXIT.

      *---------------------------------------
      *    setup debug display range
      *----+----------------------------------
       1200-SETUP-DEBUG-SWITCH.
           MOVE SPACE                         TO WS-SHOW-SKIP-SW.
           IF WS-D-START-RCD > ZERO
             IF WS-D-END-RCD > ZERO
               IF WS-READ-COBIN-CNT < WS-D-START-RCD
                   OR WS-READ-COBIN-CNT > WS-D-END-RCD
                   MOVE 'Y'                   TO WS-SHOW-SKIP-SW
               ELSE
                   CONTINUE
             ELSE
             IF WS-READ-COBIN-CNT < WS-D-START-RCD
                 MOVE 'Y'                     TO WS-SHOW-SKIP-SW
             ELSE
                 CONTINUE
           ELSE
           IF WS-D-END-RCD > ZERO
             IF WS-READ-COBIN-CNT > WS-D-END-RCD
                 MOVE 'Y'                     TO WS-SHOW-SKIP-SW.

           IF WS-SHOW-SKIP-SW = 'Y'
               MOVE SPACE                     TO WS-SHOW-LEVEL
           ELSE
               MOVE WS-HOLD-LEVEL             TO WS-SHOW-LEVEL.

      *---------------------------------------
      *    skip records if requested in PARM01
      *    skip if records outside specified range
      *---------------------------------------
       1200-DETERMINE-SKIP-BY-REQ.
           MOVE SPACE                         TO WS-SKIP-RCD-BY-REQ.
           IF WS-S-START-RCD > ZERO
             IF WS-S-END-RCD > ZERO
               IF WS-READ-COBIN-CNT < WS-S-START-RCD
                   OR WS-READ-COBIN-CNT > WS-S-END-RCD
                   MOVE 'Y'                   TO WS-SKIP-RCD-BY-REQ
               ELSE
                   CONTINUE
             ELSE
             IF WS-READ-COBIN-CNT < WS-S-START-RCD
                 MOVE 'Y'                     TO WS-SKIP-RCD-BY-REQ
             ELSE
                 CONTINUE
           ELSE
           IF WS-S-END-RCD > ZERO
             IF WS-READ-COBIN-CNT > WS-S-END-RCD
                 MOVE 'Y'                     TO WS-SKIP-RCD-BY-REQ.

      *---------------------------------------
      *    line-up Cobol statements
      *
      *    WS-IF-POS is where you will place the next IF statement
      *    WS-POS is where you will place the current statement
      *----+----------------------------------
       1200-ADJUST-COBOL-STUFF.
           PERFORM 1300-FIND-LEAD-WORD.
           IF WS-FND-POS = ZERO
               GO TO 1200-FINAL-ADJUST.

           IF WS-ITEM = 'ID' OR 'IDENTIFICATION'
               MOVE SPACE                     TO WS-ENVIRONMENT-SW
               MOVE SPACE                     TO WS-WORKING-SW
               MOVE SPACE                     TO WS-PROCEDURE-SW.
           IF WS-ITEM = 'PROGRAM-ID'
               MOVE WS-ITEM2                  TO WS-PROGRAM
               ADD 1                          TO WS-PROGRAM-CNT.

           MOVE WS-FND-POS                    TO WS-ITEM-POS.
           IF WS-ITEM = 'ENVIRONMENT'
               MOVE 'Y'                       TO WS-ENVIRONMENT-SW.
           IF WS-ITEM = 'WORKING-STORAGE'
               MOVE 'Y'                       TO WS-WORKING-SW.
           IF WS-ITEM = 'PROCEDURE'
               MOVE 'Y'                       TO WS-PROCEDURE-SW.
           IF WS-PROCEDURE-SW NOT = 'Y'
             IF WS-WORKING-SW = 'Y'
                 PERFORM 1500-WORKING-STORAGE THRU
                         1500-WORKING-STORAGE-EXIT
                 GO TO 1200-FINAL-ADJUST
             ELSE
             IF WS-ENVIRONMENT-SW = 'Y'
                 PERFORM 1500-WORKING-STORAGE THRU
                         1500-WORKING-STORAGE-EXIT.

      *    determine if a cobol reserved word
           MOVE SPACE                         TO WS-RESERVED-SW.
           PERFORM VARYING WS-SUB3 FROM 1 BY 1
               UNTIL WS-SUB3 > WS-P1-MAX
               IF WS-ITEM = WS-P1-ITEM(WS-SUB3)
                   MOVE 'Y'                   TO WS-RESERVED-SW
                   MOVE WS-P1-MAX             TO WS-SUB3
               END-IF
           END-PERFORM.
           IF WS-RESERVED-SW = 'Y'
               MOVE ZERO                      TO WS-AFTER-TO-LOC
               MOVE ZERO                      TO WS-CONTINUE-POS.
           IF WS-AFTER-TO-LOC = ZERO
               AND WS-CONTINUE-POS = ZERO
               IF WS-RESERVED-SW = SPACE
                   GO TO 1200-FINAL-ADJUST.

      *    skip processing paragraph names etc as cobol logic
           IF WS-ITEM-POS < 12
             IF WS-PROCEDURE-SW = 'Y'
                 GO TO 1200-FINAL-ADJUST.

      *    skip records if requested in PARM01
           IF WS-SKIP-RCD-BY-REQ = 'Y'
               GO TO 1200-FINAL-ADJUST.

      *    start main logic

           MOVE SPACE                         TO WS-AFTER-SW.
           IF WS-ITEM = 'PERFORM'
               MOVE 'Y'                       TO WS-PERFORM-SW
               PERFORM 1300-INSPECT-PERFORM
           ELSE
           IF WS-PERFORM-SW = 'Y'
               PERFORM 1300-WORDS-AFTER-PERFORM
               MOVE SPACE                     TO WS-PERF-GROUP-SW.

           IF WS-ITEM = 'IF'
               OR (WS-ITEM = 'NOT'
               AND WS-ITEM2 = 'FOUND')
               ADD 1                          TO WS-IF-CNT
               MOVE WS-IF-CNT                 TO WS-IF-LOC
               MOVE WS-IF-POS                 TO WS-I1-POS(WS-IF-CNT)
               MOVE WS-IF-POS                 TO WS-POS
               MOVE SPACE                     TO WS-WHEN-SW
               ADD WS-INDENT-IF               TO WS-IF-POS
               IF WS-ITEM = 'NOT'
                   MOVE 'Y'                   TO WS-I1-NOT(WS-IF-CNT)
               ELSE
                   CONTINUE
           ELSE
           IF WS-PERF-GROUP-SW = 'Y'
               OR WS-ITEM = 'SORT'
               ADD 1                          TO WS-IF-CNT
               MOVE WS-IF-CNT                 TO WS-IF-LOC
               MOVE WS-IF-POS                 TO WS-I1-POS(WS-IF-CNT)
               MOVE WS-IF-POS                 TO WS-POS
               MOVE SPACE                     TO WS-WHEN-SW
               ADD WS-INDENT-IF               TO WS-IF-POS
               IF WS-PREV-ITEM = 'IF'
                   ADD WS-INDENT-IF           TO WS-POS
                   MOVE WS-POS                TO WS-I1-POS(WS-IF-CNT)
               ELSE
                   CONTINUE
           ELSE
           IF WS-ITEM = 'ELSE'
               PERFORM 1300-FIND-PREV-ELSE-IF
                   VARYING WS-SUB3 FROM 200 BY -1
                   UNTIL WS-SUB3 < 1
               MOVE WS-IF-POS                 TO WS-POS
               PERFORM 1300-FIND-ELSE-IF
           ELSE
           IF WS-ITEM = 'END-IF' OR 'END-PERFORM'
               PERFORM 1300-FIND-PREV-ENDIF-IF
                   VARYING WS-SUB3 FROM 200 BY -1
                   UNTIL WS-SUB3 < 1
               MOVE WS-IF-POS                 TO WS-POS
           ELSE
           IF WS-WHEN-SW = 'Y'
               MOVE WS-IF-POS                 TO WS-POS
           ELSE
           IF WS-IF-CNT > ZERO
               MOVE WS-I1-POS(WS-IF-LOC)      TO WS-POS
               ADD WS-INDENT                  TO WS-POS
               MOVE WS-POS                    TO WS-IF-POS
           ELSE
               MOVE WS-IF-POS                 TO WS-POS.

           IF WS-ITEM = 'AT'
               MOVE 'Y'                       TO WS-AT-SW
               MOVE WS-POS                    TO WS-EVAL-POS.
           IF WS-ITEM = 'WHEN'
               MOVE WS-EVAL-POS               TO WS-POS WS-IF-POS
               ADD WS-INDENT                  TO WS-IF-POS
               IF WS-AT-SW = SPACE
                   MOVE 'Y'                   TO WS-WHEN-SW.
           IF WS-ITEM = 'END-EVALUATE'
               MOVE SPACE                     TO WS-EVALUATE-SW
               MOVE SPACE                     TO WS-WHEN-SW
               MOVE WS-EVAL-POS               TO WS-POS WS-IF-POS.

           IF WS-AFTER-TO-LOC > ZERO
               MOVE WS-AFTER-TO-LOC           TO WS-POS
           ELSE
           IF WS-CONTINUE-POS > ZERO
               ADD WS-CONTINUE-POS            TO WS-POS
           ELSE
           IF WS-ITEM = 'REMAINDER' OR 'GIVING'
               ADD WS-INDENT                  TO WS-POS
           ELSE
           IF WS-POST-THRU-SW = 'Y'
               ADD 8                          TO WS-POS
           ELSE
           IF WS-EVALUATE-SW = 'Y'
               OR WS-AT-SW = 'Y'
               ADD WS-INDENT                  TO WS-POS
           ELSE
           IF WS-AFTER-SW = 'Y'
             IF WS-POS = WS-PERFORM-POS
                 ADD WS-INDENT                TO WS-POS.

      *    WS-CONTINUE-POS is used to help place non-reserved-word
      *    items such as additional display '  x  '  fields or
      *    lone paragraph names or mathematical statements
           IF WS-ITEM = 'EVALUATE'
               MOVE 'Y'                       TO WS-EVALUATE-SW
               MOVE WS-POS                    TO WS-EVAL-POS.
           IF WS-ITEM = 'SORT'
               MOVE 27                        TO WS-CONTINUE-POS.
           IF WS-ITEM = 'ON'
               MOVE 18                        TO WS-CONTINUE-POS.
           IF WS-ITEM = 'OPEN'
               MOVE 5                         TO WS-CONTINUE-POS.
           IF WS-ITEM = 'CLOSE'
               MOVE 6                         TO WS-CONTINUE-POS.
           IF WS-ITEM = 'STRING'
               MOVE 7                         TO WS-CONTINUE-POS.
           IF WS-ITEM = 'UNSTRING'
               MOVE 9                         TO WS-CONTINUE-POS.
           IF WS-ITEM = 'DISPLAY' OR 'COMPUTE'
               MOVE 8                         TO WS-CONTINUE-POS.
           IF WS-ITEM = 'PERFORM'
               MOVE 8                         TO WS-CONTINUE-POS
               MOVE WS-POS                    TO WS-PERFORM-POS
               PERFORM 1300-INSPECT-THRU.

      *    set items at specific locations
           IF WS-ALIGN-PIC-SW = 'Y'
             IF WS-ITEM = 'ASSIGN' OR 'ORGANIZATION' OR 'ACCESS'
                 MOVE WS-PIC-LOC              TO WS-POS.
           IF WS-ALIGN-PIC-SW = 'Y'
             IF WS-ITEM = 'FILE'
               IF WS-ITEM2 = 'STATUS'
                   MOVE WS-PIC-LOC            TO WS-POS.
           IF WS-ALIGN-PIC-SW = 'Y'
             IF WS-ITEM = 'RECORD'
               IF WS-ITEM2 = 'KEY'
                   MOVE WS-PIC-LOC            TO WS-POS.

           IF WS-ITEM = 'FILE'
             IF WS-ITEM2 = 'SECTION'
                 MOVE 8                       TO WS-POS.
           IF WS-ITEM = 'DATA'
             IF WS-ITEM2 = 'DIVISION'
                 MOVE 8                       TO WS-POS.
           IF WS-ITEM = 'AUTHOR'              OR 'CBL'
                     OR 'CONFIGURATION'       OR 'DATE-WRITTEN'
                     OR 'ENVIRONMENT'         OR 'FD'
                     OR 'FILE-CONTROL'        OR 'ID'
                     OR 'IDENTIFICATION'      OR 'INPUT-OUTPUT'
                     OR 'INSTALLATION'        OR 'LINKAGE'
                     OR 'PROGRAM-ID'          OR 'RD'
                     OR 'REMARKS'             OR 'REPORT'
                     OR 'SD'                  OR 'SOURCE-COMPUTER'
                     OR 'TITLE'
                 MOVE 8                       TO WS-POS.

           IF WS-SHOW-LEVEL = '3'
               PERFORM 1200-SHOW-WORK-FIELDS.

      *    move stuff
           IF WS-FND-POS NOT = WS-POS
               MOVE WS-ITEM-LEN               TO WS-LEN
               PERFORM 2600-APPLY-DIFF-POS.

      *---------------------------------------
      *    align ' TO '
      *----+----------------------------------
           IF WS-ALIGN-TO-SW = 'Y'
             IF WS-ITEM = 'SELECT'
                 PERFORM 1400-ALIGN-ASSIGN.
           IF WS-ALIGN-TO-SW = 'Y'
             IF WS-ITEM NOT = 'GO'
                 PERFORM 1400-ALIGN-TO
                 IF WS-FND-POS > ZERO
                   IF WS-FND-POS NOT = WS-POS
                       MOVE 'align TO '       TO WS-LOGIC-PLACE
                       PERFORM 2600-APPLY-DIFF-POS
                       IF WS-ITEMS-MOVED-SW = 'E'
                           SUBTRACT 3 FROM WS-POS
                           PERFORM 2600-APPLY-DIFF-POS
                           IF WS-ITEMS-MOVED-SW = 'E'
                               SUBTRACT 3 FROM WS-POS
                               PERFORM 2600-APPLY-DIFF-POS
                               IF WS-ITEMS-MOVED-SW = 'E'
                                   ADD 9          TO WS-POS
                                   PERFORM 2600-APPLY-DIFF-POS.
           IF WS-ALIGN-TO-SW = 'Y'
               PERFORM 1400-ADJUST-AFTER-TO.

      *---------------------------------------
      *    replace SPACES with SPACE   ZEROS ZEROES with ZERO
      *---------------------------------------
           IF WS-FIG-CONSTANT-SW = 'Y'
               MOVE SPACE                     TO WS-QUOTE-SW
               PERFORM 1500-REPLACE-FIG-CONSTANTS
                   VARYING WS-SUB3 FROM 8 BY 1
                   UNTIL WS-SUB3 > 70.

       1200-FINAL-ADJUST.
           IF WS-SKIP-RCD-BY-REQ = 'Y'
               GO TO 1200-SEND-AFTER-ADJUST.

           IF WS-ZAP-EJECT-SW = 'Y'
             IF WS-ITEM = 'EJECT' OR 'SKIP ' OR 'SKIP1'
                       OR 'SKIP2' OR 'SKIP3'
               MOVE SPACE           TO WS-HOLD-RCD(WS-ITEM-POS: 5).

           IF WS-RENUM-SW = 'Y'
             IF WS-NO-RENUM-SW = SPACE
                 PERFORM 1500-REPLACE-PARAGRAPH-PREFIX.

      *    zap positions 73 - 80
           PERFORM 1200-HANDLE-LAST-EIGHT-BYTES.

      *    zap positions 1 - 6
           IF WS-COBOL-06 = 'Y'
               MOVE SPACE                     TO WS-HOLD-RCD(1: 6).

       1200-SEND-AFTER-ADJUST.
           MOVE WS-POS                        TO WS-PREV-POS.
           MOVE WS-ITEM                       TO WS-PREV-ITEM.
           MOVE WS-HOLD-RCD                   TO COBOUT-RCD.
           PERFORM 3000-WRITE-COBOUT.

           IF WS-ANOTHER-RCD-SW = 'Y'
               MOVE WS-HOLD-RCD3              TO WS-HOLD-RCD
               MOVE SPACE                     TO WS-ANOTHER-RCD-SW
               ADD 1                          TO WS-ELSE-IF-CNT
               GO TO 1200-ADJUST-COBOL-STUFF.

           MOVE SPACE                         TO WS-QUOTE-SW.
           MOVE SPACE                         TO WS-RESET-POS-SW.
           PERFORM 1200-FIND-LINE-END-DOT
               VARYING WS-SUB1 FROM 72 BY -1
               UNTIL WS-SUB1 < 13.
           IF WS-RESET-POS-SW = 'Y'
               MOVE WS-ORIG-LOC               TO WS-IF-POS
               MOVE ZERO                      TO WS-IF-CNT WS-IF-LOC
               MOVE SPACE                     TO WS-IF-TABLE
               MOVE SPACE                     TO WS-EVALUATE-SW
               MOVE SPACE                     TO WS-PERFORM-SW
               MOVE SPACE                     TO WS-PERF-GROUP-SW
               MOVE SPACE                     TO WS-POST-THRU-SW
               MOVE SPACE                     TO WS-PRE-THRU-SW
               MOVE SPACE                     TO WS-AT-SW
               MOVE ZERO                      TO WS-AFTER-TO-LOC
               MOVE ZERO                      TO WS-CONTINUE-POS.

       1200-ADJUST-COBOL-STUFF-EXIT. EXIT.

       1200-FIND-LINE-END-DOT.
           IF WS-HOLD-RCD(WS-SUB1: 1) = WS-QUOTE
             IF WS-QUOTE-SW = SPACE
                 MOVE 'Y'                     TO WS-QUOTE-SW
             ELSE
             IF WS-QUOTE-SW = 'Y'
                 MOVE SPACE                   TO WS-QUOTE-SW
             ELSE
                 CONTINUE
           ELSE
           IF WS-SUB1 = 72
             IF WS-HOLD-RCD(WS-SUB1: 1) = '.'
                 MOVE 'Y'                     TO WS-RESET-POS-SW
                 MOVE ZERO                    TO WS-SUB1
             ELSE
                 CONTINUE
           ELSE
           IF WS-HOLD-RCD(WS-SUB1: 2) = '. '
             IF WS-QUOTE-SW = SPACE
                 MOVE 'Y'                     TO WS-RESET-POS-SW
                 MOVE ZERO                    TO WS-SUB1.

      *---------------------------------------
      *    WS-ANY-ITEMS-SW is valued if the record has changed
      *---------------------------------------
       1200-HANDLE-LAST-EIGHT-BYTES.
           IF WS-HOLD-RCD(73: 8) = SPACE
             IF WS-ANY-ITEMS-SW = 'Y'
               IF WS-DOC-08 = SPACE
                   CONTINUE
               ELSE
               IF WS-DOC-08 = 'b'
                   MOVE 'cobneat '            TO WS-HOLD-RCD(73: 8)
               ELSE
                   MOVE WS-DOC-08  TO WS-HOLD-RCD(WS-DOC-08-POS: 1)
             ELSE
                 CONTINUE
           ELSE
           IF WS-COBOL-08 = 'Y'
             IF WS-ANY-ITEMS-SW = 'Y'
               IF WS-DOC-08 = SPACE
                   MOVE SPACE                 TO WS-HOLD-RCD(73: 8)
               ELSE
               IF WS-DOC-08 = 'b'
                   MOVE 'cobneat '            TO WS-HOLD-RCD(73: 8)
               ELSE
                   MOVE SPACE                 TO WS-HOLD-RCD(73: 8)
                   MOVE WS-DOC-08  TO WS-HOLD-RCD(WS-DOC-08-POS: 1)
             ELSE
                 MOVE SPACE                   TO WS-HOLD-RCD(73: 8)
           ELSE
           IF WS-ANY-ITEMS-SW = 'Y'
             IF WS-DOC-08-POS = 73
               IF WS-HOLD-RCD(74: 1) = SPACE
                   MOVE WS-DOC-08  TO WS-HOLD-RCD(WS-DOC-08-POS: 1)
               ELSE
                   CONTINUE
             ELSE
             IF WS-DOC-08-POS = 80
               IF WS-HOLD-RCD(79: 1) = SPACE
                   MOVE WS-DOC-08  TO WS-HOLD-RCD(WS-DOC-08-POS: 1)
               ELSE
                   CONTINUE
             ELSE
             IF WS-DOC-08-POS > 73
               IF WS-DOC-08-POS < 80
                 IF WS-HOLD-RCD(WS-DOC-08-POS - 1: 1) = SPACE
                     AND WS-HOLD-RCD(WS-DOC-08-POS + 1: 1) = SPACE
                     MOVE WS-DOC-08 TO WS-HOLD-RCD(WS-DOC-08-POS: 1).

       1200-SHOW-WORK-FIELDS.

      *    DISPLAY '  item            ' WS-ITEM.
      *    DISPLAY '  item pos        ' WS-ITEM-POS.
      *    DISPLAY '  align pic sw    ' WS-ALIGN-PIC-SW.
      *    DISPLAY '  continue pos    ' WS-CONTINUE-POS.
      *    DISPLAY '  after to loc    ' WS-AFTER-TO-LOC.
      *    DISPLAY '  perform group   ' WS-PERF-GROUP-SW.
      *    DISPLAY '  perform pos     ' WS-PERFORM-POS.
      *    DISPLAY '  evaluate sw     ' WS-EVALUATE-SW.
      *    DISPLAY '  at sw           ' WS-AT-SW.
      *    DISPLAY '  when sw         ' WS-WHEN-SW.
      *    DISPLAY '  pre thru sw     ' WS-PRE-THRU-SW.
      *    DISPLAY '  post thru sw    ' WS-POST-THRU-SW.

           IF WS-IF-CNT > ZERO
               PERFORM 1200-SHOW-IF-TABLE.

       1200-SHOW-IF-TABLE.
           DISPLAY '     if tbl ' WS-READ-COBIN-CNT
                   '  ws-if-cnt ' WS-IF-CNT
                   '  ws-if-loc ' WS-IF-LOC.
           PERFORM VARYING WS-SUB3 FROM 1 BY 1
               UNTIL WS-SUB3 > 200
               IF WS-I1-POS(WS-SUB3) NOT = SPACE
                   DISPLAY '            ' WS-SUB3
                           '  pos: ' WS-I1-POS(WS-SUB3)
                           '  else: ' WS-I1-ELSE(WS-SUB3)
                           '  endif: ' WS-I1-ENDIF(WS-SUB3)
                           '  not: ' WS-I1-NOT(WS-SUB3)
               END-IF
           END-PERFORM.
           DISPLAY '            '.

       1300-FIND-PREV-ELSE-IF.
           IF WS-I1-POS(WS-SUB3) NOT = SPACE
             IF WS-I1-ELSE(WS-SUB3) = SPACE
                 MOVE 'Y'                     TO WS-I1-ELSE(WS-SUB3)
                 MOVE WS-I1-POS(WS-SUB3)      TO WS-IF-POS
                 MOVE WS-SUB3                 TO WS-IF-LOC
                 MOVE ZERO                    TO WS-SUB3.

       1300-FIND-PREV-ENDIF-IF.
           IF WS-I1-POS(WS-SUB3) NOT = SPACE
             IF WS-I1-NOT(WS-SUB3) = 'Y'
                 MOVE 'Y'                     TO WS-I1-ELSE(WS-SUB3)
                 MOVE 'Y'                     TO WS-I1-ENDIF(WS-SUB3)
             ELSE
             IF WS-I1-ENDIF(WS-SUB3) = SPACE
                 MOVE 'Y'                     TO WS-I1-ELSE(WS-SUB3)
                 MOVE 'Y'                     TO WS-I1-ENDIF(WS-SUB3)
                 MOVE WS-I1-POS(WS-SUB3)      TO WS-IF-POS
                 PERFORM 1300-FIND-PREVIOUS-IF
                 MOVE ZERO                    TO WS-SUB3.

       1300-FIND-PREVIOUS-IF.
           PERFORM VARYING WS-SUB3 FROM WS-SUB3 BY -1
               UNTIL WS-SUB3 < 1
               IF WS-I1-ENDIF(WS-SUB3) = SPACE
                   MOVE WS-SUB3               TO WS-IF-LOC
                   MOVE ZERO                  TO WS-SUB3
               END-IF
           END-PERFORM.

      *---------------------------------------
      *    if WS-ELSE-IF-SW is 'Y' then split "ELSE IF"
      *       into two separate lines
      *    if not then add a level to the IF array
      *---------------------------------------
       1300-FIND-ELSE-IF.
           IF WS-HOLD-RCD(WS-ITEM-POS: 7) = 'ELSE IF'
             IF WS-ELSE-IF-SW = 'Y'
                 MOVE ZERO                    TO WS-BLANK
                 COMPUTE WS-BLANK = 69 - WS-ITEM-POS
                 MOVE SPACE                   TO WS-HOLD-RCD3
                 MOVE WS-HOLD-RCD(WS-ITEM-POS + 5: )
                                TO WS-HOLD-RCD3(WS-ITEM-POS: )
                 MOVE 'Y'                     TO WS-ANOTHER-RCD-SW
                 IF WS-SHOW-LEVEL = '3'
                     DISPLAY '     else-if pos   ' WS-ITEM-POS
                     DISPLAY '     blank len     ' WS-BLANK
                     DISPLAY '     pre-change    ' WS-HOLD-RCD
                     DISPLAY '                '
                     MOVE SPACE
                              TO WS-HOLD-RCD(WS-ITEM-POS + 5: WS-BLANK)
                 ELSE
                     MOVE SPACE
                              TO WS-HOLD-RCD(WS-ITEM-POS + 5: WS-BLANK)
             ELSE
                 ADD 1                        TO WS-IF-CNT
                 MOVE WS-IF-CNT               TO WS-IF-LOC
                 MOVE WS-IF-POS               TO WS-I1-POS(WS-IF-CNT)
                 MOVE WS-IF-POS               TO WS-POS
                 MOVE SPACE                   TO WS-WHEN-SW
                 ADD WS-INDENT-IF             TO WS-IF-POS.

       1300-INSPECT-PERFORM.
           MOVE SPACE                         TO WS-PERF-GROUP-SW.
           IF WS-ITEM2 = 'VARYING' OR SPACE
               MOVE 'Y'                       TO WS-PERF-GROUP-SW.

      *    perform 1000-check-stuff 12 times   NO
      *    perform ws-loop-cnt times           YES
      *    perform 12 times                    YES
      *
           MOVE ZERO                          TO WS-TALLY.
           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL 'TIMES'.
           IF WS-TALLY > ZERO
             IF WS-HOLD-RCD(WS-FND-POS + 8: 1) NUMERIC
                 MOVE ZERO                    TO WS-TALLY
                 INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '-'
                 IF WS-TALLY > ZERO
                     CONTINUE
                 ELSE
                     MOVE 'Y'                 TO WS-PERF-GROUP-SW
             ELSE
                 MOVE 'Y'                     TO WS-PERF-GROUP-SW.

       1300-INSPECT-THRU.
           MOVE SPACE                         TO WS-POST-THRU-SW.
           MOVE ZERO                          TO WS-TALLY.
           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL ' THRU'.
           IF WS-TALLY > ZERO
               MOVE 'Y'                       TO WS-POST-THRU-SW.
           MOVE ZERO                          TO WS-TALLY.
           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL ' THROUGH'.
           IF WS-TALLY > ZERO
               MOVE 'Y'                       TO WS-POST-THRU-SW.

       1300-WORDS-AFTER-PERFORM.
           IF WS-ITEM = 'VARYING' OR 'UNTIL'
                     OR 'OR'      OR 'AND'
                     OR 'GREATER' OR '>'      OR 'GT'
                     OR 'LESS'    OR '<'      OR 'LT'
                     OR 'EQUAL'   OR '='      OR 'EQ'
                     OR 'GE'      OR '>='
                     OR 'LE'      OR '<='
                     OR 'NOT'     OR 'NE'     OR 'IS'
               MOVE 'Y'                       TO WS-AFTER-SW
           ELSE
           IF WS-ITEM = 'THRU' OR 'THROUGH'
               MOVE 'Y'                       TO WS-PRE-THRU-SW
               MOVE 'Y'                       TO WS-AFTER-SW
           ELSE
           IF WS-CONTINUE-POS = ZERO
               MOVE SPACE                     TO WS-AFTER-SW
               MOVE SPACE                     TO WS-PERFORM-SW
               MOVE SPACE                     TO WS-PRE-THRU-SW
               MOVE SPACE                     TO WS-POST-THRU-SW.

       1300-FIND-LEAD-WORD.
           MOVE ZERO                          TO WS-FND-POS.
           MOVE ZERO                          TO WS-ITEM-LEN.
           MOVE SPACE                         TO WS-ITEM WS-ITEM2.
           PERFORM VARYING WS-SUB3 FROM 8 BY 1
               UNTIL WS-SUB3 > 69
               IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE OR '*' OR '-'
                   CONTINUE
               ELSE
                   MOVE WS-SUB3               TO WS-FND-POS
                   MOVE 69                    TO WS-SUB3
               END-IF
           END-PERFORM.
           IF WS-FND-POS > ZERO
               MOVE WS-HOLD-RCD(WS-FND-POS: ) TO WS-HOLD-50
               UNSTRING WS-HOLD-50            DELIMITED BY ALL SPACE
                   INTO WS-ITEM WS-ITEM2
               INSPECT WS-ITEM REPLACING ALL '.' BY SPACE
               INSPECT WS-ITEM2 REPLACING ALL '.' BY SPACE
               MOVE 72                        TO WS-END-POS
               PERFORM VARYING WS-SUB3 FROM WS-FND-POS BY 1
                   UNTIL WS-SUB3 > 72
                   IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE
                       MOVE WS-SUB3           TO WS-END-POS
                       MOVE 72                TO WS-SUB3
                   END-IF
               END-PERFORM
               COMPUTE WS-ITEM-LEN = WS-END-POS - WS-FND-POS.

      *    ' TO  WS-FIELD'   -->  ' TO WS-FIELD '
      *    ' TO   WS-FIELD'  -->  ' TO WS-FIELD '
       1400-ADJUST-AFTER-TO.
           MOVE ZERO                          TO WS-FND-POS.
           PERFORM 1400-FIND-TO
               VARYING WS-SUB3 FROM 8 BY 1
               UNTIL WS-SUB3 > 69.
      *    set ws-after-to-loc for ws fields occurring on separate line
           IF WS-FND-POS > ZERO
               MOVE WS-FND-POS                TO WS-AFTER-TO-LOC
               ADD 4                          TO WS-AFTER-TO-LOC
               IF WS-HOLD-RCD(WS-FND-POS + 4: 1) = SPACE
                 IF WS-HOLD-RCD(WS-FND-POS + 5: 1) = SPACE
                   IF WS-HOLD-RCD(WS-FND-POS + 6: 1) = SPACE
                       CONTINUE
                   ELSE
                       MOVE WS-FND-POS        TO WS-POS
                       ADD 6                  TO WS-FND-POS
                       ADD 4                  TO WS-POS
                       MOVE 'adjust after TO' TO WS-LOGIC-PLACE
                       PERFORM 2600-APPLY-DIFF-POS
                 ELSE
                     MOVE WS-FND-POS          TO WS-POS
                     ADD 5                    TO WS-FND-POS
                     ADD 4                    TO WS-POS
                     MOVE 'adjust after TO' TO WS-LOGIC-PLACE
                     PERFORM 2600-APPLY-DIFF-POS.

       1400-ALIGN-TO.
           MOVE ZERO                          TO WS-FND-POS.
           IF WS-WORKING-SW = 'Y'
               PERFORM 1400-FIND-TO
                   VARYING WS-SUB3 FROM 8 BY 1
                   UNTIL WS-SUB3 > 67.
           IF WS-FND-POS > ZERO
               MOVE WS-ALIGN-TO-LOC           TO WS-POS
               SUBTRACT 1 FROM WS-POS
               MOVE ' TO '                    TO WS-ITEM
               MOVE 4                         TO WS-LEN
           ELSE
               PERFORM 1400-FIND-DELIMITED
                   VARYING WS-SUB3 FROM 8 BY 1
                   UNTIL WS-SUB3 > 60
               IF WS-FND-POS > ZERO
                   MOVE WS-ALIGN-TO-LOC       TO WS-POS
                   SUBTRACT 1 FROM WS-POS
                   MOVE ' DELIMITED '         TO WS-ITEM
                   MOVE 11                    TO WS-LEN
               ELSE
               IF WS-ITEM = 'PERFORM' OR 'VARYING'
                   CONTINUE
               ELSE
               IF WS-ITEM NOT = 'FROM'
                   PERFORM 1400-FIND-FROM
                       VARYING WS-SUB3 FROM 8 BY 1
                       UNTIL WS-SUB3 > 60
                   IF WS-FND-POS > ZERO
                       MOVE WS-ALIGN-TO-LOC   TO WS-POS
                       SUBTRACT 1 FROM WS-POS
                       MOVE ' FROM '          TO WS-ITEM
                       MOVE 6                 TO WS-LEN.

       1400-FIND-TO.
           IF WS-HOLD-RCD(WS-SUB3: 4) = ' TO '
               MOVE WS-SUB3                   TO WS-FND-POS
               MOVE 67                        TO WS-SUB3.

       1400-FIND-DELIMITED.
           IF WS-HOLD-RCD(WS-SUB3: 13) = ' DELIMITED BY'
               MOVE WS-SUB3                   TO WS-FND-POS
               MOVE 60                        TO WS-SUB3.

       1400-FIND-FROM.
           IF WS-HOLD-RCD(WS-SUB3: 6) = ' FROM '
               MOVE WS-SUB3                   TO WS-FND-POS
               MOVE 60                        TO WS-SUB3.

       1400-ALIGN-ASSIGN.
           MOVE ZERO                          TO WS-FND-POS.
           PERFORM 1400-FIND-ASSIGN
               VARYING WS-SUB3 FROM 8 BY 1
               UNTIL WS-SUB3 > 60.
           IF WS-FND-POS > ZERO
               MOVE WS-PIC-LOC                TO WS-POS
               SUBTRACT 1 FROM WS-POS
               IF WS-FND-POS NOT = WS-POS
                   MOVE ' ASSIGN '            TO WS-ITEM
                   MOVE 8                     TO WS-LEN
                   MOVE 'align ASSIGN'        TO WS-LOGIC-PLACE
                   PERFORM 2600-APPLY-DIFF-POS.

       1400-FIND-ASSIGN.
           IF WS-HOLD-RCD(WS-SUB3: 8) = ' ASSIGN '
               MOVE WS-SUB3                   TO WS-FND-POS
               MOVE 60                        TO WS-SUB3.

      *----+----------------------------------

      *---------------------------------------
      *    load new increment values on right side of array
      *----+----------------------------------
       1500-LOAD-INCR-TABLE.
           MOVE SPACE                         TO WS-L1-TABLE.
           MOVE '01'                          TO WS-L1-LVL(1).
           MOVE '01'                          TO WS-L1-NEW-LVL(1).
           MOVE WS-LEVEL-INCR                 TO WS-INCR-WRK.
           PERFORM VARYING WS-SUB3 FROM 2 BY 1
               UNTIL WS-SUB3 > 50
               MOVE WS-INCR-WRK         TO WS-L1-NEW-LVL(WS-SUB3)
               ADD WS-LEVEL-INCR              TO WS-INCR-WRK
               PERFORM 1500-INCR-WRK-ADJUST
           END-PERFORM.

       1500-INCR-WRK-ADJUST.
           IF WS-INCR-WRK > 49
               MOVE 49                        TO WS-INCR-WRK
           ELSE
           IF WS-INCR-WRK > 39
               MOVE 1                         TO WS-LEVEL-INCR
           ELSE
           IF WS-INCR-WRK > 29
             IF WS-LEVEL-INCR > 1
                 MOVE 2                       TO WS-LEVEL-INCR.

      *---------------------------------------
      *    working storage alteration
      *----+----------------------------------
       1500-WORKING-STORAGE.
           MOVE 'working storage'             TO WS-LOGIC-PLACE.
           MOVE WS-ITEM-POS                   TO WS-FND-POS.

      *    skip records if requested in PARM01
           IF WS-SKIP-RCD-BY-REQ = 'Y'
               GO TO 1500-WORKING-STORAGE-EXIT.

           IF WS-LEVEL-INCR-SW = 'N'
               GO TO 1500-MOVE-PIC-VALUE.
           IF WS-ITEM-1X2 NUMERIC
               AND WS-ITEM-3 = SPACE
               CONTINUE
           ELSE
               GO TO 1500-MOVE-PIC-VALUE.
      *---------------------------------------
      *    blank out array in case next '01' level is
      *    incremented differently than other '01' groups
      *---------------------------------------
           IF WS-ITEM-1X2 = '01'
               PERFORM VARYING WS-SUB3 FROM 2 BY 1
                   UNTIL WS-SUB3 > 50
                   MOVE SPACE                 TO WS-L1-LVL(WS-SUB3)
               END-PERFORM.
      *---------------------------------------
      *    lookup replacement increment and apply to output record
      *    66 or 88 use previous prefix value
      *---------------------------------------
           IF WS-ITEM-1X2 = '77'
               CONTINUE
           ELSE
           IF WS-ITEM-1X2 = '66' OR '88'
               PERFORM 1500-ADJUST-PREFIX-POS
           ELSE
               MOVE ZERO                      TO WS-PREFIX
               PERFORM VARYING WS-SUB3 FROM 1 BY 1
                   UNTIL WS-SUB3 > 50
                   IF WS-ITEM-1X2 = WS-L1-LVL(WS-SUB3)
                       MOVE WS-L1-NEW-LVL(WS-SUB3)
                                 TO WS-HOLD-RCD(WS-FND-POS: 2)
                       MOVE WS-SUB3           TO WS-PREFIX
                       MOVE 50                TO WS-SUB3
                   ELSE
                   IF WS-L1-LVL(WS-SUB3) = SPACE
                       MOVE WS-ITEM-1X2       TO WS-L1-LVL(WS-SUB3)
                       MOVE WS-L1-NEW-LVL(WS-SUB3)
                                 TO WS-HOLD-RCD(WS-FND-POS: 2)
                       MOVE WS-SUB3           TO WS-PREFIX
                       MOVE 50                TO WS-SUB3
                   END-IF
                   END-IF
               END-PERFORM
               IF WS-PREFIX > 1
                   PERFORM 1500-ADJUST-PREFIX-POS
               END-IF
           END-IF.

      *---------------------------------------
      *    move pic / value / redefines locations
      *    search logic usually includes leading space ie: ' PIC'
      *      so subtract 1 to include the leading space
      *----+----------------------------------
       1500-MOVE-PIC-VALUE.
           IF WS-ALIGN-PIC-SW = 'Y'
               MOVE ZERO                      TO WS-MOVE-POS
               PERFORM 1500-FIND-PIC
                   VARYING WS-SUB3 FROM 8 BY 1
                   UNTIL WS-SUB3 > 67
               IF WS-MOVE-POS > ZERO
                   MOVE ' PIC'                TO WS-ITEM
                   MOVE WS-MOVE-POS           TO WS-FND-POS
                   MOVE WS-PIC-LOC            TO WS-POS
                   SUBTRACT 1 FROM WS-POS
                   IF WS-FND-POS NOT = WS-POS
                       MOVE 'move PIC '       TO WS-LOGIC-PLACE
                       MOVE WS-HOLD-LEN       TO WS-LEN
                       PERFORM 2600-APPLY-DIFF-POS
                       IF WS-ITEMS-MOVED-SW = 'E'
                           ADD 5              TO WS-POS
                           PERFORM 2600-APPLY-DIFF-POS.

           IF WS-ALIGN-VALUE-SW = 'Y'
               MOVE ZERO                      TO WS-MOVE-POS
               PERFORM 1500-FIND-VALUE
                   VARYING WS-SUB3 FROM 8 BY 1
                   UNTIL WS-SUB3 > 65
               IF WS-MOVE-POS > ZERO
                   MOVE ' VALUE'              TO WS-ITEM
                   MOVE WS-MOVE-POS           TO WS-FND-POS
                   MOVE WS-VALUE-LOC          TO WS-POS
                   SUBTRACT 1 FROM WS-POS
                   IF WS-FND-POS NOT = WS-POS
                       MOVE WS-HOLD-LEN       TO WS-LEN
                       MOVE 'move VALUE'      TO WS-LOGIC-PLACE
                       PERFORM 2600-APPLY-DIFF-POS.

           IF WS-ALIGN-PIC-SW = 'Y'
               MOVE ZERO                      TO WS-MOVE-POS
               PERFORM 1500-FIND-COMP
                   VARYING WS-SUB3 FROM 8 BY 1
                   UNTIL WS-SUB3 > 65
               IF WS-MOVE-POS > ZERO
                   MOVE ' COMP'               TO WS-ITEM
                   MOVE WS-MOVE-POS           TO WS-FND-POS
                   MOVE WS-PIC-LOC            TO WS-POS
                   SUBTRACT 1 FROM WS-POS
                   IF WS-FND-POS NOT = WS-POS
                       MOVE WS-HOLD-LEN       TO WS-LEN
                       MOVE 'move COMP'       TO WS-LOGIC-PLACE
                       PERFORM 2600-APPLY-DIFF-POS
                       IF WS-ITEMS-MOVED-SW = 'E'
                           MOVE WS-VALUE-LOC  TO WS-POS
                           SUBTRACT 1 FROM WS-POS
                           PERFORM 2600-APPLY-DIFF-POS.

           IF WS-ALIGN-PIC-SW = 'Y'
               MOVE ZERO                      TO WS-MOVE-POS
               PERFORM 1500-FIND-REDEF
                   VARYING WS-SUB3 FROM 8 BY 1
                   UNTIL WS-SUB3 > 62
               IF WS-MOVE-POS > ZERO
                   MOVE ' REDEFINES'          TO WS-ITEM
                   MOVE WS-MOVE-POS           TO WS-FND-POS
                   MOVE WS-PIC-LOC            TO WS-POS
                   SUBTRACT 1 FROM WS-POS
                   IF WS-FND-POS NOT = WS-POS
                       MOVE WS-HOLD-LEN       TO WS-LEN
                       MOVE 'move REDEFINES'  TO WS-LOGIC-PLACE
                       PERFORM 2600-APPLY-DIFF-POS
                       IF WS-ITEMS-MOVED-SW = 'E'
                           SUBTRACT 10        FROM WS-POS
                           PERFORM 2600-APPLY-DIFF-POS.

           IF WS-ALIGN-PIC-SW = 'Y'
               MOVE ZERO                      TO WS-MOVE-POS
               PERFORM 1500-FIND-OCCURS
                   VARYING WS-SUB3 FROM 8 BY 1
                   UNTIL WS-SUB3 > 64
               IF WS-MOVE-POS > ZERO
                   MOVE ' OCCURS'             TO WS-ITEM
                   MOVE WS-MOVE-POS           TO WS-FND-POS
                   MOVE WS-PIC-LOC            TO WS-POS
                   SUBTRACT 1 FROM WS-POS
                   IF WS-FND-POS NOT = WS-POS
                       MOVE WS-HOLD-LEN       TO WS-LEN
                       MOVE 'move OCCURS'     TO WS-LOGIC-PLACE
                       PERFORM 2600-APPLY-DIFF-POS
                       IF WS-ITEMS-MOVED-SW = 'E'
                           ADD 5              TO WS-POS
                           PERFORM 2600-APPLY-DIFF-POS.

      *---------------------------------------
      *    adjust gap between field level and WS field name
      *    '02 ws-field'     -->   '02  ws-field'
      *    '02    ws-field'  -->   '02  ws-field'
      *---------------------------------------
           PERFORM 1300-FIND-LEAD-WORD.
           IF WS-FND-POS = ZERO
               GO TO 1500-MOVE-PIC-DEFINITION.
           MOVE WS-FND-POS                    TO WS-LEVEL-POS.
           IF WS-ITEM-1X2 NUMERIC
               AND WS-ITEM-3 = SPACE
               CONTINUE
           ELSE
               GO TO 1500-MOVE-PIC-DEFINITION.

           IF WS-HOLD-RCD(WS-LEVEL-POS + 3: 1) NOT = SPACE
               MOVE 3                         TO WS-GAP-ADJ
               MOVE WS-LEVEL-POS              TO WS-FND-POS
               PERFORM 1500-INSERT-GAP.
           IF WS-HOLD-RCD(WS-LEVEL-POS + 4: 1) = SPACE
               MOVE 4                         TO WS-GAP-ADJ
               MOVE WS-LEVEL-POS              TO WS-FND-POS
               PERFORM 1500-ZAP-GAP.
           IF WS-HOLD-RCD(WS-LEVEL-POS + 4: 1) = SPACE
               MOVE 4                         TO WS-GAP-ADJ
               MOVE WS-LEVEL-POS              TO WS-FND-POS
               PERFORM 1500-ZAP-GAP.

      *---------------------------------------
      *    adjust gap between PIC and WS definition ie: X or 9
      *    with different gap for PIC S9 statements
      *    'PIC x    '       -->   'PIC  x   '
      *    'PIC   x       '  -->   'PIC  x   '
      *    'PIC   s       '  -->   'PIC s    '
      *---------------------------------------
       1500-MOVE-PIC-DEFINITION.
           MOVE ZERO                          TO WS-MOVE-POS.
           PERFORM 1500-FIND-PIC
               VARYING WS-SUB3 FROM 8 BY 1
               UNTIL WS-SUB3 > 67.
           IF WS-MOVE-POS = ZERO
               GO TO 1500-WORKING-STORAGE-EXIT.

           ADD 1                              TO WS-MOVE-POS.
           IF WS-HOLD-RCD(WS-MOVE-POS + 4: 1) NOT = SPACE
             IF WS-HOLD-RCD(WS-MOVE-POS + 4: 1) NOT = 'S'
                 MOVE 4                       TO WS-GAP-ADJ
                 MOVE WS-MOVE-POS             TO WS-FND-POS
                 PERFORM 1500-INSERT-GAP.
           IF WS-HOLD-RCD(WS-MOVE-POS + 5: 1) = SPACE
               MOVE 5                         TO WS-GAP-ADJ
               MOVE WS-MOVE-POS               TO WS-FND-POS
               PERFORM 1500-ZAP-GAP.
           IF WS-HOLD-RCD(WS-MOVE-POS + 5: 1) = SPACE
               MOVE 5                         TO WS-GAP-ADJ
               MOVE WS-MOVE-POS               TO WS-FND-POS
               PERFORM 1500-ZAP-GAP.
           IF WS-HOLD-RCD(WS-MOVE-POS + 5: 1) = 'S'
               MOVE 5                         TO WS-GAP-ADJ
               MOVE WS-MOVE-POS               TO WS-FND-POS
               PERFORM 1500-ZAP-GAP.

           IF WS-CONVERT-PIC-SW = 'Y'
               PERFORM 1500-REPLACE-PIC-VALUES.

      *    try moving 'VALUE' again if the logic above created
      *    room for it
           IF WS-ALIGN-VALUE-SW = 'Y'
               MOVE ZERO                      TO WS-MOVE-POS
               PERFORM 1500-FIND-VALUE
                   VARYING WS-SUB3 FROM 8 BY 1
                   UNTIL WS-SUB3 > 65
               IF WS-MOVE-POS > ZERO
                   MOVE WS-MOVE-POS           TO WS-FND-POS
                   MOVE WS-VALUE-LOC          TO WS-POS
                   SUBTRACT 1 FROM WS-POS
                   IF WS-FND-POS NOT = WS-POS
                       MOVE WS-HOLD-LEN       TO WS-LEN
                       MOVE 'move VALUE again'   TO WS-LOGIC-PLACE
                       PERFORM 2600-APPLY-DIFF-POS.

      *     VALUE  '10'     -->   VALUE '10'
      *     VALUE   '10'    -->   VALUE '10'
           MOVE ZERO                          TO WS-MOVE-POS.
           PERFORM 1500-FIND-VALUE
               VARYING WS-SUB3 FROM 8 BY 1
               UNTIL WS-SUB3 > 65.
           IF WS-MOVE-POS > ZERO
             IF WS-HOLD-RCD(WS-MOVE-POS + 7: 1) = SPACE
               IF WS-HOLD-RCD(WS-FND-POS + 8: 1) = SPACE
                 IF WS-HOLD-RCD(WS-FND-POS + 9: 1) = SPACE
                     CONTINUE
                 ELSE
                     MOVE WS-MOVE-POS         TO WS-FND-POS WS-POS
                     ADD 9                    TO WS-FND-POS
                     ADD 7                    TO WS-POS
                     MOVE 'realign VALUE'     TO WS-LOGIC-PLACE
                     PERFORM 2600-APPLY-DIFF-POS
               ELSE
                   MOVE WS-MOVE-POS           TO WS-FND-POS WS-POS
                   ADD 8                      TO WS-FND-POS
                   ADD 7                      TO WS-POS
                   MOVE 'realign VALUE'       TO WS-LOGIC-PLACE
                   PERFORM 2600-APPLY-DIFF-POS.

      *---------------------------------------
      *    replace SPACES with SPACE   ZEROS ZEROES with ZERO
      *---------------------------------------
           IF WS-FIG-CONSTANT-SW = 'Y'
               MOVE SPACE                     TO WS-QUOTE-SW
               PERFORM 1500-REPLACE-FIG-CONSTANTS
                   VARYING WS-SUB3 FROM 8 BY 1
                   UNTIL WS-SUB3 > 70.

       1500-WORKING-STORAGE-EXIT. EXIT.

       1500-FIND-PIC.
           IF WS-HOLD-RCD(WS-SUB3: 5) = ' PIC '
               MOVE WS-SUB3                   TO WS-MOVE-POS
               MOVE 5                         TO WS-HOLD-LEN
               MOVE 67                        TO WS-SUB3.

       1500-FIND-VALUE.
           IF WS-HOLD-RCD(WS-SUB3: 7) = ' VALUE '
               MOVE WS-SUB3                   TO WS-MOVE-POS
               MOVE 7                         TO WS-HOLD-LEN
               MOVE 65                        TO WS-SUB3.

       1500-FIND-COMP.
           IF WS-HOLD-RCD(WS-SUB3: 5) = ' COMP'
               MOVE WS-SUB3                   TO WS-MOVE-POS
               MOVE 5                         TO WS-HOLD-LEN
               MOVE 65                        TO WS-SUB3.

       1500-FIND-REDEF.
           IF WS-HOLD-RCD(WS-SUB3: 11) = ' REDEFINES '
               MOVE WS-SUB3                   TO WS-MOVE-POS
               MOVE 11                        TO WS-HOLD-LEN
               MOVE 62                        TO WS-SUB3.

       1500-FIND-OCCURS.
           IF WS-HOLD-RCD(WS-SUB3: 8) = ' OCCURS '
               MOVE WS-SUB3                   TO WS-MOVE-POS
               MOVE 8                         TO WS-HOLD-LEN
               MOVE 64                        TO WS-SUB3.

       1500-INSERT-GAP.
           ADD WS-GAP-ADJ                     TO WS-FND-POS.
           MOVE WS-FND-POS                    TO WS-POS.
           ADD 1                              TO WS-POS.
           IF WS-FND-POS NOT = WS-POS
               MOVE 1                         TO WS-LEN
               MOVE WS-HOLD-RCD(WS-FND-POS: 1)   TO WS-ITEM
               MOVE 'insert gap'              TO WS-LOGIC-PLACE
               PERFORM 2600-APPLY-DIFF-POS.

       1500-ZAP-GAP.
           ADD WS-GAP-ADJ                     TO WS-FND-POS.
           MOVE WS-FND-POS                    TO WS-POS.
           SUBTRACT 1 FROM WS-POS.
           IF WS-FND-POS NOT = WS-POS
               MOVE 1                         TO WS-LEN
               MOVE WS-HOLD-RCD(WS-FND-POS: 1)   TO WS-ITEM
               MOVE 'zap gap'                 TO WS-LOGIC-PLACE
               PERFORM 2600-APPLY-DIFF-POS.

       1500-ADJUST-PREFIX-POS.
           MOVE 4                             TO WS-PREFIX-POS.
           PERFORM 1500-COMPUTE-PREFIX-POS
               VARYING WS-SUB3 FROM 1 BY 1
               UNTIL WS-SUB3 > WS-PREFIX.
           MOVE WS-ITEM-POS                   TO WS-FND-POS.
           IF WS-ITEM-1X2 = '66' OR '88'
               ADD 4                          TO WS-PREFIX-POS.
           MOVE WS-PREFIX-POS                 TO WS-POS.
           IF WS-FND-POS NOT = WS-POS
               MOVE 2                         TO WS-LEN
               MOVE 'adjust prefix pos'       TO WS-LOGIC-PLACE
               PERFORM 2600-APPLY-DIFF-POS.

       1500-COMPUTE-PREFIX-POS.
           IF WS-SUB3 > 12
               CONTINUE
           ELSE IF WS-SUB3 > 9
               ADD 1                          TO WS-PREFIX-POS
           ELSE IF WS-SUB3 > 5
               ADD 2                          TO WS-PREFIX-POS
           ELSE
               ADD 4                          TO WS-PREFIX-POS.

      *    "PIC  X(01). "  -->  "PIC  X.     "
       1500-REPLACE-PIC-VALUES.
           INSPECT WS-HOLD-RCD REPLACING ALL '(1) ' BY '(01)'.
           INSPECT WS-HOLD-RCD REPLACING ALL '(2) ' BY '(02)'.
           INSPECT WS-HOLD-RCD REPLACING ALL '(3) ' BY '(03)'.
           INSPECT WS-HOLD-RCD REPLACING ALL '(4) ' BY '(04)'.
           INSPECT WS-HOLD-RCD REPLACING ALL '(5) ' BY '(05)'.
           INSPECT WS-HOLD-RCD REPLACING ALL '(6) ' BY '(06)'.
           INSPECT WS-HOLD-RCD REPLACING ALL '(7) ' BY '(07)'.
           INSPECT WS-HOLD-RCD REPLACING ALL '(8) ' BY '(08)'.
           INSPECT WS-HOLD-RCD REPLACING ALL '(9) ' BY '(09)'.
           INSPECT WS-HOLD-RCD REPLACING ALL '(1). ' BY '(01).'.
           INSPECT WS-HOLD-RCD REPLACING ALL '(2). ' BY '(02).'.
           INSPECT WS-HOLD-RCD REPLACING ALL '(3). ' BY '(03).'.
           INSPECT WS-HOLD-RCD REPLACING ALL '(4). ' BY '(04).'.
           INSPECT WS-HOLD-RCD REPLACING ALL '(5). ' BY '(05).'.
           INSPECT WS-HOLD-RCD REPLACING ALL '(6). ' BY '(06).'.
           INSPECT WS-HOLD-RCD REPLACING ALL '(7). ' BY '(07).'.
           INSPECT WS-HOLD-RCD REPLACING ALL '(8). ' BY '(08).'.
           INSPECT WS-HOLD-RCD REPLACING ALL '(9). ' BY '(09).'.
           IF WS-HOLD-RCD(WS-MOVE-POS + 6: 5) = '(01) '
               MOVE SPACE       TO WS-HOLD-RCD(WS-MOVE-POS + 6: 4).
           IF WS-HOLD-RCD(WS-MOVE-POS + 6: 6) = '(01). '
               MOVE '.    '  TO WS-HOLD-RCD(WS-MOVE-POS + 6: 5).
           IF WS-HOLD-RCD(WS-MOVE-POS + 5: 6) = 'X(02) '
               MOVE 'XX    '    TO WS-HOLD-RCD(WS-MOVE-POS + 5: 6).
           IF WS-HOLD-RCD(WS-MOVE-POS + 5: 7) = 'X(02). '
               MOVE 'XX.    '   TO WS-HOLD-RCD(WS-MOVE-POS + 5: 7).
           IF WS-HOLD-RCD(WS-MOVE-POS + 5: 6) = '9(02) '
               MOVE '99    '    TO WS-HOLD-RCD(WS-MOVE-POS + 5: 6).
           IF WS-HOLD-RCD(WS-MOVE-POS + 5: 7) = '9(02). '
               MOVE '99.    '   TO WS-HOLD-RCD(WS-MOVE-POS + 5: 7).
           IF WS-HOLD-RCD(WS-MOVE-POS + 5: 6) = 'X(03) '
               MOVE 'XXX   '    TO WS-HOLD-RCD(WS-MOVE-POS + 5: 6).
           IF WS-HOLD-RCD(WS-MOVE-POS + 5: 7) = 'X(03). '
               MOVE 'XXX.   '   TO WS-HOLD-RCD(WS-MOVE-POS + 5: 7).
           IF WS-HOLD-RCD(WS-MOVE-POS + 5: 6) = '9(03) '
               MOVE '999   '    TO WS-HOLD-RCD(WS-MOVE-POS + 5: 6).
           IF WS-HOLD-RCD(WS-MOVE-POS + 5: 7) = '9(03). '
               MOVE '999.   '   TO WS-HOLD-RCD(WS-MOVE-POS + 5: 7).

       1500-REPLACE-FIG-CONSTANTS.
           IF WS-HOLD-RCD(WS-SUB3: 1) = WS-QUOTE
             IF WS-QUOTE-SW = SPACE
                 MOVE 'Y'                     TO WS-QUOTE-SW
             ELSE
             IF WS-QUOTE-SW = 'Y'
                 MOVE SPACE                   TO WS-QUOTE-SW
             ELSE
                 CONTINUE
           ELSE
           IF WS-QUOTE-SW = SPACE
               PERFORM 1500-REPLACE-STUFF.

       1500-REPLACE-STUFF.
           IF WS-SUB3 < 67
             IF WS-HOLD-RCD(WS-SUB3: 7) = ' ZEROS '
                 MOVE ' ZERO  '       TO WS-HOLD-RCD(WS-SUB3: 7)
             ELSE
             IF WS-HOLD-RCD(WS-SUB3: 7) = ' ZEROS.'
                 MOVE ' ZERO. '       TO WS-HOLD-RCD(WS-SUB3: 7)
             ELSE
             IF WS-HOLD-RCD(WS-SUB3: 7) = ' NULLS '
                 MOVE ' NULL  '       TO WS-HOLD-RCD(WS-SUB3: 7)
             ELSE
             IF WS-HOLD-RCD(WS-SUB3: 7) = ' NULLS.'
                 MOVE ' NULL. '       TO WS-HOLD-RCD(WS-SUB3: 7).
           IF WS-SUB3 < 66
             IF WS-HOLD-RCD(WS-SUB3: 8) = ' SPACES '
                 MOVE ' SPACE  '      TO WS-HOLD-RCD(WS-SUB3: 8)
             ELSE
             IF WS-HOLD-RCD(WS-SUB3: 8) = ' SPACES.'
                 MOVE ' SPACE. '      TO WS-HOLD-RCD(WS-SUB3: 8)
             ELSE
             IF WS-HOLD-RCD(WS-SUB3: 8) = ' ZEROES.'
                 MOVE ' ZERO.  '      TO WS-HOLD-RCD(WS-SUB3: 8)
             ELSE
             IF WS-HOLD-RCD(WS-SUB3: 8) = ' ZEROES '
                 MOVE ' ZERO   '      TO WS-HOLD-RCD(WS-SUB3: 8)
             ELSE
             IF WS-HOLD-RCD(WS-SUB3: 8) = ' QUOTES '
                 MOVE ' QUOTE  '      TO WS-HOLD-RCD(WS-SUB3: 8)
             ELSE
             IF WS-HOLD-RCD(WS-SUB3: 8) = ' QUOTES.'
                 MOVE ' QUOTE. '      TO WS-HOLD-RCD(WS-SUB3: 8).
           IF WS-SUB3 < 62
             IF WS-HOLD-RCD(WS-SUB3: 12) = ' LOW-VALUES '
                 MOVE ' LOW-VALUE  '  TO WS-HOLD-RCD(WS-SUB3: 12)
             ELSE
             IF WS-HOLD-RCD(WS-SUB3: 12) = ' LOW-VALUES.'
                 MOVE ' LOW-VALUE. '  TO WS-HOLD-RCD(WS-SUB3: 12).
           IF WS-SUB3 < 61
             IF WS-HOLD-RCD(WS-SUB3: 13) = ' HIGH-VALUES '
                 MOVE ' HIGH-VALUE  ' TO WS-HOLD-RCD(WS-SUB3: 13)
             ELSE
             IF WS-HOLD-RCD(WS-SUB3: 13) = ' HIGH-VALUES.'
                 MOVE ' HIGH-VALUE. ' TO WS-HOLD-RCD(WS-SUB3: 13).

      *---------------------------------------
      *    convert comment lines
      *----+----------------------------------
       1500-CONVERT-COMMENTS.

      *    skip records if requested in PARM01
           IF WS-SKIP-RCD-BY-REQ = 'Y'
               GO TO 1500-CONVERT-BREAK.

      *    blank out columns 1 - 6
           IF WS-COMMENT-06 = 'Y'
               MOVE SPACE                     TO WS-HOLD-RCD(1: 6).

      *    blank out columns 73 - 80
           IF WS-COMMENT-08 = 'Y'
               MOVE SPACE                     TO WS-HOLD-RCD(73: 8).

           MOVE ZERO                          TO WS-TALLY.
           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '*'.
           IF WS-TALLY > 40
               MOVE SPACE                     TO WS-DOT-SW
               MOVE SPACE                     TO WS-FIRST-LINE-SW.
           MOVE ZERO                          TO WS-TALLY.
           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '-'.
           IF WS-TALLY > 40
               MOVE SPACE                     TO WS-DOT-SW
               MOVE SPACE                     TO WS-FIRST-LINE-SW.
           IF WS-HOLD-RCD(8: 60) = SPACE
               MOVE SPACE                     TO WS-DOT-SW
               MOVE SPACE                     TO WS-FIRST-LINE-SW.

      *    do not convert blank lines
           IF WS-HOLD-RCD(8: 65) = SPACE
               GO TO 1500-CONVERT-BREAK.

      *    change comment case
      *      note: avoid placing 'convert to upper-case' logic
      *            above this step - it may be replaced by lowercase
           IF WS-COMMENT-CASE = 'I'
               PERFORM 1500-CONVERT-TO-LOWER
           ELSE
           IF WS-COMMENT-CASE = 'L'
             IF WS-WORKING-SW = 'Y'
                 PERFORM 1500-CONVERT-TO-LOWER
             ELSE
                 CONTINUE
           ELSE
           IF WS-COMMENT-CASE = 'U'
               MOVE WS-HOLD-RCD               TO WS-HOLD-RCD2
               MOVE FUNCTION UPPER-CASE(WS-HOLD-RCD2) TO WS-HOLD-RCD.

      *    convert dash lines to asterisks
           IF WS-LINE-TYPE = 'R'
               MOVE SPACE                     TO WS-OTHER-CHAR-SW
               PERFORM 1500-TEST-FOR-OTHER-CHARS
               IF WS-OTHER-CHAR-SW = SPACE
                   PERFORM 1500-CONVERT-FROM-DASHES.
      *    convert asterisk lines to dashes in procedure division
           IF WS-LINE-TYPE = 'D'
             IF WS-WORKING-SW = 'Y'
                 MOVE SPACE                   TO WS-OTHER-CHAR-SW
                 PERFORM 1500-TEST-FOR-OTHER-CHARS
                 IF WS-OTHER-CHAR-SW = SPACE
                     PERFORM 1500-CONVERT-TO-DASHES.

      *    move most comments to new position
           IF WS-COMMENT-POS > ZERO
               MOVE ZERO                      TO WS-FND-POS
               PERFORM 1500-FIND-COMMENT-START
                   VARYING WS-SUB1 FROM 8 BY 1
                   UNTIL WS-SUB1 > 25
               IF WS-FND-POS > ZERO
                 IF WS-FND-POS NOT = WS-COMMENT-POS
                     MOVE WS-HOLD-RCD         TO WS-HOLD-RCD2
                     PERFORM 1500-MOVE-COMMENTS.

      *    remove leading asterisks
           IF WS-ZAP-LEAD-STAR = 'Y'
               MOVE ZERO                      TO WS-TALLY
               INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '*'
               IF WS-TALLY < 10
                   INSPECT WS-HOLD-RCD(8: 5) REPLACING ALL '*'
                                             BY SPACE.

      *    remove trailing asterisks
           IF WS-ZAP-TRAIL-STAR = 'Y'
               PERFORM 1500-ZAP-TRAIL-ASTERISKS.

      *    in a group of comments, for the first line only,
      *      convert first character to upper case
           IF WS-CAP-FIRST = 'F'
             IF WS-FIRST-LINE-SW = SPACE
                 MOVE 8                       TO WS-SUB3
                 PERFORM 1500-UPPER-CASE-FIRST
                     UNTIL WS-SUB3 > 25.

      *    for all lines in a group of comments,
      *      convert first character to upper case
           IF WS-CAP-FIRST = 'A'
               MOVE 8                         TO WS-SUB3
               PERFORM 1500-UPPER-CASE-FIRST
                   UNTIL WS-SUB3 > 25.

      *    for all lines in a group of comments, convert the
      *      first character following '. ' to upper case
           IF WS-AFTER-DOT = 'Y'
               MOVE 8                         TO WS-SUB3
               PERFORM 1500-UPPER-CASE-AFTER-DOT
                   UNTIL WS-SUB3 > 70.

           IF WS-RENUM-SW = 'Y'
             IF WS-NO-RENUM-SW = SPACE
                 PERFORM 1500-REPLACE-PARAGRAPH-PREFIX.

       1500-CONVERT-BREAK.
           MOVE WS-HOLD-RCD                   TO COBOUT-RCD.
           PERFORM 3000-WRITE-COBOUT.

       1500-CONVERT-EXIT. EXIT.

       1500-TEST-FOR-OTHER-CHARS.
           PERFORM VARYING WS-SUB3 FROM 8 BY 1
               UNTIL WS-SUB3 > 71
               IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE OR '*' OR '-'
                                         OR '=' OR '+'
                   CONTINUE
               ELSE
                   MOVE 'N'                   TO WS-OTHER-CHAR-SW
                   MOVE 71                    TO WS-SUB3
               END-IF
           END-PERFORM.

       1500-CONVERT-TO-LOWER.
           MOVE SPACE                         TO WS-RESERVED-SW.
           IF WS-COBOL-UPPER-SW = 'Y'
             IF WS-PROCEDURE-SW = 'Y'
                 PERFORM 1300-FIND-LEAD-WORD
                 IF WS-FND-POS > ZERO
                     PERFORM VARYING WS-SUB3 FROM 1 BY 1
                         UNTIL WS-SUB3 > WS-P1-MAX
                         IF WS-ITEM = WS-P1-ITEM(WS-SUB3)
                             MOVE 'Y'         TO WS-RESERVED-SW
                             MOVE WS-P1-MAX   TO WS-SUB3
                         END-IF
                     END-PERFORM.

      *    do not lower-case convert paragraph names
           IF WS-ITEM(1: 1) NUMERIC
               MOVE ZERO                      TO WS-TALLY
               INSPECT WS-ITEM TALLYING WS-TALLY FOR ALL '-'
               IF WS-TALLY > ZERO
                   MOVE 'Y'                   TO WS-RESERVED-SW.

           IF WS-RESERVED-SW = SPACE
               MOVE WS-HOLD-RCD               TO WS-HOLD-RCD2
               MOVE FUNCTION LOWER-CASE(WS-HOLD-RCD2) TO WS-HOLD-RCD
               PERFORM 1500-CHANGE-WORD-CASE.

       1500-CONVERT-FROM-DASHES.
           MOVE ZERO                          TO WS-TALLY.
           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '-'.
           IF WS-TALLY > 10
               MOVE SPACE                     TO WS-FIRST-LINE-SW
               PERFORM VARYING WS-SUB1 FROM 8 BY 1
                   UNTIL WS-SUB1 > 72
                   IF WS-HOLD-RCD(WS-SUB1: 1) = '-'
                     IF WS-SUB1 > 71
                         MOVE SPACE        TO WS-HOLD-RCD(WS-SUB1: 1)
                     ELSE
                         MOVE '*'          TO WS-HOLD-RCD(WS-SUB1: 1)
                     END-IF
                   END-IF
               END-PERFORM
           END-IF.

           MOVE ZERO                          TO WS-TALLY.
           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '*'.
           IF WS-TALLY > 10
               MOVE SPACE                     TO WS-FIRST-LINE-SW
               PERFORM VARYING WS-SUB1 FROM 8 BY 1
                   UNTIL WS-SUB1 > 72
                   IF WS-SUB1 > 71
                       MOVE SPACE          TO WS-HOLD-RCD(WS-SUB1: 1)
                   ELSE
                   IF WS-HOLD-RCD(WS-SUB1: 1) = SPACE
                     IF WS-PROCEDURE-SW = 'Y'
                       IF WS-SUB1 > 46
                           MOVE SPACE      TO WS-HOLD-RCD(WS-SUB1: 1)
                       ELSE
                           MOVE '*'        TO WS-HOLD-RCD(WS-SUB1: 1)
                       END-IF
                     ELSE
                         MOVE '*'          TO WS-HOLD-RCD(WS-SUB1: 1)
                     END-IF
                   END-IF
                   END-IF
               END-PERFORM
           END-IF.

       1500-CONVERT-TO-DASHES.
           MOVE ZERO                          TO WS-TALLY.
           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '*'.
           IF WS-TALLY > 10
               MOVE SPACE                     TO WS-FIRST-LINE-SW
               PERFORM VARYING WS-SUB1 FROM 8 BY 1
                   UNTIL WS-SUB1 > 72
                   IF WS-HOLD-RCD(WS-SUB1: 1) = '*'
                     IF WS-SUB1 > 46
                         MOVE SPACE        TO WS-HOLD-RCD(WS-SUB1: 1)
                     ELSE
                         MOVE '-'          TO WS-HOLD-RCD(WS-SUB1: 1)
                     END-IF
                   END-IF
               END-PERFORM
           END-IF.

           MOVE ZERO                          TO WS-TALLY.
           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '-'.
           IF WS-TALLY > 10
               MOVE SPACE                     TO WS-FIRST-LINE-SW
               PERFORM VARYING WS-SUB1 FROM 8 BY 1
                   UNTIL WS-SUB1 > 72
                   IF WS-HOLD-RCD(WS-SUB1: 1) = '-'
                     IF WS-SUB1 > 46
                         MOVE SPACE        TO WS-HOLD-RCD(WS-SUB1: 1)
                     END-IF
                   ELSE
                   IF WS-HOLD-RCD(WS-SUB1: 1) = SPACE
                     IF WS-SUB1 > 46
                         CONTINUE
                     ELSE
                         MOVE '-'          TO WS-HOLD-RCD(WS-SUB1: 1)
                     END-IF
                   END-IF
                   END-IF
               END-PERFORM
           END-IF.

       1500-ZAP-TRAIL-ASTERISKS.
           IF WS-HOLD-RCD(72: 1) = '*'
               MOVE SPACE                     TO WS-HOLD-RCD(72: 1).
           MOVE ZERO                          TO WS-TALLY.
           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '*'.
           MOVE 13                            TO WS-SUB2.
           IF WS-LINE-TYPE = 'R'
             IF WS-PROCEDURE-SW = 'Y'
                 MOVE 47                      TO WS-SUB2.
           IF WS-TALLY < 58
               PERFORM 1500-ZAP-HANGERS.

       1500-ZAP-HANGERS.
           PERFORM VARYING WS-SUB1 FROM 71 BY -1
               UNTIL WS-SUB1 < WS-SUB2
               IF WS-HOLD-RCD(WS-SUB1: 2) = '* '
                   MOVE SPACE                 TO WS-HOLD-RCD(WS-SUB1: 1)
               ELSE
               IF WS-HOLD-RCD(WS-SUB1: 1) = SPACE OR '-' OR '+' OR '='
                   CONTINUE
               ELSE
                   MOVE 1                     TO WS-SUB1
               END-IF
               END-IF
           END-PERFORM.

       1500-FIND-COMMENT-START.
           IF WS-HOLD-RCD(WS-SUB1: 1) = SPACE OR '-' OR '*' OR '='
               CONTINUE
           ELSE
               MOVE WS-SUB1                   TO WS-FND-POS
               MOVE 72                        TO WS-SUB1.

      *    do not move commented paragraph names
       1500-MOVE-COMMENTS.
           MOVE WS-FND-POS                    TO WS-SUB3.
           IF WS-ITEM(1: 1) NUMERIC
               MOVE ZERO                      TO WS-TALLY
               INSPECT WS-ITEM TALLYING WS-TALLY FOR ALL '-'
               IF WS-TALLY > ZERO
                   CONTINUE
               ELSE
                   PERFORM 1500-COMMENT-LOOP
           ELSE
               PERFORM 1500-COMMENT-LOOP.

       1500-COMMENT-LOOP.
           PERFORM 1500-MOVE-COMMENTS-CHARS
               VARYING WS-SUB2 FROM 8 BY 1
               UNTIL WS-SUB2 > 72.

       1500-MOVE-COMMENTS-CHARS.
           IF WS-SUB2 < WS-COMMENT-POS
               MOVE SPACE                  TO WS-HOLD-RCD(WS-SUB2: 1)
           ELSE
           IF WS-SUB3 > 72
               MOVE SPACE                  TO WS-HOLD-RCD(WS-SUB2: 1)
           ELSE
               MOVE WS-HOLD-RCD2(WS-SUB3: 1)  TO WS-HOLD-RCD(WS-SUB2: 1)
               ADD 1                          TO WS-SUB3.

       1500-CHANGE-WORD-CASE.
           MOVE ZERO                          TO WS-SUB3.
           PERFORM 1500-FIND-VARIOUS-WORDS
               VARYING WS-SUB1 FROM 8 BY 1
               UNTIL WS-SUB1 > 72.

      *    ws-sub1
       1500-FIND-VARIOUS-WORDS.
           PERFORM 1500-WORD-LOOP
               VARYING WS-SUB2 FROM 1 BY 1
               UNTIL WS-SUB2 > WS-W1-MAX.

      *    ws-sub1 = record loc
      *    ws-sub2 = parm item
       1500-WORD-LOOP.
           MOVE WS-W1-ITEM(WS-SUB2)           TO WS-WORD.
           MOVE WS-W1-LEN(WS-SUB2)            TO WS-LEN.
           MOVE ZERO                          TO WS-MAX-LOOK.
           COMPUTE WS-MAX-LOOK = 73 - WS-LEN.

           IF WS-SUB1 > WS-MAX-LOOK
               CONTINUE
           ELSE
           IF WS-HOLD-RCD(WS-SUB1: WS-LEN)
                                      = WS-WORD(1: WS-LEN)
               MOVE WS-SUB1                   TO WS-SUB3
               PERFORM 1500-CHANGE-START-LOC
               IF WS-W1-HANDLE(WS-SUB2) = 'F'
                   PERFORM 1500-UPPER-CASE-WORD
                       UNTIL WS-SUB3 > 72
               ELSE
                   PERFORM 1500-UPPER-CASE
                       UNTIL WS-SUB3 > 72.

       1500-CHANGE-START-LOC.
           MOVE ZERO                          TO WS-TALLY.
           INSPECT WS-WORD TALLYING WS-TALLY FOR LEADING SPACE.
           ADD WS-TALLY                       TO WS-SUB3.

      *    ws-sub3 = work subscript
       1500-UPPER-CASE.
           IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE
               MOVE 73                        TO WS-SUB3
           ELSE
               INSPECT WS-HOLD-RCD(WS-SUB3: 1)
                   CONVERTING 'abcdefghijklmnopqrstuvwxyz'
                   TO         'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
               ADD 1                          TO WS-SUB3.

      *    ws-sub3 = work subscript
       1500-UPPER-CASE-WORD.
           IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE
               ADD 1                          TO WS-SUB3
           ELSE
           IF WS-HOLD-RCD(WS-SUB3: 1) ALPHABETIC
               INSPECT WS-HOLD-RCD(WS-SUB3: 1)
                   CONVERTING 'abcdefghijklmnopqrstuvwxyz'
                   TO         'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
               MOVE 73                        TO WS-SUB3
           ELSE
               ADD 1                          TO WS-SUB3.

      *    ws-sub3 = work subscript
       1500-UPPER-CASE-FIRST.
           IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE
               ADD 1                          TO WS-SUB3
           ELSE
           IF WS-HOLD-RCD(WS-SUB3: 1) ALPHABETIC
               INSPECT WS-HOLD-RCD(WS-SUB3: 1)
                   CONVERTING 'abcdefghijklmnopqrstuvwxyz'
                   TO         'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
               MOVE 71                        TO WS-SUB3
               MOVE 'N'                       TO WS-FIRST-LINE-SW
           ELSE
               ADD 1                          TO WS-SUB3.

      *    ws-sub3 = work subscript
       1500-UPPER-CASE-AFTER-DOT.
           IF WS-HOLD-RCD(WS-SUB3: 2) = '. ' OR ': '
               ADD 1                          TO WS-SUB3
               MOVE 'Y'                       TO WS-DOT-SW
           ELSE
           IF WS-DOT-SW = 'Y'
             IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE
                 ADD 1                        TO WS-SUB3
             ELSE
             IF WS-HOLD-RCD(WS-SUB3: 1) ALPHABETIC
                 INSPECT WS-HOLD-RCD(WS-SUB3: 1)
                     CONVERTING 'abcdefghijklmnopqrstuvwxyz'
                     TO         'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
                 MOVE SPACE                   TO WS-DOT-SW
             ELSE
                 ADD 1                        TO WS-SUB3
           ELSE
               ADD 1                          TO WS-SUB3.

      *---------------------------------------
      *
      *    RENUM paragraphs
      *
      *---------------------------------------
       1500-REPLACE-PARAGRAPH-PREFIX.
           MOVE SPACE                         TO WS-NBR-PAR-SW.
           MOVE SPACE                         TO WS-ACTUAL-PAR-SW.
           MOVE 'renumber paragraphs'         TO WS-LOGIC-PLACE.

           IF WS-HOLD-RCD(7: 1) = '*'
               PERFORM 1500-REPLACE-COMMENT-PAR
           ELSE
           IF WS-PROCEDURE-SW = 'Y'
             IF WS-HOLD-RCD(8: 1) NUMERIC
                 MOVE 8                       TO WS-SUB1
                 MOVE 'Y'                     TO WS-ACTUAL-PAR-SW
                 PERFORM 1500-FIND-PARAGRAPHS
             ELSE
             IF WS-HOLD-RCD(8: 1) = SPACE
                 AND WS-HOLD-RCD(9: 1) NUMERIC
                 MOVE 9                       TO WS-SUB1
                 MOVE 'Y'                     TO WS-ACTUAL-PAR-SW
                 PERFORM 1500-FIND-PARAGRAPHS
             ELSE
             IF WS-ITEM = 'PERFORM' OR 'ELSE' OR 'GO'
                       OR 'IF' OR 'WHEN'
                 PERFORM 1500-FIND-PARAGRAPHS
                     VARYING WS-SUB1 FROM 8 BY 1
                     UNTIL WS-SUB1 > 65
             ELSE
             IF WS-PRE-THRU-SW = 'Y'
                 PERFORM 1500-FIND-PARAGRAPHS
                     VARYING WS-SUB1 FROM 8 BY 1
                     UNTIL WS-SUB1 > 65.

      *---------------------------------------
      *    if within procedure division and comment starts with a
      *    number then assume it is a commented paragraph name
      *---------------------------------------
       1500-REPLACE-COMMENT-PAR.
           PERFORM 1300-FIND-LEAD-WORD.
           IF WS-FND-POS > ZERO
             IF WS-PROCEDURE-SW = 'Y'
               IF WS-ITEM-LEN < 7
                 IF WS-ITEM(1: WS-ITEM-LEN) NUMERIC
                     MOVE 'Y'                 TO WS-NBR-PAR-SW.
           IF WS-NBR-PAR-SW = 'Y'
               MOVE 'renum comment  par sw = Y   ' TO WS-LOGIC-PLACE
               PERFORM 1500-FIND-PREV-MATCH
               IF WS-HOLD-SUB3 > ZERO
                   MOVE WS-FND-POS            TO WS-SUB1
                   MOVE WS-HOLD-SUB3          TO WS-SUB2
                   PERFORM 1500-FIND-PAR-WORD
               ELSE
                   CONTINUE
           ELSE
               MOVE 'renum comment  par sw = N   ' TO WS-LOGIC-PLACE
               PERFORM 1500-FIND-PARAGRAPHS
                   VARYING WS-SUB1 FROM 8 BY 1
                   UNTIL WS-SUB1 > 65.

      *    ws-sub1
       1500-FIND-PARAGRAPHS.
           PERFORM 1500-FIND-PAR-WORD
               VARYING WS-SUB2 FROM 1 BY 1
               UNTIL WS-SUB2 > WS-R1-MAX.

      *    ws-sub1
      *    ws-sub2
       1500-FIND-PAR-WORD.
           IF WS-R1-PROG(WS-SUB2) = WS-PROGRAM
               MOVE WS-R1-PFX(WS-SUB2)        TO WS-PFX
               MOVE WS-R1-LEN(WS-SUB2)        TO WS-PFX-LEN
               MOVE WS-R1-NEW(WS-SUB2)        TO WS-PFX-NEW
               MOVE WS-R1-NLEN(WS-SUB2)       TO WS-PFX-NLEN
               IF WS-NBR-PAR-SW = 'Y'
                   SUBTRACT 1                 FROM WS-PFX-LEN
                   PERFORM 1500-TEST-PARAGRAPH
               ELSE
                   PERFORM 1500-TEST-PARAGRAPH.

      *    only alter paragraph prefix if paragraph number preceded
      *    by comment or space
       1500-TEST-PARAGRAPH.
           IF WS-HOLD-RCD(WS-SUB1: WS-PFX-LEN)
                                 = WS-PFX(1: WS-PFX-LEN)
             IF WS-HOLD-RCD(WS-SUB1 - 1: 1) = '*' OR SPACE
                 PERFORM 1500-PARAGRAPH-FOUND.

       1500-PARAGRAPH-FOUND.
           IF WS-ACTUAL-PAR-SW = 'Y'
               MOVE 'Y'                       TO WS-R1-MATCH(WS-SUB2).
           MOVE WS-HOLD-RCD                   TO WS-HOLD-RCD2.
           MOVE WS-SUB1                       TO WS-FND-POS WS-POS.
           ADD WS-PFX-LEN                     TO WS-FND-POS.
           ADD WS-PFX-NLEN                    TO WS-POS.
           MOVE WS-PFX-LEN                    TO WS-LEN.
           MOVE WS-PFX                        TO WS-ITEM.
           IF WS-PFX-LEN = WS-PFX-NLEN
             IF WS-PFX(1: WS-PFX-LEN) = WS-PFX-NEW(1: WS-PFX-NLEN)
                 CONTINUE
             ELSE
                 PERFORM 1500-CHANGE-SAME-LEN
           ELSE
               PERFORM 1500-CHANGE-DIFF-LEN.

           MOVE WS-R1-MAX                     TO WS-SUB2.

      *---------------------------------------
      *    only change this line:
      *    *  0800 calculate launch trajectory
      *    if next-to-match is same number:
      *    0800-CALC-TRAJECTORY.
      *---------------------------------------
       1500-FIND-PREV-MATCH.
           MOVE ZERO                          TO WS-HOLD-SUB3.
           PERFORM VARYING WS-SUB3 FROM WS-R1-MAX BY -1
               UNTIL WS-SUB3 < 1
               IF WS-R1-PROG(WS-SUB3) = WS-PROGRAM
                 IF WS-R1-MATCH(WS-SUB3) = SPACE
                     MOVE WS-SUB3             TO WS-HOLD-SUB3
                 ELSE
                     MOVE ZERO                TO WS-SUB3
                 END-IF
               END-IF
           END-PERFORM.

       1500-CHANGE-SAME-LEN.
           PERFORM 2900-SHOW-FOUND-MSG.
           PERFORM 2900-SHOW-BEFORE.
           MOVE WS-PFX-NEW(1: WS-PFX-NLEN)
                          TO WS-HOLD-RCD(WS-SUB1: WS-PFX-NLEN).
           MOVE 'Y'                           TO WS-ANY-ITEMS-SW.
           PERFORM 2900-SHOW-AFTER.
           PERFORM 2900-SHOW-BLANK-LINE.

       1500-CHANGE-DIFF-LEN.
           PERFORM 2900-SHOW-FOUND-MSG.
           PERFORM 2900-SHOW-BEFORE.
           MOVE 'Y'                           TO WS-OVERLAY-SW.
           PERFORM 2700-ADJUST-THINGS.
           IF WS-ITEMS-MOVED-SW = 'Y'
               MOVE WS-PFX-NEW(1: WS-PFX-NLEN)
                      TO WS-HOLD-RCD(WS-SUB1: WS-PFX-NLEN)
               MOVE 'Y'                       TO WS-ANY-ITEMS-SW.
           PERFORM 2900-SHOW-AFTER.
           PERFORM 2900-SHOW-BLANK-LINE.

      *---------------------------------------
      *
      *    BUILD paragraph number/renumber table
      *
      *---------------------------------------

       2000-READ-COBIN.
           READ COBIN.
           IF WS-STAT = ZERO
               ADD 1                          TO WS-READ-COBIN-CNT
               IF COBIN-RCD(7: 1) = '*'
                   CONTINUE
               ELSE
                   MOVE COBIN-RCD             TO WS-HOLD-RCD
                   PERFORM 2000-SELECT
           ELSE
           IF WS-STAT = 10
               MOVE 'Y'                       TO WS-END-COBIN-SW
           ELSE
               DISPLAY '**** COBNEAT read error on COBIN '
               DISPLAY '**** File stat           ' WS-STAT
               MOVE +2000                     TO WS-RETURN-CODE.

      *---------------------------------------
      *    X
      *---------------------------------------
       2000-SELECT.
           PERFORM 1300-FIND-LEAD-WORD.
           IF WS-FND-POS > ZERO
             IF WS-ITEM = 'PROCEDURE'
                 MOVE 'Y'                     TO WS-PROCEDURE-SW
             ELSE
             IF WS-ITEM = 'PROGRAM-ID'
                 MOVE WS-ITEM2                TO WS-PROGRAM
                 MOVE ZERO                    TO WS-PAR-WRK
                 ADD 1                        TO WS-PROGRAM-CNT
                 MOVE SPACE                   TO WS-PROCEDURE-SW.
           IF WS-PROCEDURE-SW = 'Y'
             IF COBIN-RCD(8: 1) NUMERIC
                 MOVE WS-HOLD-RCD(8: 50)      TO WS-HOLD-50
                 PERFORM 2000-PARSE-PARAGRAPH
             ELSE
             IF COBIN-RCD(8: 1) = SPACE
                 AND COBIN-RCD(9: 1) NUMERIC
                 MOVE WS-HOLD-RCD(9: 50)      TO WS-HOLD-50
                 PERFORM 2000-PARSE-PARAGRAPH.

       2000-PARSE-PARAGRAPH.
           MOVE WS-HOLD-50                    TO WS-HOLD-32.
           PERFORM 2800-DETERMINE-FIELD-LEN.
           MOVE WS-HOLD-LEN                   TO WS-PAR-LEN.
           UNSTRING WS-HOLD-50                DELIMITED BY '-'
               INTO WS-UNSTR1 WS-UNSTR2.
           MOVE WS-UNSTR1                     TO WS-HOLD-32.
           PERFORM 2800-DETERMINE-FIELD-LEN.
           IF WS-HOLD-LEN < 7
               ADD 1               TO WS-HOLD-LEN
               MOVE '-'            TO WS-UNSTR1(WS-HOLD-LEN: 1)
               IF WS-RENUM-MAX-MET = SPACE
                   PERFORM 2000-ADD-TO-RENUM-TABLE
                       VARYING WS-SUB3 FROM 1 BY 1
                       UNTIL WS-SUB3 > 500
               ELSE
                   MOVE SPACE                 TO WS-FLIP-SW
                   PERFORM 2000-ZAP-SAME-LOOP
                   PERFORM 2000-REDUCE-TO-DIFF
                       UNTIL NO-FLIP
                   PERFORM 2000-ADD-TO-RENUM-TABLE
                       VARYING WS-SUB3 FROM 1 BY 1
                       UNTIL WS-SUB3 > 500
                   IF WS-RENUM-MAX-MET = 'Y'
                       MOVE 'Y'               TO WS-END-COBIN-SW
                       PERFORM 2000-SHOW-MAX-MESSAGE.

       2000-SHOW-MAX-MESSAGE.
           DISPLAY '       '.
           DISPLAY ' !!  The renumber table holds 500 '
                   'paragraphs and it is full.  '
           IF WS-SHOW-RENUM-SW = SPACE
               DISPLAY ' !!  Other processing continues but '
                       'renumbering stops.  '.
           DISPLAY '       Program:               ' WS-PROGRAM.
           DISPLAY '       Line:                  ' WS-READ-COBIN-CNT.
           DISPLAY '       Paragraph:             ' WS-HOLD-50.
           DISPLAY '       '.

      *    ws-sub3
       2000-ADD-TO-RENUM-TABLE.
           IF WS-R1-PFX(WS-SUB3) = WS-UNSTR1
             IF WS-R1-PROG(WS-SUB3) = WS-PROGRAM
                 MOVE 500                     TO WS-SUB3
             ELSE
                 CONTINUE
           ELSE
           IF WS-R1-PFX(WS-SUB3) = SPACE
               MOVE SPACE                     TO WS-HOLD-08
               MOVE ZERO                      TO WS-HOLD-NLEN
               PERFORM 2000-CALC-NEW-PFX
               IF WS-PAR-LEN - WS-HOLD-LEN + WS-HOLD-NLEN > 30
                   MOVE 500                   TO WS-SUB3
                   PERFORM 2900-SHOW-PAR-LEN-ERR
               ELSE
                   MOVE WS-PROGRAM            TO WS-R1-PROG(WS-SUB3)
                   MOVE WS-UNSTR1             TO WS-R1-PFX(WS-SUB3)
                   MOVE WS-HOLD-LEN           TO WS-R1-LEN(WS-SUB3)
                   MOVE WS-HOLD-08            TO WS-R1-NEW(WS-SUB3)
                   MOVE WS-HOLD-NLEN          TO WS-R1-NLEN(WS-SUB3)
                   MOVE SPACE                 TO WS-R1-MATCH(WS-SUB3)
                   MOVE WS-SUB3               TO WS-SUB2
                   ADD WS-PAR-INCREMENT       TO WS-PAR-WRK
                   IF WS-SUB3 = 500
                       MOVE 'Y'               TO WS-RENUM-MAX-MET
                   ELSE
                       MOVE SPACE             TO WS-RENUM-MAX-MET
                       MOVE 500               TO WS-SUB3.

      *    ws-sub3
       2000-CALC-NEW-PFX.
           IF WS-PAR-WRK < 10
               MOVE WS-PAR-WRK(6: 1)          TO WS-HOLD-08
               MOVE '-'                       TO WS-HOLD-08(2: 1)
               MOVE 2                         TO WS-HOLD-NLEN
           ELSE
           IF WS-PAR-WRK < 100
               MOVE WS-PAR-WRK(5: 2)          TO WS-HOLD-08
               MOVE '-'                       TO WS-HOLD-08(3: 1)
               MOVE 3                         TO WS-HOLD-NLEN
           ELSE
           IF WS-PAR-WRK < 1000
               MOVE WS-PAR-WRK(4: 3)          TO WS-HOLD-08
               MOVE '-'                       TO WS-HOLD-08(4: 1)
               MOVE 4                         TO WS-HOLD-NLEN
           ELSE
           IF WS-PAR-WRK < 10000
               MOVE WS-PAR-WRK(3: 4)          TO WS-HOLD-08
               MOVE '-'                       TO WS-HOLD-08(5: 1)
               MOVE 5                         TO WS-HOLD-NLEN
           ELSE
           IF WS-PAR-WRK < 100000
               MOVE WS-PAR-WRK(2: 5)          TO WS-HOLD-08
               MOVE '-'                       TO WS-HOLD-08(6: 1)
               MOVE 6                         TO WS-HOLD-NLEN
           ELSE
               MOVE WS-PAR-WRK                TO WS-HOLD-08
               MOVE '-'                       TO WS-HOLD-08(7: 1)
               MOVE 7                         TO WS-HOLD-NLEN.

           PERFORM 3 TIMES
               IF WS-PAR-INIT-LEN > WS-HOLD-NLEN
                   MOVE WS-HOLD-08            TO WS-HOLD-32-TEMP
                   MOVE '0'                   TO WS-HOLD-08
                   MOVE WS-HOLD-32-TEMP       TO WS-HOLD-08(2: )
                   ADD 1                      TO WS-HOLD-NLEN
               END-IF
           END-PERFORM.

      *    zap old/new duplicates in paragraph renum table
       2000-ZAP-SAME-LOOP.
           PERFORM VARYING WS-SUB3 FROM 1 BY 1
               UNTIL WS-SUB3 > 500
               IF WS-R1-PFX(WS-SUB3) = WS-R1-NEW(WS-SUB3)
                   PERFORM 2000-BLANK-CURRENT-ITEM
               END-IF
           END-PERFORM.

      *    move non-duplicates to the top
       2000-REDUCE-TO-DIFF.
           MOVE 'N'                           TO WS-FLIP-SW.
           PERFORM 2000-REDUCE-TABLE
               VARYING WS-SUB3 FROM 1 BY 1
               UNTIL WS-SUB3 > 499.

       2000-REDUCE-TABLE.
           IF WS-R1-PFX(WS-SUB3) = WS-R1-NEW(WS-SUB3)
             IF WS-R1-PFX(WS-SUB3 + 1) NOT = SPACE
                 PERFORM 2000-ADJUST-TABLE-ITEMS
                 PERFORM 2000-BLANK-NEXT-ITEM
                 MOVE 'Y'                TO WS-FLIP-SW.

       2000-ADJUST-TABLE-ITEMS.
           MOVE WS-R1-PROG(WS-SUB3 + 1)   TO WS-R1-PROG(WS-SUB3).
           MOVE WS-R1-PFX(WS-SUB3 + 1)    TO WS-R1-PFX(WS-SUB3).
           MOVE WS-R1-LEN(WS-SUB3 + 1)    TO WS-R1-LEN(WS-SUB3).
           MOVE WS-R1-NEW(WS-SUB3 + 1)    TO WS-R1-NEW(WS-SUB3).
           MOVE WS-R1-NLEN(WS-SUB3 + 1)   TO WS-R1-NLEN(WS-SUB3).
           MOVE WS-R1-MATCH(WS-SUB3 + 1)  TO WS-R1-MATCH(WS-SUB3).

       2000-BLANK-NEXT-ITEM.
           MOVE SPACE                     TO WS-R1-PROG(WS-SUB3 + 1).
           MOVE SPACE                     TO WS-R1-PFX(WS-SUB3 + 1).
           MOVE ZERO                      TO WS-R1-LEN(WS-SUB3 + 1).
           MOVE SPACE                     TO WS-R1-NEW(WS-SUB3 + 1).
           MOVE ZERO                      TO WS-R1-NLEN(WS-SUB3 + 1).
           MOVE SPACE                     TO WS-R1-MATCH(WS-SUB3 + 1).

       2000-BLANK-CURRENT-ITEM.
           MOVE SPACE                     TO WS-R1-PROG(WS-SUB3).
           MOVE SPACE                     TO WS-R1-PFX(WS-SUB3).
           MOVE ZERO                      TO WS-R1-LEN(WS-SUB3).
           MOVE SPACE                     TO WS-R1-NEW(WS-SUB3).
           MOVE ZERO                      TO WS-R1-NLEN(WS-SUB3).
           MOVE SPACE                     TO WS-R1-MATCH(WS-SUB3).

      *----+----------------------------------

       2600-APPLY-DIFF-POS.
           MOVE WS-HOLD-RCD                   TO WS-HOLD-RCD2.
           MOVE SPACE                         TO WS-ITEMS-MOVED-SW.
           PERFORM 2900-SHOW-FOUND-MSG.
           PERFORM 2900-SHOW-BEFORE.
           MOVE SPACE                         TO WS-OVERLAY-SW.
           PERFORM 2700-ADJUST-THINGS.
           PERFORM 2900-SHOW-AFTER.
           PERFORM 2900-SHOW-BLANK-LINE.
           IF WS-ITEMS-MOVED-SW = 'Y'
               MOVE 'Y'                       TO WS-ANY-ITEMS-SW.

       2700-ADJUST-THINGS.
           MOVE ZERO                          TO WS-DIFF.
           MOVE ZERO                          TO WS-MOVE.
           MOVE ZERO                          TO WS-BLANK.
           MOVE ZERO                          TO WS-CHECK.
           MOVE ZERO                          TO WS-SPACE-LEN.
           MOVE ZERO                          TO WS-SPACE-LOC.
           IF WS-POS > WS-FND-POS
               PERFORM 2700-MOVE-DATA-RIGHT
           ELSE
           IF WS-POS < WS-FND-POS
               PERFORM 2700-MOVE-DATA-LEFT.

      *    ....+....+....+....+....+....+....+....+
      *    //S010.SYSIN DD DUMMY           *msg
      *    //EX0010.SYSIN DD DUMMY         *msg
      *    diff= 2  fnd-pos 7  pos 9    space-loc= 22
      *    space-len = 3       move = 15

      *    ....+....+....+....+....+....+....+....+
      *    //S010  EXEC  PGM=ABCD          *msg
      *    //S010      EXEC  PGM=ABCD        *msg
      *    diff= 4  fnd-pos 8  pos 12    space-loc= 23
      *    space-len = 5       move= 15

       2700-MOVE-DATA-RIGHT.
           COMPUTE WS-DIFF = WS-POS - WS-FND-POS.
           COMPUTE WS-SPACE-LEN = WS-DIFF + 1.
           MOVE WS-FND-POS                    TO WS-BLANK.
           MOVE WS-FND-POS                    TO WS-START-POS.
           MOVE SPACE                         TO WS-QUOTE-SW.
           PERFORM 2700-FIND-BLANK-AREA.
           IF WS-SPACE-LOC = ZERO
               PERFORM 2900-SHOW-NO-ROOM
               MOVE 'E'                       TO WS-ITEMS-MOVED-SW
           ELSE
               COMPUTE WS-MOVE = WS-SPACE-LOC - WS-FND-POS
               MOVE WS-HOLD-RCD2(1: WS-FND-POS - 1)
                                 TO WS-HOLD-RCD(1: WS-FND-POS - 1)
               MOVE WS-HOLD-RCD2(WS-FND-POS: WS-MOVE)
                                 TO WS-HOLD-RCD(WS-POS: WS-MOVE)
               MOVE SPACE        TO WS-HOLD-RCD(WS-BLANK: WS-DIFF)
               MOVE 'Y'                       TO WS-ITEMS-MOVED-SW
               PERFORM 2900-SHOW-WORK.

      *    ....+....+....+....+....+....+....+....+
      *    //EX0010.SYSIN DD DUMMY         *msg
      *    //S010.SYSIN DD DUMMY           *msg
      *    diff= 2  fnd-pos 9  pos 7    space-loc= 24
      *    space-len = 3       move = 15
      *    blank = 22

      *    ....+....+....+....+....+....+....+....+
      *    //S010      EXEC  PGM=ABCD        *msg
      *    //S010  EXEC  PGM=ABCD          *msg
      *    diff= 4  fnd-pos 12  pos 8     space-loc= 23
      *    space-len = 5        move= 15
      *    blank = 23

       2700-MOVE-DATA-LEFT.
           COMPUTE WS-DIFF = WS-FND-POS - WS-POS.
           COMPUTE WS-SPACE-LEN = WS-DIFF + 1.
           MOVE WS-POS                        TO WS-CHECK.
           MOVE WS-FND-POS                    TO WS-START-POS.
           MOVE SPACE                         TO WS-QUOTE-SW.
           PERFORM 2700-FIND-BLANK-AREA.

           IF WS-SPACE-LOC = ZERO
               COMPUTE WS-MOVE = 73 - WS-FND-POS
           ELSE
               COMPUTE WS-MOVE = WS-SPACE-LOC - WS-FND-POS.
           COMPUTE WS-BLANK = WS-POS + WS-MOVE.

           IF WS-HOLD-RCD(WS-CHECK: WS-DIFF) = SPACE
               OR WS-OVERLAY-SW = 'Y'
               MOVE WS-HOLD-RCD2(1: WS-POS - 1)
                                     TO WS-HOLD-RCD(1: WS-POS - 1)
               MOVE WS-HOLD-RCD2(WS-FND-POS: WS-MOVE)
                                     TO WS-HOLD-RCD(WS-POS: WS-MOVE)
               MOVE SPACE        TO WS-HOLD-RCD(WS-BLANK: WS-DIFF)
               PERFORM 2900-SHOW-WORK
               MOVE 'Y'                       TO WS-ITEMS-MOVED-SW
           ELSE
               PERFORM 2900-SHOW-NO-ROOM
               MOVE 'E'                       TO WS-ITEMS-MOVED-SW.

       2700-FIND-BLANK-AREA.
           MOVE ZERO                          TO WS-MAX-LOOK.
           COMPUTE WS-MAX-LOOK = 73 - WS-DIFF.
           PERFORM 2700-FIND-EMBEDDED-SPACE
               VARYING WS-SUB3 FROM WS-START-POS BY 1
               UNTIL WS-SUB3 > WS-MAX-LOOK.

      *    ws-sub3
       2700-FIND-EMBEDDED-SPACE.
           IF WS-HOLD-RCD(WS-SUB3: 1) = WS-QUOTE
             IF WS-QUOTE-SW = SPACE
                 MOVE 'Y'                     TO WS-QUOTE-SW
             ELSE
             IF WS-QUOTE-SW = 'Y'
                 MOVE SPACE                   TO WS-QUOTE-SW
             ELSE
                 CONTINUE
           ELSE
           IF WS-HOLD-RCD(WS-SUB3: WS-SPACE-LEN) = SPACE
             IF WS-QUOTE-SW = SPACE
                 MOVE WS-SUB3                 TO WS-SPACE-LOC
                 MOVE 73                      TO WS-SUB3.

      *---------------------------------------
      *    left justify a field
      *
      *    '      hello'    --->   'hello      '
      *---------------------------------------
       2800-SHIFT-LEFT.
           MOVE SPACE                         TO WS-HOLD-32-TEMP.
           PERFORM VARYING WS-STR1 FROM 1 BY 1
               UNTIL WS-STR1 > 32
               IF WS-HOLD-32(WS-STR1: 1) NOT = SPACE
                   MOVE WS-HOLD-32(WS-STR1: ) TO WS-HOLD-32-TEMP
                   MOVE 32                    TO WS-STR1
               END-IF
           END-PERFORM.
           MOVE WS-HOLD-32-TEMP               TO WS-HOLD-32.

       2800-DETERMINE-FIELD-LEN.
           PERFORM VARYING WS-SUB3 FROM 32 BY -1
               UNTIL WS-SUB3 < 1
               IF WS-HOLD-32(WS-SUB3: 1) = '.'
                   CONTINUE
               ELSE
               IF WS-HOLD-32(WS-SUB3: 1) NOT = SPACE
                   MOVE WS-SUB3               TO WS-HOLD-LEN
                   MOVE ZERO                  TO WS-SUB3
               END-IF
               END-IF
           END-PERFORM.

      *---------------------------------------

       2900-SHOW-FOUND-MSG.
           IF WS-SHOW-LEVEL = '2' OR '3'
               MOVE FUNCTION LOWER-CASE(WS-ITEM) TO WS-LC-ITEM
               DISPLAY '     found  ' WS-READ-COBIN-CNT
                       '  '  WS-LC-ITEM
                       ' at ' WS-FND-POS
                       ' req ' WS-POS ' len ' WS-LEN
               DISPLAY '            ----+----1----+----2----+----'
                       '3----+----4----+----5----+----6----+----7--'.

       2900-SHOW-BEFORE.
           IF WS-SHOW-LEVEL = '1' OR '2' OR '3'
               DISPLAY '     before ' WS-HOLD-RCD2.

       2900-SHOW-AFTER.
           IF WS-SHOW-LEVEL = '1' OR '2' OR '3'
               DISPLAY '     after  ' WS-HOLD-RCD.

       2900-SHOW-WORK.
           IF WS-SHOW-LEVEL = '3'
               DISPLAY '       - fnd pos   ' WS-FND-POS
                       '  new pos   ' WS-POS
                       '  move len  ' WS-MOVE
                       '  logic     ' WS-LOGIC-PLACE
               DISPLAY '       - space loc ' WS-SPACE-LOC
                       '  diff      ' WS-DIFF
                       '  space len ' WS-SPACE-LEN
                       '  blank loc ' WS-BLANK.

       2900-SHOW-NO-ROOM.
           IF WS-SHOW-LEVEL = '1' OR '2' OR '3'
               DISPLAY ' --> no room for adjustment at pos '
                         WS-POS ' for item ' WS-ITEM.

       2900-SHOW-PAR-LEN-ERR.
           IF WS-SHOW-LEVEL = '1' OR '2' OR '3'
               DISPLAY ' --> new paragraph length would be > 30 '
                       'for item ' WS-HOLD-50
               DISPLAY '     curr: ' WS-UNSTR1 ' len ' WS-HOLD-LEN
               DISPLAY '     skip: ' WS-HOLD-08 '            '
                       ' len ' WS-HOLD-NLEN.

       2900-SHOW-BLANK-LINE.
           IF WS-SHOW-LEVEL = '1' OR '2' OR '3'
               DISPLAY '          '.

       3000-WRITE-COBOUT.
           WRITE COBOUT-RECORD.
           IF WS-STAT = ZERO
               ADD 1                          TO WS-WRITE-COBOUT-CNT
           ELSE
               DISPLAY '**** COBNEAT write error on COBOUT'
               DISPLAY '**** File stat           ' WS-STAT
               MOVE +3000                     TO WS-RETURN-CODE.

      ************************************ END COBNEAT
