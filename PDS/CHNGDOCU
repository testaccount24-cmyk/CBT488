---------------------------------------------------------

      CHNGFILE

      Search for and replace strings in a file or pds member

---------------------------------------------------------

      !!  Linkage parm
          -  4 byte numeric file lrecl (ie: 0001 TO 9999)
          -  1 byte switch: 'y' = ignore date conversion errors
               and expand date to keep columns lined up.
          -  5 byte beginning record (begin changes at this record)
             00000 = start changes at bof
          -  5 byte ending record (end changes at this record)
             00000 = continue changing through eof
          -  1 byte switch: 'y' = when generating dates, include
               offset in date calculations.  operations sets the
               offset to -00001 when batch processing is delayed
               and runs past midnight.
          -  8 byte processing date.  when specified it is used
               in place of current system date.  if the offset
               switch above is 'y': if a hardcoded date is
               specified the offset is ignored, else if generating
               dates using CMD... the offset is considered.
             date in cymd format, or CMD... or CMF...

       PARM='0080N0000000000N00000000/'
       PARM='0132N0000000000YCMD001/'
       PARM='0080N0000500009NCMDX/'
       PARM='0270N0000000000Y/'

---------------------------------------------------------
      allow up to 80 lines in the input parm
---------------------------------------------------------

      To use:  1. Update CHNGCPY1 and CHNGCPY2 in SYSP.CPYBKLIB.
                  Indicate proper lrecl and record organization.

               2. Recompile CHNGFILE, changing the load module name
                  to CHNGxxxx, where xxxx is the record length
                  of the file.
                  (ie: CHNG0080 is used for updating members of a PDS)

               3. Create an input parm for the PARM01 DD
                  specifying what function will be performed

               4. Be sure to pass the lrecl of the file in the
                  linkage section at run-time.

      THE NORMAL METHOD for finding and replacing data is via a
      two record parm entry: line 1 is the find data,
      line 2 is the replace data.  this is called a SPACE/N/S pair.
      in the following example, the file is searched
      for the 19 byte string 'string to find'. when found
      it is overlayed with the 21 byte string 'REPLACEMENT DATA'.

*                               1         2         3         4
*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....
  00   00000000  0019  string to find     (case sensitive)
  00   00000000  0021  REPLACEMENT DATA


      The exceptions to the 2 line format are noted under 'type'
      below.

  position 1   (*)
       *     = commented line
       W     = do not display 'WAS' records.
       I     = do not display 'IS' records.
       B     = do not display 'WAS' or 'IS' records.
       A     = do not display 'WAS' or 'IS' records, or change position.

  position 2   (T)     Type
       SPACE = new record is loaded when data is found and
               changed.  parm search restarts.
               SPACE requires 2 parm line entries.
       N     = same record is kept, next parm entry is used.
               use when parm entries further down need to be accessed
               while the same record is loaded.
               N requires 2 parm line entries.
       S     = same record is kept, same parm entry continues
               to be used.  use when your find/replace logic needs
               to be redriven for the same parm and same record.
               example: changing ALL occurrences of ' ' to '-'.
               S requires 2 parm line entries.
       SPACE/N/S pair: use when searching for an existing date/time
               and altering that found date/time.

       F     = record is searched for a string.  position where
               string is found is saved for passing to other
               parm records.
               same record is kept, next parm entry is used.
               F requires 1 parm line entry.
       R     = data is placed in the record, or data is deleted
               from the record.
               generally used when no previous find processing is
               needed, ie: placing a string in all records in a file,
               or deleting a column of data.
               also used to perform repetitive updates after a string
               is found (ie: make changes to lower records)
               also used (with or without an F parm) to force data
               insertion rather than data adjustment, as described
               in (A) below.
               same record is kept, next parm entry is used.
               (the combination of F and R are similar to SPACE/N/S
               entries. SPACE/N/S records are recommended).
               R requires 1 parm line entry.
       F/R pair: use when placing an internally generated date/time
               into the file

       A     = data is placed over a comment jcl line (//* ...).
               if '+' is found in pos 44 of parm data, another
               A record is assumed to exist, and this data is
               appended to the previous data.
               if YYMMDD is found in pos 15, it is replaced with
               the current YYMMDD.
               same record is kept, next parm entry is used.
               A requires 1 parm line entry.
       C     = a condition code may be generated by CHNG0080.
               place the 4 byte condition code in pos 1-4 of the
               data field.
               new record is loaded, new parm entry is used.
               C requires 1 parm line entry.

               place a day of the week (01=mon ... 07=sun) in pos 6-7
               and a 'W' in pos 9 to have the cond code set only on
               that day of the week. otherwise leave blank.

               place a day of the month (01 thru 31) in pos 6-7
               and an 'M' in pos 9 to have the cond code set only on
               that day of the month. otherwise leave blank.
       D     = a default condition code may be set.  a 'C' record
               (above) will override this code.  used to set a condition
               when a string is NOT found.  all other 'C' logic applies.
               new record is loaded, new parm entry is used.
               D requires 1 parm line entry.

  position 3   (II)    Include lines
       ##    = generally used with a type F parm.  if following parms
               reference this parm with a pointer (below), they will
               only be processed if they occur within (II)
               nbr of lines.
               ignored on the second line of a SPACE/N/S pair.
               00 = current record only
               99 = all records

               for SPACE/F/N/R/S records, when a string is found,
               its starting location is saved.  later parms may
               reference these starting locations.
               if a parm references via a pointer a non
               SPACE/F/N/R/S line, processing will continue,
               ie: in a pointer chain (multiple parms using a
               particular pointer) the (II) amount is ignored
               and will not affect whether later parms are processed.

               (II) can be used to control which updates occur after
               a string is found, even if not in the line where
               found.

               example:   *TII12PPPPPMMMMPALLLL  1...+....1....+....2..
                           F02A  00030000  0006  DSN01
                           F02A  00000000  0011  DSN=DSN.ABC
                            00A  00000000  0010  SPACE=(TRK
                            00A  00000000  0010  SPACE=(CYL

                  file:    //DSN01  DD  DSN=DSN.ABC
                           //           DISP=(NEW,CATLG,DELETE),
                           //           DCB=(DSORG=PS),LRECL=80,
                           //           RECFM=FB,SPACE=(TRK,(20,5))

                result:   the request is to change 'SPACE=(TRK' to
                          'SPACE=(CYL' if the F lines are found.
                          the space parameter is NOT changed.  'DSN01 '
                          was found, and 'DSN=DSN.ABC' was found, but
                          the SPACE/N/S line refers to the F lines
                          via pointer 'A' which have an include amount
                          of '02'.  the space parameter is 3 lines
                          after the F line.

  position 5   (1)     Pointer 1
               generally used with a type F parm.  a pointer allows
               following parms to refer back to previous parms.
               it may be any character.
               ignored on the second line of a SPACE/N/S pair.

  position 6   (2)     Pointer 2
               it may be any character.
               same as pointer 1.  the pointers work with an OR
               relationship, rather than an AND relationship.  ie:
               if a parm uses pointer 1 and pointer 2 to refer back,
               if the parms referenced by pointer 1 return negative,
               and those by pointer 2 return positive, the parm IS
               processed.
               ignored on the second line of a SPACE/N/S pair.

  position 7   (P)     Position flag
       L     = position value (pos 8-9) is a starting location for a
               string search, rather than a fixed search location.
               ignored on the second line of a SPACE/N/S pair.
       +     = offset (pos 8-9) is an amount ahead of the
               found location.  if used by a parm referencing a
               previous parm via a pointer, the location of the
               string found by the referenced parm is used.
               ie:  F parm finds 'DSN=' in pos 30.
                    SPACE/N/S parm says +04 with string 'PDSMS'.
                    if 'PDSMS' is found at pos 34, 2nd line of
                    the SPACE/N/S is processed.
       -     = offset (pos 8-9) is an amount behind the
               found location.  if used by a parm referencing a
               previous parm via a pointer, the location of the
               string found by the referenced parm is used.

  position 8   (PPPP)  Position or Offset
       ####  = fixed position where search occurs.
               if flag (above) is 'L', this is a starting position
               for a string search.  if flag is '+ or '-', this
               is an offset amount to whatever location is last
               referenced.
               values: 00-9999

  position 12  (MMMM)  Max position
       ####  = the maximum position in a record to be used in a
               string search.
               the maximum position where data can be inserted or
               deleted when performing insert/delete adjusting.
               ie: if adjusting replacement data in JCL, you might
               not want '*', a continuation character in pos 72, to
               move.  to avoid this, set the max pos to 71.
               values: 00-9999

  position 16  (P)     Pull/Put
       P     = if referenced by line 1 of a SPACE/N/S pair, data
               at the find location is saved for later processing.
               if the adjust value is '2' or '3', the referenced
               data is deleted after it is pulled.
               if referenced by line 2 of a SPACE/N/S pair, the data
               pulled via the line 1 parm is placed in the output,
               or inserted if adjust value '1' or '2' is set.
               (P) is ignored for R parms.

               ------------------------------------------------
               Example of re-arranging columns
               ------------------------------------------------
               *TII12PPPPPMMMMPALLLL  1...+....0....+.
               AN00   00230000P30021
               AN00   00100000P10021
               AN00   01160000P30017
               AN00   00340000P10017

               - pull 21 bytes at pos 23.  delete from rcd.
                   all data to the right is moved left.
               - put 21 bytes at pos 10.  data is inserted.
               - pull and put 17 bytes from pos 116 to pos 34.

  position 17  (A)     Adjust
       string manipulation functions, where aaa is the search string:
       adjustment: aaabbb adjusted with 12345 becomes  12345bbb
                   all data on the right is shifted diff bytes
       overlay:    aaabbb overlayed with 12345 becomes 12345b
       insertion:  aaabbb with 12345 inserted becomes  12345aaabbb
                   all data on the right is shifted diff bytes
       correction: data to the right is kept positionally stable

       blank = data is overlayed
       1     = SPACE/N/S:  data is adjusted
               R parm:   data is inserted
       2     = SPACE/N/S:  data is adjusted & corrected
               R parm:   data is inserted & corrected
               corrected = spaces are inserted/deleted to keep
               data on the right of the spaces positionally stable.
               use '2' when you want automatic data adjustment for
               a SPACE/N/S pair, ie: regardless of whether the replace
               string is longer or shorter than the found string, the
               data on the right is adjusted to remain positionally
               stable.
       3     = data is deleted. data on right is moved left.
       4     = data is deleted & corrected
               spaces are inserted to keep data on the right
               of the spaces positionally stable.
       S     = spaces are placed at the position, regardless of data
               entered in the data field.

  position 18  (LLLL)  Length
       ####  = length of data string.  if longer than actual data,
               spaces are included in the search/replace.
               ie:  string 'hello' length 07 - 'hello  ' is assumed.
               'CCCC' = automatically calculate length.
               values: 00001-9999,CCCC

  position 24          Data to find or use for replacement
               if line 1 of a SPACE/N/S pair: the string to find.
               if line 2 of a SPACE/N/S pair: the string to use
               for replacing the found string.
               if a C parm: the condition code, day, and W or M flag.
               if a D parm: the condition code, day, and W or M flag.
               if an R parm: the replacement data.
               if an A parm, the message data.
               0-44 bytes of data

               Search is case sensitive.  Use a 'U' or 'L' parm below
               to convert the case of the searched file, if the case
               of the search string can vary.

               ------------------------------------------------
               Note on numeric processing:
               ------------------------------------------------
                  '#CNV#' may be used in place of '#NBR#' to convert
                    a non-numeric value such as
                      '    1' to a numeric value of '00001'
                      '  123' to a numeric value of '00123'
                      '1    ' to a numeric value of '00001'
                      '123  ' to a numeric value of '00123'
                      use on line 1 of a space/n/s pair to convert
                        the input data (internal to CHNGFILE)
                      use on line 2 of a space/n/s pair to convert
                        the output data (saved to the output file)

               ------------------------------------------------
               Use the following to alter the value of a NUMBER:
               ------------------------------------------------
                  use in line 1 of a space/n/s pair:
                    #NBR#  search for a numeric value (LLLL) bytes long

                  use in line 2 of a space/n/s pair:
                    #+00000#NBR#

                      the operation (+-/*) to perform
                      the amount to alter the number by

                      save output as (LLLL) bytes long

               ------------------------------------------------
               Use the following to sum a column of NUMBERS:
               ------------------------------------------------
                  use in line 1 of a space/n/s pair:
                    #NBR#  search for a numeric value (LLLL) bytes long

                  use in line 2 of a space/n/s pair:
                    #S00000#NBR#

                      the operation (sum) to perform
                      00000 required

               ------------------------------------------------
               Use the following to alter the value of a DATE:
               ------------------------------------------------
                  use in line 1 of a space/n/s pair:
                    #xxxxxx#

                      the format of the date to find
                      (ie: xxxxxx is placed in STV0400B-IN)

                      be sure (LLLL) is valued to reflect the
                      actual data length, not the parm length
                      (#M/D/Y# would be coded as 0008, not 0005)

                  use in line 2 of a space/n/s pair:
                    #+00000#xxxxxx#

                      the operation (past/future) to perform
                      the number of days to adjust the date
                      the format to write the date
                      (ie: xxxxxx is placed in STV0400B-OUT)

                      save output as (LLLL) bytes long

                  line 1 data and line 2 data are used as input to
                  STV0400B to calculate past and future dates, and to
                  convert date formats

                  if an R parm:
                    system (w/wo offset) date is assumed and the
                    data is formatted as line 2 data (above)

                  order of operation:  input date is incremented
                  first, then placed in xxxxxx format

                  Example:  to convert '042397042497swartz...'
                            to         '1997042319970424swartz...'

                   N00   00010000  0006  #MDY#
                   N00   00000000 10008  #+00000#CYMD#
                    00   00090000  0006  #MDY#
                    00   00000000 10008  #+00000#CYMD#

                  Example:  to place an internally generated
                            md date into  'FILEmmdd.TXT'
                            giving        'FILE0423.TXT'

                   F00A  00000000  0004  .TXT
                   R00A -00040000  0004  #+00000#MDY#

                Note:
                  if LS-IGNORE-ERR-SW is set to 'y' in the
                  linkage section at run-time, dates that are not
                  valid will not be changed, but the field will
                  still be reformatted the same as any fields that
                  were valid so that all data will remain in the
                  same column.
                  if LS-IGNORE-ERR-SW is not set to 'y', invalid
                  dates cause any field adjustment/insertion/
                  deletion activity to be skipped.

                PACKED DATES:
                  4 byte dates may be converted to an unpacked format.
                  use #MDY4# or #YMD4# in line 1.
                  be sure (PPPP) reflects the position of the
                  packed field and (LLLL) reflects the PACKED length
                  (0004) as opposed to the unpacked length (6 or 7).
                  Use (PPPP) on record 2 to place the date elsewhere.

               ------------------------------------------------
               Other examples using STV0400B
               ------------------------------------------------
                  To calculate age from a date in mdcy format in pos
                  25 and place in position 40 for a length of 3:

                   N00   00250000  0008  #MDCY#
                   N00   00400000  0003  #+00000#AGE#

                           2----+----3----+----4----+--
                   result:      09081962       037

               ------------------------------------------------
               Use the following to alter the value of a TIME:
               ------------------------------------------------
                  use in line 1 of a space/n/s pair:
                    #xxxxxx#

                    search for a time value (LLLL) bytes long
                    this is the format passed to STV0400B-IN

                  use in line 2 of a space/n/s pair:
                    #I00000#xxxxxx#  -or-
                    #D00000#xxxxxx#

                      the operation (increment/decrement) to perform
                      the number of minutes to adjust the time
                      the format to write the time
                      (ie: xxxxxx is placed in STV0400B-OUT)

                      be sure (LLLL) is valued to reflect the output

                  line 1 data and line 2 data are used as input to
                  STV0400B to calculate past and future times, and to
                  convert time formats

                  formats:
                    'HMM   '      '1324      '
                    'HMSM  '      '132400    '
                    'HMSM8 '      '13240000  '
                    'H:MM  '      '13:24     '
                    'H:M:SM'      '13:24:00  '
                    'HMP   '      '0124PM    '
                    'HMSP  '      '012400PM  '
                    'H:M P '      '01:24 PM  '
                    'H:MP  '      '01:24PM   '
                    'H:M:SP'      '01:24:00PM'

                  order of operation:  input time is incremented
                  first, then placed in xxxxxx format

                  Example:  to convert 'Andrews 04:24 PM       '
                            to         'Andrews 182400         '
                            in position 9 and increment by two hours:

                   N00   00009000  0008  #H:M P#
                   N00   00009000  0006  #I00120#HMSM#

               ------------------------------------------------
               Use the following to alter a JCL SPACE= parameter
               ------------------------------------------------
                  use in line 1 of a space/n/s pair:
                    #JCL#SPACE#   (set LLLL = 0006)

                  use in line 2 of a space/n/s pair:
                    SPACE=(...)   (set LLLL properly)

                    search for 'SPACE=' and calculate length of
                    entire SPACE parameter. allows replacing SPACE
                    statements without knowing the statements length
                    or contents.  include entire SPACE=(()) parameter
                    as replacement, excluding trailing comma, if any.

                    *TII12PPPPPMMMMPALLLL  1...+....0....+....
                     F04A  00000000  0012  BDUTRANS(+1)
                      04A  00000000  0006  #JCL#SPACE#
                      00A  00000000 20017  SPACE=(TRK,(1,1))


---------------------------------------------------------
