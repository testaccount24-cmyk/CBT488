
  COBNEAT documentation                                    2/01/2019

  --> because this program creates an altered copy of your program,
      you should test it thoroughly before replacing the original
      program.

      general placement of cobol program items:

      ---+----+----2----+----3----+----4----+----5----+----6----+----7--
      *0000-paragraph-name
           MOVE                        PIC    TO     VALUE


  ==============
  "C" parm items can be entered in upper or lower case
  ==============

  C no lineup

     "no lineup" can be used as a master override.  it "turns off"
     any of the parm options below that alter cobol processing
     statements.  you can specify this option once rather
     than comment each option individually.

     note that specifying this option also stops paragraph
     renumbering.


  C no comment

     "no comment" can be used as a master override.  it "turns off"
     any of the parm options below that alter cobol comments.
     you can specify this option once rather than comment each
     option individually.

     note that specifying this option also stops paragraph
     renumbering.


  C no renum

     specify "no renum" as a master override.  it "turns off"
     renumbering cobol paragraphs and also paragraph references
     in comments.  it has the same effect as commenting out
     option "renum par"


  C convert pic

     "convert pic" causes these replacements:

        PIC  X(01)  -->  PIC  X
        PIC  X(02)  -->  PIC  XX
        PIC  X(03)  -->  PIC  XXX
        PIC  X(04)  -->  PIC  X(04) no change

        PIC  9(01)  -->  PIC  9
        PIC  9(02)  -->  PIC  99
        PIC  9(03)  -->  PIC  999
        PIC  9(04)  -->  PIC  9(04) no change


  C else if

     "else if" causes ELSE IF statments in cobol to be separated
     into two lines:

     -before-
           IF WS-FIELD > 30
               ADD 4                          TO WS-FIELD4
           ELSE IF WS-FIELD > 20
               ADD 5                          TO WS-FIELD4.
     -after-
           IF WS-FIELD > 30
               ADD 4                          TO WS-FIELD4
           ELSE
           IF WS-FIELD > 20
               ADD 5                          TO WS-FIELD4.


  C fig constant

     "fig constant" causes COBNEAT to replace these words with
     their simple counterparts:

     -before-
           05  WS-QUOTE                PIC  XX       VALUE QUOTES.
           05  WS-NULL                 PIC  X(10)    VALUE NULLS.
           05  WS-ZERO                 PIC  999      VALUE ZEROES.
           05  WS-ZERO                 PIC  999      VALUE ZEROS.

           MOVE SPACES                        TO WS-FIELD.
           MOVE LOW-VALUES                    TO WS-FIELD.
     -after-
           05  WS-QUOTE                PIC  XX       VALUE QUOTE.
           05  WS-NULL                 PIC  X(10)    VALUE NULL.
           05  WS-ZERO                 PIC  999      VALUE ZERO.
           05  WS-ZERO                 PIC  999      VALUE ZERO.

           MOVE SPACE                         TO WS-FIELD.
           MOVE LOW-VALUE                     TO WS-FIELD.


  C indent                           04

     "indent" is used to override the default indent value of 4.
     allowable values 01 - 06.

     specifying "indent 03" results in:

     -before-
           IF WS-FIELD > WS-FIELD2
             IF WS-FIELD > WS-FIELD2
                 MOVE WS-FIELD3               TO WS-FIELD4.
     -after-
           IF WS-FIELD > WS-FIELD2
             IF WS-FIELD > WS-FIELD2
                MOVE WS-FIELD3                TO WS-FIELD4.
             ---
               |
               indent of 3


  C indent if                        02

     "indent if" is used to override the default indent-if value of 2.
     this determines where an "IF" statement is placed when directly
     following a previous "IF" statement.
     allowable values 01 - 06.

     specifying "indent if 03" results in:

     -before-
           IF WS-FIELD > WS-FIELD2
             IF WS-FIELD > WS-FIELD2
                 MOVE WS-FIELD3               TO WS-FIELD4.
     -after-
           IF WS-FIELD > WS-FIELD2
              IF WS-FIELD > WS-FIELD2
           ---    MOVE WS-FIELD3              TO WS-FIELD4.
             |
             |
             indent-if of 3


  C level incr                       05

     "level incr" will automatically renumber "01" working storage
     groups.  "66" and "77" and "88" level items are not altered.
     allowable values are 00 and 01 - 10.
     set the increment value to 00 to turn this feature off.

     for example, specifying "level incr 05" will renumber as follows:

     -before-
       01  WS-WORK-FIELDS.
           02  WS-STAT                 PIC  99       VALUE ZERO.
           02  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.
     -after-
       01  WS-WORK-FIELDS.
           05  WS-STAT                 PIC  99       VALUE ZERO.
           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.

     note that 49 is the highest allowable group prefix number.
     when the group levels get deeper, the increment is
     automatically lowered to 2 and then to 1 so the group
     numbers do not increment past 49.

     -before-
       01  WS-FIELDS.
           05  WS-ADDITIONAL-FIELDS.
               10  WS-LS-DATA-9X10    PIC  XX.
                  15  WS-15-DEEP   PIC X.
                  20  WS-20-DEEP   PIC X.
                  25  WS-25-DEEP   PIC X.
                  30  WS-30-DEEP   PIC X.
                  35  WS-35-DEEP   PIC X.
                  40  WS-40-DEEP   PIC X.
                  45  WS-45-DEEP   PIC X.
                  46  WS-46-DEEP   PIC X.
                  47  WS-47-DEEP   PIC X.
                  48  WS-48-DEEP   PIC X.
                  49  WS-49-DEEP   PIC X.
     -after-
       01  WS-FIELDS.
           05  WS-ADDITIONAL-FIELDS.
               10  WS-LS-DATA-9X10    PIC  XX.
                  15  WS-15-DEEP   PIC X.
                  20  WS-20-DEEP   PIC X.
                  25  WS-25-DEEP   PIC X.
                  30  WS-30-DEEP   PIC X.
                  32  WS-35-DEEP   PIC X.
                  34  WS-40-DEEP   PIC X.
                  36  WS-45-DEEP   PIC X.
                  38  WS-46-DEEP   PIC X.
                  40  WS-47-DEEP   PIC X.
                  41  WS-48-DEEP   PIC X.
                  42  WS-49-DEEP   PIC X.


  C orig loc                         12

     "orig loc" is used as the "global placement" location for most
     cobol words.  the default value is 12.
     allowable values are 08 - 16.
     there are few scenarios where this would need to change.

  C pic loc                          40

     "pic loc" is used to override the default location of 40 for "PIC"
     statements.  allowable values are 00 and 34 - 50.
     set the location value to 00 to turn this feature off.
     note that most items in "SELECT" clauses line-up to this value.
     also, REDEFINES and OCCURS statements also line-up to this value.

     -before-
           05 WS-QUOTE   PIC  XX    VALUE QUOTES.
           05 WS-NULL    PIC  X(10) VALUE NULLS.
     -after-
           05 WS-QUOTE                 PIC  XX    VALUE QUOTES.
           05 WS-NULL                  PIC  X(10) VALUE NULLS.


  C to loc                           47

     "to loc" is used to override the default location of 47 for "TO"
     statements.  allowable values are 00 and 35 - 55.
     set the location value to 00 to turn this feature off.
     DELIMITED BY and FROM statements also line-up to this value.

      *0000-  +----2----+----3----+----4----+----5----+----6----+----7--
     -before-
           MOVE WS-FIELD3     TO WS-FIELD4.
     -after-
           MOVE WS-FIELD3                     TO WS-FIELD4.

     note that if the "TO" statement cannot be moved to the default
     location then alternate locations are attempted.

      *0000-  +----2----+----3----+----4----+----5----+----6----+----7--
     -before-
                       MOVE WS-LONGER-FIELD TO WS-FIELD4
                       MOVE WS-LONGER-FIELD TO WS-FIELD5
                       MOVE WS-REALLY-LONG-FIELD TO WS-FIELD6
                       MOVE WS-SHORT TO WS-LONGER-RECEIVER-FIELD
     -after-
                       MOVE WS-LONGER-FIELD   TO WS-FIELD4
                       MOVE WS-LONGER-FIELD   TO WS-FIELD5
                       MOVE WS-REALLY-LONG-FIELD TO WS-FIELD6
                       MOVE WS-SHORT       TO WS-LONGER-RECEIVER-FIELD

  C value loc                        54

     "value loc" is used to override the default location of 54 for
     "VALUE" statements.  allowable values are 00 and 42 - 60.
     set the location value to 00 to turn this feature off.

      *0000-  +----2----+----3----+----4----+----5----+----6----+----7--
     -before-
           05 WS-QUOTE   PIC  XX    VALUE QUOTES.
           05 WS-NULL    PIC  X(10) VALUE NULLS.
     -after-
           05 WS-QUOTE   PIC  XX                     VALUE QUOTES.
           05 WS-NULL    PIC  X(10)                  VALUE NULLS.


  C case                                I

     "case I" is used to alter all comments to lower case, including
     those in the identification division.  the identification
     division often contains historical comments built-up over years
     and altering the comments might not be advisable.

  C case                                L

     "case L" is used to alter comments on/after the working-storage
     section to lower case.

     converting comments to lower case is advisable - it separates
     them visually from processing code and makes them easier to read.
     in essence, the comments are not SHOUTING AT YOU.  however,
     converting all characters to lower case might make them less
     english like.  these options exist to try to ease the conversion
     to lower case:  "after dot"  and  "cap first".
     they are explained below.


  C case                                U

     "case U" is used to alter all comments to upper case.


  C after dot

     specify "after dot" to convert characters following
     a period '. ' or a colon ': ' to upper-case.
     this works well with comments entered in a flowing
     paragraph style but not so well in list form:

      *  list one - item one. Item two: Item three
      *             item four item five.
      *             Item six  item seven.  Item eight

      *  here is another paragraph style comment.
      *  Items following the period or colon are converted to
      *  uppercase.  This might make paragraph style comments
      *  more readable.  Note which items are capitalized here.


  C cap first                    F

     specify "cap first f" to convert the first character in
     the first line in a group of lines to upper-case.
     this works well with comments entered in a list form
     but not so well in a prefixed list form.

     characters up to position 25 are converted.

    +----1----+----2----+----3--
      * First, run job JOB001 to fix the issue
      * second, run job JOB002 to fix issues from JOB001
      * third, run job JOB003 to fix issues from JOB002

      * Process: run job JOB001 to fix the issue
      *
      *          Run job JOB003 to fix issues from JOB001 and JOB002

      * Process:          run job JOB001
      *                   run job JOB002
      *                   run job JOB003

      * Here is another paragraph style comment. the first
      * character in this paragraph is capitalized but
      * the remaining lines are not converted to upper case.
      * note which items are capitalized here.


  C cap first                    A

     specify "cap first a" to convert the first character in
     all lines in a group of lines to upper-case.
     this works well with comments entered in a list form
     but not so well in a paragraph form.

     Characters up to position 25 are converted.

    +----1----+----2----+----3--
      * First, run job JOB001 to fix the issue
      * Second, run job JOB002 to fix issues from JOB001
      * Third, run job JOB003 to fix issues from JOB002

      * Process: run job JOB001 to fix the issue
      *          Run job JOB002 to fix issues from JOB001
      *          Run job JOB003 to fix issues from JOB002

      * Process:          run job JOB001
      *                   run job JOB002
      *                   run job JOB003

      * Here is another paragraph style comment.
      * The first character in each line is converted to
      * Upper case.  internal lines are not affected.
      * Note which items are capitalized here.


  C line type                           R

     specify "line type R" to convert dash lines or shorter
     asterisk lines to full length asterisk lines.

     lines with at least 10 dashes or asterisks, and with no
     intervening alpha or numeric characters, are converted
     to asterisks up to column 71.  in the procedure division
     they are converted to asterisks up to column 46.

     these lines

      *********
      * * * * * * * * * * * * * *
      *------------

     become

      *****************************************************************


  C line type                    D

     specify "line type D" to convert asterisk lines or shorter
     dash lines to dash lines.

     lines with at least 10 dashes or asterisks, and with no
     intervening alpha or numeric characters, are converted
     to dashes up to column 52

     these lines

      *********
      * * * * * * * * * * * * * *
      *------------

     become

      *---------------------------------------------


  C move comment                 0012

     specify "move comment" to move comments to a specified
     location.  the default location is column 12.
     allowable values are 0008 through 0020.
     When all the comments in a job/proc are aligned they make
     things look clean and organized.

     characters up to position 25 signal the move process to select
     that line for adjustment.  all items on the line are then moved
     together.

     this move logic does not attempt to keep disconnected words
     'positionally stable.'

     -before-
      *       example message     with a five character gap
     -after-
      *    example message     with a five character gap

     -not-
      *    example message        with trailing chars at original pos


     comment lists are often miss-aligned after comments are moved.
     get around this by placing list items after column 25.

          ----+----2----+----3--
     list items on/before column 25:

     -before-
      * process: run job JOB001 to fix the issue
      *          run job JOB002 to fix issues from JOB001
      *          run job JOB003 to fix issues from JOB002

     -after-
      *    process: run job JOB001 to fix the issue
      *    run job JOB002 to fix issues from JOB001
      *    run job JOB003 to fix issues from JOB002

          ----+----2----+----3--
     list items on/before column 25:

     -before-
      * process order   run job JOB001
      *                 run job JOB002
      *                 run job JOB003
     -after-
      *    process order   run job JOB001
      *    run job JOB002
      *    run job JOB003

          ----+----2----+----3--
     list items after column 25:

     -before-
      * process order     run job JOB001
      *                   run job JOB002
      *                   run job JOB003
     -after-
      *    process order  run job JOB001
      *                   run job JOB002
      *                   run job JOB003


  C cobol upper

     specifying "cobol upper" (in conjuction with "case I" or "case L")
     allows a comment line in the procedure division to remain
     in upper case if it starts with a cobol reserved word.
     this helps preserve commented logic in upper case
     for future re-use.

     -before-
      *    HERE WE REPLACE ALL SPACES BY ATERISKS
      *    INSPECT WS-FIELD REPLACING ALL SPACE BY '*'.
      *    THIS RESULTS IN DEFINING THE MEANING OF LIFE
     -after-
      *    here we replace all spaces by aterisks
      *    INSPECT WS-FIELD REPLACING ALL SPACE BY '*'.
      *    actually this just changes values in a field


  C zap eject

     specifying "zap eject" with replace these items with spaces:
     EJECT,  SKIP1, SKIP2, SKIP3


  C zap star e

     specifying "zap star e" will replace "trailing" asterisks with
     spaces.  Only lines with less than 58 asterisks are altered.
     alpha and numeric characters stop the right-to-left
     conversion.
     above the procedure division, asterisks are changed
     to spaces in columns 13 through 71.
     within the procedure division, asterisks are changed
     to spaces in columns 47 through 71.

     -before-
      **   this is a line with trailing asterisks   **
     -after-
      **   this is a line with trailing asterisks


  C zap star l

     specifying "zap star L" will replace "leading" asterisks with
     spaces.  only lines with less than 10 asterisks are altered.
     asterisks are changed to spaces in columns 8 through 12.

   -+----1----+-
     -before-
      **   this is a line with leading asterisks   **
     -after-
      *    this is a line with leading asterisks   **


  C zap first b

     for non-comment lines - ie: cobol processing lines -
     specifying "zap first b" will replace any characters in
     position 1 through 6 with spaces.


  C zap last b

     for non-comment lines - ie: cobol processing lines -
     specifying "zap last b" will replace any characters in
     position 73 through 80 with spaces, unless the "doc last"
     option is specified (below)


  C doc last b

     for non-comment lines - ie: cobol processing lines -
     if position 73-80 is blank:
       if COBNEAT changed the record
           place "cobneat " into positions 73-80
     if position 73-80 is not blank:
       if "zap last b" is specified:
         if COBNEAT changed the record
             place "cobneat " into positions 73-80
         otherwise
             blank out positions 73-80
       if "zap last b" is not specified:
           leave positions 73-80 unaltered: to still try to flag
           a changed record while preserving comments in positions
           73-80, see "doc last x ##" below

     this allows for flagging records changed by COBNEAT,
     either all changed records if "zap last b" is specified,
     or only for changed records when position 73 - 80 was already
     blank.


  C doc last x ##

     ## allows you to specify position 73 through 80

     for non-comment lines - ie: cobol processing lines -
     if position 73 - 80 is blank:
       if COBNEAT changed the record
           place whatever character follows "doc last" into
           position ## of the changed record
     if position 73 - 80 is not blank:
       if "zap last b" is specified:
         if COBNEAT changed the record
             blank out positions 73-80, then
             place whatever character follows "doc last" into
             position ## of the changed record
         otherwise
             blank out positions 73-80
       if "zap last b" is NOT specified:
         if COBNEAT changed the record
             place whatever character follows "doc last" into
             position ## of the changed record only if there is space
             to either side of that position
             if position is 73, then position 74 must be blank
             if position is 80, then position 79 must be blank

     this allows for flagging records changed by COBNEAT,
     either all changed records if "zap last b" is specified,
     or only for changed records when position 73 - 80 contains
     spaces near the specified position.

     for example, if you use positions 73 through 78 to document
     changes to programs then you could still place a percent sign
     at position 80 whenever COBNEAT changed a record by specifying:
     "doc last % 80"


  C zap first c

     in comment lines only,
     specifying "zap first c" will replace any characters in
     position 1 through 6 with spaces.


  C zap last c

     in comment lines only,
     specifying "zap last c" will replace any characters in
     position 73 through 80 with spaces.


  C renum par

     specifying "renum par" will tell COBNEAT to renumber
     cobol paragraph names.  only paragraphs starting with a
     number are renumbered.

     using this option causes the program to loop through your
     source program a second time - this may slightly increase
     runtimes.

     up to 500 paragraphs are renumbered.  If there are more than
     that in your program or programs then those beyond 500
     will not be altered.

     if looping through an extract of a library with multiple
     programs, or if you have multiple programs concatenated
     in the COBIN DD definition:
       for each program the increment numbering restarts at zero,
       but each unique paragraph prefix name within that program
       still occupies a position in the paragraph renum table,
       and the max is 500 entries. if renumbering, try to limit the
       number of programs to keep within the 500 paragraph limit.

       test switch = "T"

       you can accomplish this by running COBNEAT with test
       switch set to 'T'.  this will generate a table listing
       without changing things - and it will tell you the last
       program and line where the table filled-up.  if the table
       filled within your 15th program then run again with 14 and
       start the next batch with the 15th.

       if you run COBNEAT, replace the source program(s) with those
       altered by COBNEAT, and then run again with the program(s) in
       the same order as they were before then COBNEAT will calculate
       the same paragraph names as it did before.
       when the 500 slot internal table is full, COBNEAT will
       crunch the internal table down (removing duplicate old/new
       paragraph names) and then start generating new steps, up to
       another 500 paragraph prefixes.  thus with multiple passes
       you can renumber a very large program or multiple programs.

     COBNEAT also attempts to replace paragraph references within
     comments if the number matches a paragraph number and:
       -  if the paragraph number includes a dash or
       -  if the number is the first word in the comment
          and is six characters or less in length
          -and- the number matches the probable next paragraph
          number
     otherwise COBNEAT might inadvertently replace legitimate
     numbers unrelated to paragraph names with different values.

   -+----1----+-
     -before-
      *    1200 calc stuff
      *    we add 1200 here to calculate moon trajectory
      *    add this in 1200-CALC-STUFF
       1200-CALC-STUFF.
           ADD 1200                           TO WS-FIELD.

     -after-
      *    0400- calc stuff
      *    we add 1200 here to calculate moon trajectory
      *    add this in 0400-CALC-STUFF
       0400-CALC-STUFF.
           ADD 1200                           TO WS-FIELD.

     -program does not do this-
      *    0400- calc stuff
      *    we add 0400 here to calculate moon trajectory
      *    add this in 0400-CALC-STUFF
       0400-CALC-STUFF.
           ADD 0400                           TO WS-FIELD.

     the renumber process does not attempt to group numbers
     based on location in the program - ie: pre-and-post sort
     groups. however, the renumber process does keep number
     prefixes together - for example, all paragraphs beginning
     with 0400- will be altered to the same new number.

     after renumbering using COBNEAT you could still go back and
     change the first character of paragraph names to separate
     things as needed, and correct any issues with comments etc.


  C renum pincr                         0100

     specifying "renum pincr" overrides the default paragraph increment
     value of 0100.  specifying zero defaults to 0100.
     Any number greater than 1000 is set to 1000.

     if the calculated paragraph name is longer than four characters
     then it will expand to five and then six characters:
     1000-CALC-MOVE
     23000-CALC-MOVE
     423000-CALC-MOVE

     for example, if increment is 0100 then COBNEAT will number
     paragraphs as follows:
     0000-
     0100-
     .
     .
     0900-
     1000-
     1100-
     1200-
     .
     .
     9900-
     10000-
     10100-
     10200-


  C renum init                          0005

     specifying "renum init" overrides the default paragraph prefix
     length of 0005.  this indicates the length of the initial paragraph
     prefix.  values can be 0002 through 0005.
     ie: 0002 would generate a prefix of 0-
     ie: 0005 would generate a prefix of 0000-

     as the increment value (above) is applied, the prefix length
     changes as described in "renum pincr".

     inrement 0100   renum init 0002
     -------------   ---------------
     0-COBOL-PARAGRAPH-A
     100-COBOL-PARAGRAPH-B
     200-COBOL-PARAGRAPH-C
     300-COBOL-PARAGRAPH-D
     400-COBOL-PARAGRAPH-E


     inrement 0100   renum init 0005
     -------------   ---------------
     0000-COBOL-PARAGRAPH-A
     0100-COBOL-PARAGRAPH-B
     0200-COBOL-PARAGRAPH-C
     0300-COBOL-PARAGRAPH-D
     0400-COBOL-PARAGRAPH-E


  ==============
  "R" parm items can be entered in upper or lower case
  ==============

     "R" parms are used to specify cobol reserved words.
     generally, lines not starting with these words are ignored -
     items are not moved to "orig loc."  the exception to this
     is for lines following "TO" and "DISPLAY" statements.

     -before-
           MOVE 20              TO WS-FIELD1
                           WS-FIELD3
                           WS-FIELD4

     -after-
           MOVE 20                           TO WS-FIELD1
                                                WS-FIELD3
                                                WS-FIELD4

     if COBNEAT is moving words to the wrong location then you
     might try removing the word from the "R" list, or adding it.

*
*
*   enter up to 200 reserved words
*
*   Cobol reserved word.  If not specified, items are not selected
*   |     for positional adjustment.
*   |
* - ----+----+----+----+----+----+-- -- ------
  R ACCEPT
  R ACCESS
  R ADD
  R AND
  R ASSIGN
  R DEPENDING
  R DISPLAY
  R DIVIDE
  R EJECT
  R ELSE
  R END-EVALUATE
  R END-IF
  R END-PERFORM
  etc


  ==============
  "W" parm items can be entered in upper or lower case
  ==============

     "W" parms are used to specify words to convert back to
     upper-case within comments converted to lower-case.
     although this is merely cosmetic, it seems to make programs
     more readable.

     the descriptions below are fairly straight-forward.
*
*   if 'comment lc' specified,
*     convert these words within Cobol comments to uppercase
*
*   enter up to 200 items
*
*  bar helps show if spaces precede word
*  |
*  |                                    F=first character uppercase
*  |                                    W=whole word (and connected
*  |                            search  |   words) uppercase
*  |word                        length  |
*  ||                                |  |
* - ----+----+----+----+----+----+-- -- ------
  W| ftp                             04 W
  W| gdg                             04 W
  W| gm                              04 W
  W| vsam                            06 W
  W| chrys                           06 F
  W| ford                            06 F
  W| honda                           06 F
  W| note:                           06 F


  ==============
  "D" parm items can be entered in upper or lower case
  ==============

     "D" parms are used to limit program display statements
     to those within the specified record range.  this allows
     limiting the impact of possible excessive display statements
     when processing a large file.

     if "T" is passed in the linkage section parm,
     renumbering stats display but no program alteration occurs.

     if "1" is passed in the linkage section parm,
     basic program display fields are generated - ie: when altering
     a record or renumbering a paragraph

     if "2" is passed in the linkage section parm,
     it is the same as specifying "1" but also shows a ruler line.

     if "3" is passed in the linkage section parm,
     more detailed display statements are generated.

  ==============
  "S" parm items can be entered in upper or lower case
  ==============

     "S" parms are used to limit which input file records are
     actually altered.  for example, to be certain only working-
     storage fields are altered you could specify which record
     contains the PROCEDURE DIVISION line and have the program
     stop making alterations at that spot.

     all records are still written to the output file, but if
     "S" records were specified then only the records falling within
     the specified range are altered before being written.


